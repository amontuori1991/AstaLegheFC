@using AstaLegheFC.Models
@model AstaLegheFC.Models.UtenteViewModel
@{
    ViewData["Title"] = "Asta - Utente";
}

<style>
    .ricerca-container {
        margin-top: 2rem;
        margin-bottom: 2rem;
    }

    #risultati-ricerca {
        max-height: 200px;
        overflow-y: auto;
        border: 1px solid #34495e;
        border-radius: 5px;
        padding: 5px;
        background-color: #2c3e50;
    }

    .risultato-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px;
        border-bottom: 1px solid #34495e;
    }

        .risultato-item:last-child {
            border-bottom: none;
        }
</style>

<h2 class="mt-4">Benvenuto @Model.Nickname</h2>
<p>Crediti a disposizione: <strong id="crediti">@Model.CreditiDisponibili</strong></p>
<p>Puntata massima: <strong id="puntata">@Model.PuntataMassima</strong></p>

<div class="giocatore-in-asta-container">
    <p class="mb-0">Calciatore in asta:</p>
    <div id="giocatore-info">
        <img id="logo-giocatore-in-asta" src="@Model.LogoSquadra" alt="Logo" style="display: @(string.IsNullOrEmpty(Model.LogoSquadra) ? "none" : "block");" />
        <strong id="giocatore">
            @if (Model.CalciatoreInAsta != null && !string.IsNullOrEmpty(Model.CalciatoreInAsta.Nome))
            {
                @($"{Model.CalciatoreInAsta.Nome} ({Model.CalciatoreInAsta.Ruolo} - {Model.CalciatoreInAsta.Squadra})")
            }
            else
            {
                <text>Nessun giocatore</text>
            }
        </strong>
    </div>
</div>

<p>Timer: <strong id="timer">-</strong> secondi</p>
<p>Attuale offerente: <strong id="offerente">@Model.OfferenteAttuale</strong></p>
<p>Attuale offerta: <strong id="offerta">@Model.OffertaAttuale</strong> crediti</p>

<div id="avviso-ruolo-completo" class="alert alert-danger mt-3" style="display: none;"></div>

<div class="pulsanti-offerta-container mt-3">
    @foreach (var incremento in new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30 })
    {
        <button class="bazzer btn btn-primary m-1" data-incremento="@incremento" disabled>+@incremento</button>
    }
</div>

<div class="offerta-personalizzata-container mt-3">
    <div class="input-group">
        <input type="number" id="offertaPersonalizzataInput" class="form-control" placeholder="Offerta personalizzata" min="1" disabled>
        <button id="btnOffertaPersonalizzata" class="btn btn-success" disabled>Offri</button>
    </div>
</div>

<div class="ricerca-container">
    <hr style="border-color: #34495e;" />
    <h4>Suggerisci un Giocatore all'Admin</h4>
    <div class="row">
        <div class="col-md-6">
            <input type="text" id="input-ricerca-giocatore" class="form-control" placeholder="Cerca per nome..." />
            <div id="risultati-ricerca" class="mt-2"></div>
        </div>
    </div>
</div>

<div id="toast-suggerimento">
    <div class="toast-header">
        <strong>Suggerimento Inviato!</strong>
    </div>
    <div class="toast-body">
        <img id="toast-logo" src="" alt="logo" />
        <div>
            <p id="toast-nome" class="mb-0"></p>
            <p id="toast-dettagli" class="mb-0"></p>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script>
        // --- VARIABILI DI STATO E REGOLE ---
        let listoneCompleto = [];
        const nickname = "@Model.Nickname";
        const legaAlias = new URLSearchParams(window.location.search).get('lega');
        let offertaAttuale = parseInt("@Model.OffertaAttuale") || 0;
        let idListoneAttuale = parseInt("@(Model.CalciatoreInAsta?.IdListone ?? 0)");
        let ruoloGiocatoreAttuale = "@(Model.CalciatoreInAsta?.Ruolo ?? "")";
        let timerSecondi = @Model.TimerAsta;
        let timer = null;
        const maxPortieri = @Model.MaxPortieri;
        const maxDifensori = @Model.MaxDifensori;
        const maxCentrocampisti = @Model.MaxCentrocampisti;
        const maxAttaccanti = @Model.MaxAttaccanti;
        let portieriAttuali = @Model.PortieriAcquistati;
        let difensoriAttuali = @Model.DifensoriAcquistati;
        let centrocampistiAttuali = @Model.CentrocampistiAcquistati;
        let attaccantiAttuali = @Model.AttaccantiAcquistati;
        const connection = new signalR.HubConnectionBuilder().withUrl("/bazzerHub").build();

        // --- FUNZIONI DI UTILITY ---
        function aggiornaStatoPulsantiBazzer() {
            const avvisoDiv = document.getElementById('avviso-ruolo-completo');
            let abilitato = idListoneAttuale > 0;
            let messaggio = "";
            if (abilitato) {
                if (ruoloGiocatoreAttuale === 'P' && portieriAttuali >= maxPortieri) {
                    abilitato = false;
                    messaggio = `Non puoi fare offerte, hai già raggiunto il numero massimo di portieri (${maxPortieri}).`;
                } else if (ruoloGiocatoreAttuale === 'D' && difensoriAttuali >= maxDifensori) {
                    abilitato = false;
                    messaggio = `Non puoi fare offerte, hai già raggiunto il numero massimo di difensori (${maxDifensori}).`;
                } else if (ruoloGiocatoreAttuale === 'C' && centrocampistiAttuali >= maxCentrocampisti) {
                    abilitato = false;
                    messaggio = `Non puoi fare offerte, hai già raggiunto il numero massimo di centrocampisti (${maxCentrocampisti}).`;
                } else if (ruoloGiocatoreAttuale === 'A' && attaccantiAttuali >= maxAttaccanti) {
                    abilitato = false;
                    messaggio = `Non puoi fare offerte, hai già raggiunto il numero massimo di attaccanti (${maxAttaccanti}).`;
                }
            }
            document.querySelectorAll(".bazzer, #offertaPersonalizzataInput, #btnOffertaPersonalizzata").forEach(el => el.disabled = !abilitato);
            if (!abilitato && messaggio) {
                avvisoDiv.innerText = messaggio;
                avvisoDiv.style.display = 'block';
            } else {
                avvisoDiv.style.display = 'none';
            }
        }

        function resettaTimer() {
            const offertaCorrente = parseInt(document.getElementById("offerta").textContent) || 0;
            if (idListoneAttuale === 0 || offertaCorrente <= 0) {
                document.getElementById("timer").textContent = "-";
                clearInterval(timer);
                return;
            }
            clearInterval(timer);
            let count = timerSecondi;
            document.getElementById("timer").textContent = count;
            timer = setInterval(() => {
                count--;
                document.getElementById("timer").textContent = count;
                if (count <= 0) {
                    clearInterval(timer);
                    const vincitoreAttuale = document.getElementById("offerente").textContent;
                    if (nickname === vincitoreAttuale) {
                        connection.invoke("TerminaAsta", legaAlias).catch(err => console.error(err.toString()));
                    }
                }
            }, 1000);
        }

        async function aggiornaCrediti() {
            try {
                const response = await fetch(`/utente/crediti?nick=${nickname}&lega=${legaAlias}`);
                if (!response.ok) return;
                const data = await response.json();
                document.getElementById("crediti").textContent = data.creditiDisponibili;
                document.getElementById("puntata").textContent = data.puntataMassima;
                portieriAttuali = data.portieri;
                difensoriAttuali = data.difensori;
                centrocampistiAttuali = data.centrocampisti;
                attaccantiAttuali = data.attaccanti;
                aggiornaStatoPulsantiBazzer();
            } catch (e) { console.error("Errore aggiornamento crediti:", e); }
        }

        async function caricaListone() {
            try {
                const response = await fetch(`/Utente/GetListoneDisponibile?lega=${legaAlias}`);
                if (response.ok) {
                    listoneCompleto = await response.json();
                }
            } catch (e) {
                console.error("Errore nel caricamento del listone:", e);
            }
        }

        const inputRicerca = document.getElementById('input-ricerca-giocatore');
        const risultatiRicercaDiv = document.getElementById('risultati-ricerca');
        inputRicerca.addEventListener('input', () => {
            const testo = inputRicerca.value.toLowerCase();
            risultatiRicercaDiv.innerHTML = '';
            if (testo.length < 2) return;
            const filtrati = listoneCompleto.filter(g => g.nome.toLowerCase().includes(testo));
            filtrati.slice(0, 10).forEach(g => {
                const itemDiv = document.createElement('div');
                itemDiv.className = 'risultato-item';
                const spanInfo = document.createElement('span');
                spanInfo.textContent = `${g.nome} (${g.ruolo} - ${g.squadra})`;
                const suggestButton = document.createElement('button');
                suggestButton.className = 'btn btn-sm btn-info';
                suggestButton.textContent = 'Suggerisci';
                suggestButton.addEventListener('click', () => suggerisciGiocatore(g));
                itemDiv.appendChild(spanInfo);
                itemDiv.appendChild(suggestButton);
                risultatiRicercaDiv.appendChild(itemDiv);
            });
        });

        function suggerisciGiocatore(giocatore) {
            connection.invoke("SuggerisciGiocatore", giocatore.id, nickname, legaAlias)
                .then(() => {
                    mostraToastSuggerimento(giocatore);
                    inputRicerca.value = '';
                    risultatiRicercaDiv.innerHTML = '';
                })
                .catch(err => console.error("Errore nell'invio del suggerimento:", err));
        }

        function mostraToastSuggerimento(giocatore) {
            document.getElementById('toast-logo').src = `https://content.fantacalcio.it/web/img/team/${giocatore.squadra.toLowerCase().replace(' ', '-')}.png`;
            document.getElementById('toast-nome').textContent = giocatore.nome;
            document.getElementById('toast-dettagli').textContent = `${giocatore.ruolo} - ${giocatore.squadra}`;
            const toastElement = document.getElementById('toast-suggerimento');
            toastElement.classList.add('show');
            setTimeout(() => {
                toastElement.classList.remove('show');
            }, 4000);
        }

        // --- GESTIONE EVENTI SIGNALR ---
        connection.on("MostraGiocatoreInAsta", (giocatore) => {
            const logoImg = document.getElementById("logo-giocatore-in-asta");
            idListoneAttuale = giocatore.id;
            ruoloGiocatoreAttuale = giocatore.ruolo;
            document.getElementById("giocatore").textContent = `${giocatore.nome} (${giocatore.ruolo} - ${giocatore.squadraReale})`;
            if(giocatore.logoUrl) {
                logoImg.src = giocatore.logoUrl;
                logoImg.style.display = 'block';
            } else {
                logoImg.style.display = 'none';
            }
            document.getElementById("offerente").textContent = "NESSUNO";
            document.getElementById("offerta").textContent = "0";
            offertaAttuale = 0;
            aggiornaStatoPulsantiBazzer();
            resettaTimer();
        });

        connection.on("AggiornaOfferta", (offerente, offerta) => {
            document.getElementById("offerente").textContent = offerente;
            document.getElementById("offerta").textContent = offerta;
            offertaAttuale = offerta;
            resettaTimer();
        });

        connection.on("AstaTerminata", (giocatoreId, nomeGiocatore, nomeOfferente, offerta) => {
            mostraMessaggio('Asta Conclusa!', `Giocatore ${nomeGiocatore} aggiudicato da ${nomeOfferente} per ${offerta} crediti!`);
            idListoneAttuale = 0;
            ruoloGiocatoreAttuale = "";
            document.getElementById("giocatore").textContent = "Nessun giocatore";
            document.getElementById("logo-giocatore-in-asta").style.display = 'none';
            document.getElementById("offerente").textContent = "-";
            document.getElementById("offerta").textContent = "0";
            aggiornaStatoPulsantiBazzer();
            resettaTimer();
            aggiornaCrediti();
            caricaListone();
        });

        connection.on("AstaAnnullata", () => {
            mostraMessaggio("Asta Annullata", "L'amministratore ha annullato l'asta corrente.");
            idListoneAttuale = 0;
            ruoloGiocatoreAttuale = "";
            document.getElementById("giocatore").textContent = "Nessun giocatore";
            document.getElementById("logo-giocatore-in-asta").style.display = 'none';
            document.getElementById("offerente").textContent = "-";
            document.getElementById("offerta").textContent = "0";
            aggiornaStatoPulsantiBazzer();
            resettaTimer();
        });

        connection.on("AggiornaUtente", () => {
            aggiornaCrediti();
            caricaListone(); // Ricarica la lista dei giocatori disponibili
        });
        connection.on("AggiornaDurataTimer", (nuoviSecondi) => { timerSecondi = nuoviSecondi; });

        // --- GESTIONE CLICK E AVVIO ---
        document.querySelectorAll(".bazzer").forEach(btn => {
            btn.addEventListener("click", async () => {
                const incremento = parseInt(btn.dataset.incremento);
                const nuovaOfferta = offertaAttuale + incremento;
                const puntataMassima = parseInt(document.getElementById('puntata').textContent);
                if (nuovaOfferta > puntataMassima) {
                    mostraMessaggio("Offerta non valida", "Non hai abbastanza crediti per fare questa offerta! La tua puntata massima è " + puntataMassima);
                    return;
                }
                await connection.invoke("InviaOfferta", nickname, nuovaOfferta);
            });
        });

        document.getElementById("btnOffertaPersonalizzata").addEventListener("click", async () => {
            const inputOfferta = document.getElementById('offertaPersonalizzataInput');
            const offertaInserita = parseInt(inputOfferta.value);
            if (isNaN(offertaInserita) || offertaInserita <= 0) {
                mostraMessaggio("Errore", "Per favore, inserisci un valore numerico valido.");
                return;
            }
            if (offertaInserita <= offertaAttuale) {
                mostraMessaggio("Offerta non valida", "La tua offerta deve essere superiore a quella attuale!");
                return;
            }
            const puntataMassima = parseInt(document.getElementById('puntata').textContent);
            if (offertaInserita > puntataMassima) {
                mostraMessaggio("Offerta non valida", "La tua offerta supera la tua puntata massima disponibile! (" + puntataMassima + ")");
                return;
            }
            await connection.invoke("InviaOfferta", nickname, offertaInserita);
            inputOfferta.value = "";
        });

        connection.start().then(() => {
            connection.invoke("RichiediStatoAttuale");
            aggiornaStatoPulsantiBazzer();
            caricaListone();
        }).catch(err => console.error("Errore connessione SignalR:", err));
    </script>
}