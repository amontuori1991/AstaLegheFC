@using AstaLegheFC.Models
@model AstaLegheFC.Models.UtenteViewModel

@{
    ViewData["Title"] = "Asta - Utente";
    Layout = "~/Views/Shared/_LayoutAsta.cshtml";
}

<style>
    .card-header h5, .card-header p {
        margin-bottom: 0;
    }

    .display-1 {
        line-height: 1;
    }

    #offerente {
        font-weight: 300;
    }

    #offerta.display-1 {
        margin: .25rem 0 .25rem;
    }

    #risultati-ricerca {
        max-height: 200px;
        overflow-y: auto;
        border: 1px solid #34495e;
        border-radius: 5px;
        padding: 5px;
        background-color: #2c3e50;
    }

    .risultato-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px;
        border-bottom: 1px solid #34495e;
    }

        .risultato-item:last-child {
            border-bottom: none;
        }

    #offertaPersonalizzataInput, #input-ricerca-giocatore {
        font-size: 16px;
    }

    /* Pulsante azioni header (non ingombra) */
    .card-header {
        position: relative;
    }

    .header-actions {
        position: absolute;
        right: .5rem;
        top: .5rem;
        display: flex;
        gap: .5rem;
    }

    /* Toast suggerimento */
    .toast-suggerimento {
        position: fixed;
        right: 20px;
        bottom: 80px;
        display: flex;
        gap: 12px;
        align-items: center;
        padding: 12px 14px;
        border-radius: 10px;
        background: rgba(0,0,0,.85);
        color: #fff;
        box-shadow: 0 8px 24px rgba(0,0,0,.35);
        opacity: 0;
        transform: translateY(12px);
        pointer-events: none;
        transition: opacity .25s ease, transform .25s ease;
        z-index: 2000;
    }

        .toast-suggerimento.show {
            opacity: 1;
            transform: translateY(0);
            pointer-events: auto;
        }

        .toast-suggerimento img {
            width: 40px;
            height: 40px;
            object-fit: contain;
        }

        .toast-suggerimento .toast-body {
            display: flex;
            flex-direction: column;
        }

        .toast-suggerimento .toast-ok {
            margin-top: 2px;
            font-size: .9rem;
            color: #2ecc71;
        }

        .toast-suggerimento .toast-close {
            margin-left: 6px;
            background: transparent;
            border: 0;
            color: #fff;
            font-size: 20px;
            line-height: 1;
            cursor: pointer;
        }

    /* Barra crediti in fondo */
    #crediti-bar {
        position: fixed;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        justify-content: center;
        gap: 18px;
        align-items: center;
        background: #2c3e50;
        border-top: 1px solid #34495e;
        padding: 10px 14px env(safe-area-inset-bottom);
        box-shadow: 0 -6px 16px rgba(0,0,0,0.35);
        z-index: 1900;
    }

        #crediti-bar .chip {
            background: #1a2533;
            border: 1px solid #34495e;
            color: #fff;
            border-radius: 999px;
            padding: 6px 10px;
            font-weight: 600;
            font-size: .95rem;
        }

    .spacer-crediti {
        height: 60px;
    }

    /* Modal/Accordion dark */
    .modal-content {
        background-color: #2c3e50;
        color: #ecf0f1;
        border: 1px solid #34495e;
    }

    .modal-header, .modal-footer {
        border-color: #34495e;
    }

    .accordion-dark .accordion-item {
        background-color: #2c3e50;
        border: 1px solid #34495e;
    }

    .accordion-dark .accordion-button {
        background-color: #233041;
        color: #ecf0f1;
        border-bottom: 1px solid #34495e;
    }

        .accordion-dark .accordion-button:not(.collapsed) {
            color: #fff;
            background-color: #1f2a39;
            box-shadow: inset 0 -1px 0 #34495e;
        }

    .accordion-dark .accordion-body {
        background-color: #2c3e50;
    }

    .team-chip {
        font-weight: 700;
        color: #5dade2;
    }

    .my-team {
        outline: 2px solid #5dade2;
        border-radius: .5rem;
    }

    .role-col {
        min-width: 220px;
    }

    .role-title {
        font-weight: 700;
        color: #a9cce3;
        margin-bottom: .25rem;
    }

    .pl-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 8px;
        padding: 4px 0;
        border-bottom: 1px dashed #34495e;
    }

    .pl-left {
        display: flex;
        align-items: center;
        gap: 8px;
        min-width: 0;
    }

    .pl-logo {
        width: 20px;
        height: 20px;
        object-fit: contain;
    }

    .pl-name {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 180px;
    }

    .pl-cred {
        font-size: .85rem;
        opacity: .9;
    }

    /* Mobile */
    @@media (max-width: 576px) {
        h2#giocatore {
            font-size: 1.05rem;
            line-height: 1.2;
        }

        #offerente {
            font-size: 1rem;
        }

        #offerta.display-1 {
            font-size: 2.75rem;
        }

        .card .card-body {
            padding: .75rem .75rem;
        }

        .card .card-header, .card .card-footer {
            padding: .5rem .75rem;
        }

        .pulsanti-offerta-container {
            gap: .35rem;
        }

            .pulsanti-offerta-container .btn {
                padding: .35rem .25rem;
                font-size: .9rem;
                flex: 0 0 calc(33.333% - .35rem);
            }

        #offertaPersonalizzataInput {
            font-size: .95rem;
        }

        #btnOffertaPersonalizzata {
            padding: .45rem .65rem;
        }

        .role-col {
            min-width: 100%;
        }

        .pl-name {
            max-width: 60vw;
        }
    }
</style>

<div class="row mt-md-4">
    <div class="col-md-7 col-lg-8 mb-3 mb-md-0">
        <div class="card text-center shadow-lg h-100">
            <div class="card-header bg-dark text-white">
                <!-- Azioni header: bottone "Rose" -->
                <div class="header-actions">
                    <button id="btnRiepilogo" class="btn btn-outline-info btn-sm">Rose</button>
                </div>

                <div id="giocatore-info" class="d-flex justify-content-center align-items-center gap-3">
                    <img id="logo-giocatore-in-asta" src="@Model.LogoSquadra" alt="Logo"
                         style="height: 40px; display: @(string.IsNullOrEmpty(Model.LogoSquadra) ? "none" : "block");" />
                    <h2 id="giocatore" class="mb-0">
                        @if (Model.CalciatoreInAsta != null && !string.IsNullOrEmpty(Model.CalciatoreInAsta.Nome))
                        {
                            @($"{Model.CalciatoreInAsta.Nome} ({Model.CalciatoreInAsta.Ruolo} - {Model.CalciatoreInAsta.Squadra})")
                        }
                        else
                        {
                            <text>Nessun giocatore</text>
                        }
                    </h2>
                </div>
            </div>
            <div class="card-body d-flex flex-column justify-content-center">
                <h5 class="card-title text-muted">Offerta Attuale</h5>
                <p id="offerta" class="display-1 fw-bold text-warning">@Model.OffertaAttuale</p>
                <p class="mb-1">da</p>
                <h3 id="offerente" class="text-info">@Model.OfferenteAttuale</h3>
            </div>
            <div class="card-footer bg-dark text-white">
                <span class="text-muted">Tempo Rimanente:</span>
                <strong id="timer" class="fs-4 ms-2">-</strong>
            </div>
        </div>
    </div>

    <div class="col-md-5 col-lg-4">
        <div class="card shadow mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Offri</h5>
                <span class="text-muted small">Rilanci rapidi</span>
            </div>
            <div class="card-body">
                <div id="avviso-ruolo-completo" class="alert alert-danger" style="display: none;"></div>

                <div class="pulsanti-offerta-container d-flex flex-wrap gap-2">
                    @foreach (var incremento in new[] { 1, 2, 3, 4, 5, 10, 15, 20, 25, 30, 40, 50 })
                    {
                        <button class="bazzer btn btn-outline-primary flex-grow-1" data-incremento="@incremento" disabled>+@incremento</button>
                    }
                </div>
                <hr />
                <div class="input-group mt-3">
                    <span class="input-group-text" id="basic-addon1">Off. Pers.</span>
                    <input type="number" id="offertaPersonalizzataInput" class="form-control" placeholder="Valore" aria-label="Offerta personalizzata" min="1" disabled>
                    <button id="btnOffertaPersonalizzata" class="btn btn-success" disabled>Offri</button>
                </div>
            </div>
        </div>

        <div class="card shadow">
            <div class="card-header">
                <h5 class="mb-0">Suggerisci un Giocatore</h5>
            </div>
            <div class="card-body">
                <input type="text" id="input-ricerca-giocatore" class="form-control" placeholder="Cerca per nome..." />
                <div id="risultati-ricerca" class="mt-2"></div>
            </div>
        </div>
    </div>
</div>

<!-- Toast suggerimento -->
<div id="toast-suggerimento" class="toast-suggerimento" role="status" aria-live="polite" aria-atomic="true">
    <img id="toast-logo" alt="Logo squadra" />
    <div class="toast-body">
        <strong id="toast-nome"></strong>
        <div id="toast-dettagli" class="small text-muted"></div>
        <div class="toast-ok">Suggerimento inviato all’admin ✅</div>
    </div>
    <button type="button" class="toast-close" aria-label="Chiudi">&times;</button>
</div>

<!-- Barra compatta crediti in basso -->
<div id="crediti-bar" aria-live="polite">
    <span class="chip">Disp.: <strong id="crediti-bottom">@Model.CreditiDisponibili</strong></span>
    <span class="chip">Max: <strong id="puntata-bottom">@Model.PuntataMassima</strong></span>
</div>
<div class="spacer-crediti"></div>

<!-- Modal riepilogo rose -->
<div class="modal fade" id="modalRiepilogo" tabindex="-1" aria-labelledby="modalRiepilogoLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen-sm-down modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalRiepilogoLabel">Riepilogo rose</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Chiudi"></button>
            </div>
            <div class="modal-body">
                <div id="riepilogo-loading" class="text-center my-3" style="display:none;">Caricamento…</div>
                <div id="riepilogoContainer" class="accordion accordion-dark"></div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Chiudi</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {

            // --- VARIABILI DI STATO ---
            let listoneCompleto = [];
            const nickname = "@Model.Nickname";
            const legaAlias = new URLSearchParams(window.location.search).get('lega');
            let offertaAttuale = parseInt("@Model.OffertaAttuale") || 0;
            let idListoneAttuale = parseInt("@(Model.CalciatoreInAsta?.IdListone ?? 0)");
            let ruoloGiocatoreAttuale = "@(Model.CalciatoreInAsta?.Ruolo ?? "")";
            let timerSecondi = @Model.TimerAsta;
            let fineUtcCorrente = null;
            let countdownTimerUtente = null;

            let maxPortieri = @Model.MaxPortieri;
            let maxDifensori = @Model.MaxDifensori;
            let maxCentrocampisti = @Model.MaxCentrocampisti;
            let maxAttaccanti = @Model.MaxAttaccanti;
            let portieriAttuali = @Model.PortieriAcquistati;
            let difensoriAttuali = @Model.DifensoriAcquistati;
            let centrocampistiAttuali = @Model.CentrocampistiAcquistati;
            let attaccantiAttuali = @Model.AttaccantiAcquistati;

            const connection = new signalR.HubConnectionBuilder().withUrl("/bazzerHub").build();

            /* =======================
               UTILS
            ======================= */
            function aggiornaStatoPulsantiBazzer() {
                const avvisoDiv = document.getElementById('avviso-ruolo-completo');
                let abilitato = idListoneAttuale > 0;
                let messaggio = "";
                if (abilitato) {
                    if (ruoloGiocatoreAttuale === 'P' && portieriAttuali >= maxPortieri) {
                        abilitato = false; messaggio = `Non puoi fare offerte, hai già raggiunto il numero massimo di portieri (${maxPortieri}).`;
                    } else if (ruoloGiocatoreAttuale === 'D' && difensoriAttuali >= maxDifensori) {
                        abilitato = false; messaggio = `Non puoi fare offerte, hai già raggiunto il numero massimo di difensori (${maxDifensori}).`;
                    } else if (ruoloGiocatoreAttuale === 'C' && centrocampistiAttuali >= maxCentrocampisti) {
                        abilitato = false; messaggio = `Non puoi fare offerte, hai già raggiunto il numero massimo di centrocampisti (${maxCentrocampisti}).`;
                    } else if (ruoloGiocatoreAttuale === 'A' && attaccantiAttuali >= maxAttaccanti) {
                        abilitato = false; messaggio = `Non puoi fare offerte, hai già raggiunto il numero massimo di attaccanti (${maxAttaccanti}).`;
                    }
                }
                document.querySelectorAll(".bazzer, #offertaPersonalizzataInput, #btnOffertaPersonalizzata").forEach(el => el.disabled = !abilitato);
                if (!abilitato && messaggio) { avvisoDiv.innerText = messaggio; avvisoDiv.style.display = 'block'; } else { avvisoDiv.style.display = 'none'; }
            }

            function aggiornaCountdownDaFineUtc() {
                const timerEl = document.getElementById("timer");
                clearInterval(countdownTimerUtente);
                if (!idListoneAttuale || !fineUtcCorrente) { if (timerEl) timerEl.textContent = "-"; return; }
                const end = new Date(fineUtcCorrente);
                const tick = () => {
                    const sec = Math.ceil((end.getTime() - Date.now()) / 1000);
                    timerEl.textContent = sec >= 0 ? sec : 0;
                    if (sec <= -1) { clearInterval(countdownTimerUtente); }
                };
                tick();
                countdownTimerUtente = setInterval(tick, 1000);
            }

            async function aggiornaCrediti() {
                try {
                    const res = await fetch(`/utente/crediti?nick=${nickname}&lega=${legaAlias}`);
                    if (!res.ok) return;
                    const data = await res.json();
                    const elCred = document.getElementById("crediti-bottom");
                    const elMax  = document.getElementById("puntata-bottom");
                    if (elCred) elCred.textContent = data.creditiDisponibili;
                    if (elMax)  elMax.textContent  = data.puntataMassima;
                    portieriAttuali = data.portieri;
                    difensoriAttuali = data.difensori;
                    centrocampistiAttuali = data.centrocampisti;
                    attaccantiAttuali = data.attaccanti;
                    aggiornaStatoPulsantiBazzer();
                } catch (e) { console.error("Errore aggiornamento crediti:", e); }
            }

            async function caricaListone() {
                try {
                    const res = await fetch(`/Utente/GetListoneDisponibile?lega=${legaAlias}`);
                    if (res.ok) listoneCompleto = await res.json();
                } catch (e) { console.error("Errore nel caricamento del listone:", e); }
            }

            /* =======================
               RIEPILOGO ROSE (MODAL)
            ======================= */
            const modalEl = document.getElementById('modalRiepilogo');
            const riepilogoContainer = document.getElementById('riepilogoContainer');
            const riepilogoLoading = document.getElementById('riepilogo-loading');

            function renderListaGiocatori(titolo, arr) {
                const items = (arr || []).map(p => `
                  <div class="pl-item">
                    <div class="pl-left">
                      <img class="pl-logo" src="${p.logoUrl || ''}" alt="">
                      <span class="pl-name">${p.nome}</span>
                    </div>
                    <span class="pl-cred">(${p.crediti})</span>
                  </div>
                `).join('') || `<div class="text-muted small">Nessuno</div>`;
                return `
                  <div class="role-col">
                    <div class="role-title">${titolo}</div>
                    ${items}
                  </div>
                `;
            }

            function renderAccordionSquadre(data) {
                const squads = (data && data.squads) ? data.squads : [];
                const accId = 'acc-riepilogo';
                const html = squads.map((s, idx) => {
                    const collapseId = `collapse-${s.squadraId}`;
                    const headingId = `heading-${s.squadraId}`;
                    const show = s.isMe ? 'show' : '';
                    const myTeamClass = s.isMe ? 'my-team' : '';
                    const counts = {
                        P: (s.portieri || []).length,
                        D: (s.difensori || []).length,
                        C: (s.centrocampisti || []).length,
                        A: (s.attaccanti || []).length
                    };
                    return `
                      <div class="accordion-item ${myTeamClass}">
                        <h2 class="accordion-header" id="${headingId}">
                          <button class="accordion-button ${show ? '' : 'collapsed'}" type="button"
                                  data-bs-toggle="collapse" data-bs-target="#${collapseId}"
                                  aria-expanded="${show ? 'true' : 'false'}" aria-controls="${collapseId}">
                            <span class="team-chip">${s.nickname}</span>
                            <span class="ms-3 small text-muted">P:${counts.P} D:${counts.D} C:${counts.C} A:${counts.A}</span>
                            ${s.isMe ? '<span class="badge bg-info ms-2">La tua</span>' : ''}
                          </button>
                        </h2>
                        <div id="${collapseId}" class="accordion-collapse collapse ${show}" data-bs-parent="#${accId}">
                          <div class="accordion-body">
                            <div class="d-flex flex-wrap gap-3">
                              ${renderListaGiocatori('Portieri', s.portieri)}
                              ${renderListaGiocatori('Difensori', s.difensori)}
                              ${renderListaGiocatori('Centrocampisti', s.centrocampisti)}
                              ${renderListaGiocatori('Attaccanti', s.attaccanti)}
                            </div>
                          </div>
                        </div>
                      </div>
                    `;
                }).join('');

                return `<div class="accordion accordion-dark" id="${accId}">${html || '<div class="text-muted">Nessuna squadra trovata.</div>'}</div>`;
            }

            async function apriRiepilogo() {
                try {
                    riepilogoLoading.style.display = 'block';
                    riepilogoContainer.innerHTML = '';
                    const res = await fetch(`/utente/riepilogo?lega=${legaAlias}&nick=${encodeURIComponent(nickname)}`);
                    if (!res.ok) { riepilogoContainer.innerHTML = '<div class="text-danger">Errore nel caricamento del riepilogo.</div>'; return; }
                    const data = await res.json();
                    riepilogoContainer.innerHTML = renderAccordionSquadre(data);
                } catch (e) {
                    console.error(e);
                    riepilogoContainer.innerHTML = '<div class="text-danger">Errore inatteso.</div>';
                } finally {
                    riepilogoLoading.style.display = 'none';
                }
            }

            document.getElementById('btnRiepilogo').addEventListener('click', () => {
                const modal = bootstrap.Modal.getOrCreateInstance(modalEl);
                modal.show();
                apriRiepilogo();
            });

            /* =======================
               SUGGERIMENTO
            ======================= */
            const inputRicerca = document.getElementById('input-ricerca-giocatore');
            const risultatiRicercaDiv = document.getElementById('risultati-ricerca');

            inputRicerca.addEventListener('input', () => {
                const testo = inputRicerca.value.toLowerCase();
                risultatiRicercaDiv.innerHTML = '';
                if (testo.length < 2) return;
                const filtrati = listoneCompleto.filter(g => g.nome.toLowerCase().includes(testo));
                filtrati.slice(0, 10).forEach(g => {
                    const itemDiv = document.createElement('div');
                    itemDiv.className = 'risultato-item';
                    const spanInfo = document.createElement('span');
                    spanInfo.textContent = `${g.nome} (${g.ruolo} - ${g.squadra})`;
                    const suggestButton = document.createElement('button');
                    suggestButton.className = 'btn btn-sm btn-info';
                    suggestButton.textContent = 'Suggerisci';
                    suggestButton.addEventListener('click', () => suggerisciGiocatore(g));
                    itemDiv.appendChild(spanInfo);
                    itemDiv.appendChild(suggestButton);
                    risultatiRicercaDiv.appendChild(itemDiv);
                });
            });

            function suggerisciGiocatore(giocatore) {
                connection.invoke("SuggerisciGiocatore", giocatore.id, nickname, legaAlias)
                    .then(() => {
                        mostraToastSuggerimento(giocatore);
                        inputRicerca.value = '';
                        risultatiRicercaDiv.innerHTML = '';
                    })
                    .catch(err => console.error("Errore nell'invio del suggerimento:", err));
            }

            function mostraToastSuggerimento(giocatore) {
                const el = document.getElementById('toast-suggerimento');
                const logo = document.getElementById('toast-logo');
                const nome = document.getElementById('toast-nome');
                const dettagli = document.getElementById('toast-dettagli');

                const teamSlug = (giocatore.squadra || '').toLowerCase().replace(/\s+/g, '-');
                const logoUrl = `https://content.fantacalcio.it/web/img/team/${teamSlug}.png`;
                logo.style.display = 'block';
                logo.src = logoUrl;
                logo.onerror = () => { logo.style.display = 'none'; };

                nome.textContent = giocatore.nome || '';
                dettagli.textContent = `${giocatore.ruolo || ''} - ${giocatore.squadra || ''}`;

                el.classList.add('show');
                const hide = () => el.classList.remove('show');
                const closeBtn = el.querySelector('.toast-close');
                if (closeBtn) closeBtn.onclick = hide;
                setTimeout(hide, 4000);
            }

            /* =======================
               SIGNALR
            ======================= */
            connection.on("MostraGiocatoreInAsta", (giocatore) => {
                const logoImg = document.getElementById("logo-giocatore-in-asta");
                idListoneAttuale = giocatore.id;
                ruoloGiocatoreAttuale = giocatore.ruolo;
                document.getElementById("giocatore").textContent = `${giocatore.nome} (${giocatore.ruolo} - ${giocatore.squadraReale})`;
                if (giocatore.logoUrl) { logoImg.src = giocatore.logoUrl; logoImg.style.display = 'block'; }
                else { logoImg.style.display = 'none'; }
                document.getElementById("offerente").textContent = "NESSUNO";
                document.getElementById("offerta").textContent = "0";
                offertaAttuale = 0;
                fineUtcCorrente = null;
                aggiornaStatoPulsantiBazzer();
                aggiornaCountdownDaFineUtc();
            });

            connection.on("AggiornaOfferta", (offerente, offerta, fineUtc) => {
                document.getElementById("offerente").textContent = offerente || "-";
                document.getElementById("offerta").textContent = offerta || 0;
                offertaAttuale = offerta || 0;
                fineUtcCorrente = fineUtc || null;
                aggiornaCountdownDaFineUtc();
            });

            connection.on("AstaTerminata", (giocatoreId, nomeGiocatore, nomeOfferente, offerta) => {
                if (typeof mostraMessaggio === 'function') {
                    mostraMessaggio('Asta Conclusa!', `Giocatore ${nomeGiocatore} aggiudicato da ${nomeOfferente} per ${offerta} crediti!`);
                } else {
                    alert(`Asta Conclusa! Giocatore ${nomeGiocatore} aggiudicato da ${nomeOfferente} per ${offerta} crediti!`);
                }
                idListoneAttuale = 0;
                ruoloGiocatoreAttuale = "";
                document.getElementById("giocatore").textContent = "Nessun giocatore";
                document.getElementById("logo-giocatore-in-asta").style.display = 'none';
                document.getElementById("offerente").textContent = "-";
                document.getElementById("offerta").textContent = "0";
                fineUtcCorrente = null;
                aggiornaStatoPulsantiBazzer();
                aggiornaCountdownDaFineUtc();
                aggiornaCrediti();
                caricaListone();
            });

            connection.on("AstaAnnullata", () => {
                if (typeof mostraMessaggio === 'function') {
                    mostraMessaggio("Asta Annullata", "L'amministratore ha annullato l'asta corrente.");
                } else {
                    alert("Asta Annullata", "L'amministratore ha annullato l'asta corrente.");
                }
                idListoneAttuale = 0;
                ruoloGiocatoreAttuale = "";
                document.getElementById("giocatore").textContent = "Nessun giocatore";
                document.getElementById("logo-giocatore-in-asta").style.display = 'none';
                document.getElementById("offerente").textContent = "-";
                document.getElementById("offerta").textContent = "0";
                fineUtcCorrente = null;
                aggiornaStatoPulsantiBazzer();
                aggiornaCountdownDaFineUtc();
            });

            connection.on("AggiornaUtente", () => {
                aggiornaCrediti();
                caricaListone();
            });

            connection.on("AggiornaDurataTimer", (nuoviSecondi) => { timerSecondi = nuoviSecondi; });

            connection.on("AggiornaRegoleLega", (regole) => {
                maxPortieri = regole.maxPortieri;
                maxDifensori = regole.maxDifensori;
                maxCentrocampisti = regole.maxCentrocampisti;
                maxAttaccanti = regole.maxAttaccanti;
                aggiornaStatoPulsantiBazzer();
            });

            /* =======================
               CLICK OFFERTE
            ======================= */
            document.querySelectorAll(".bazzer").forEach(btn => {
                btn.addEventListener("click", async () => {
                    const incremento = parseInt(btn.dataset.incremento);
                    const snapshot = offertaAttuale;
                    const nuovaOfferta = snapshot + incremento;
                    const puntataMassima = parseInt(document.getElementById('puntata-bottom').textContent);
                    if (nuovaOfferta > puntataMassima) {
                        if (typeof mostraMessaggio === 'function') {
                            mostraMessaggio("Offerta non valida", "Non hai abbastanza crediti per fare questa offerta! La tua puntata massima è " + puntataMassima);
                        } else {
                            alert("Offerta non valida", "Non hai abbastanza crediti per fare questa offerta! La tua puntata massima è " + puntataMassima);
                        }
                        return;
                    }
                    await connection.invoke("InviaOfferta", nickname, nuovaOfferta, snapshot);
                });
            });

            document.getElementById("btnOffertaPersonalizzata").addEventListener("click", async () => {
                const inputOfferta = document.getElementById('offertaPersonalizzataInput');
                const offertaInserita = parseInt(inputOfferta.value);
                if (isNaN(offertaInserita) || offertaInserita <= 0) {
                    if (typeof mostraMessaggio === 'function') { mostraMessaggio("Errore", "Per favore, inserisci un valore numerico valido."); }
                    else { alert("Errore", "Per favore, inserisci un valore numerico valido."); }
                    return;
                }
                if (offertaInserita <= offertaAttuale) {
                    if (typeof mostraMessaggio === 'function') { mostraMessaggio("Offerta non valida", "La tua offerta deve essere superiore a quella attuale!"); }
                    else { alert("Offerta non valida", "La tua offerta deve essere superiore a quella attuale!"); }
                    return;
                }
                const puntataMassima = parseInt(document.getElementById('puntata-bottom').textContent);
                if (offertaInserita > puntataMassima) {
                    if (typeof mostraMessaggio === 'function') {
                        mostraMessaggio("Offerta non valida", "La tua offerta supera la tua puntata massima disponibile! (" + puntataMassima + ")");
                    } else {
                        alert("Offerta non valida", "La tua offerta supera la tua puntata massima disponibile! (" + puntataMassima + ")");
                    }
                    return;
                }
                const snapshot = offertaAttuale;
                await connection.invoke("InviaOfferta", nickname, offertaInserita, snapshot);
                inputOfferta.value = "";
            });

            /* =======================
               AVVIO
            ======================= */
            connection.start().then(() => {
                connection.invoke("RichiediStatoAttuale");
                aggiornaStatoPulsantiBazzer();
                caricaListone();
            }).catch(err => console.error("Errore connessione SignalR:", err));
        });
    </script>
}
