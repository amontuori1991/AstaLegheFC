@using AstaLegheFC.Models
@model AstaLegheFC.Models.UtenteViewModel

@{
    ViewData["Title"] = "Asta - Utente";
    Layout = "~/Views/Shared/_LayoutAsta.cshtml";
    var appLogoUrl = Url.Content(ViewBag.AppLogoUrl as string ?? "~/png/logo_bazzer.png");
}

<style>
    .card-header h5, .card-header p {
        margin-bottom: 0;
    }

    .display-1 {
        line-height: 1;
    }

    #offerta.display-1 {
        margin: 0;
        line-height: 0.9;
    }

    #offerente {
        margin-top: .15rem;
        margin-bottom: 0;
        line-height: 1.1;
    }

    #label-da {
        display: block;
        margin: .10rem 0 0;
        font-size: .9rem;
        opacity: .7;
    }

    #risultati-ricerca {
        max-height: 200px;
        overflow-y: auto;
        border: 1px solid #34495e;
        border-radius: 5px;
        padding: 5px;
        background-color: #2c3e50;
    }

    .risultato-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px;
        border-bottom: 1px solid #34495e;
    }

        .risultato-item:last-child {
            border-bottom: none;
        }

    #offertaPersonalizzataInput, #input-ricerca-giocatore {
        font-size: 16px;
    }

    /* la header diventa una barra flessibile con il titolo centrato */
    .card-header {
        position: relative;
        display: flex;
        align-items: center; /* centra verticalmente */
        justify-content: center; /* il nome resta centrato */
    }

    /* “Rose” a destra, centrato verticalmente sulla barra */
    .header-actions {
        position: absolute;
        right: .5rem;
        top: 50%;
        transform: translateY(-50%);
        display: flex;
        gap: .5rem;
    }

    /* === Toast Suggerimento – layout “hero” === */
    .toast-sug {
        position: fixed !important;
        top: 50% !important;
        left: 50% !important;
        transform: translate(-50%, -50%) scale(.98) !important;
        z-index: 3001;
        width: min(92%, 420px);
        /* Grid: riga 1 = contenuto, riga 2 = progress bar (3px) */
        display: grid;
        grid-template-rows: auto 3px;
        gap: 10px;
        padding: 14px 16px;
        border-radius: 16px;
        border: 1px solid #334155;
        background: linear-gradient(180deg,#0b1320,#0a1220);
        color: #e5e7eb;
        box-shadow: 0 12px 34px rgba(0,0,0,.45);
        overflow: hidden;
        opacity: 0;
        pointer-events: none;
        transition: opacity .18s ease, transform .18s ease;
    }

        .toast-sug.show {
            opacity: 1;
            transform: translate(-50%, -50%) scale(1) !important;
            pointer-events: auto;
        }

        .toast-sug .toast-close {
            position: absolute;
            top: 8px;
            right: 10px;
            background: transparent;
            border: 0;
            color: #fff;
            font-size: 18px;
            line-height: 1;
            cursor: pointer;
            padding: 0;
        }

    /* Blocco centrale con logo + testi */
    .ts-hero {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        gap: 8px;
    }

    #toast-logo {
        width: 64px;
        height: 64px;
        object-fit: contain;
        flex-shrink: 0;
        filter: drop-shadow(0 2px 6px rgba(0,0,0,.35));
    }

    .ts-player-name {
        font-weight: 800;
        font-size: 1.25rem;
        letter-spacing: .4px;
        text-transform: uppercase;
        line-height: 1.1;
    }

    .ts-player-sub {
        font-size: .95rem;
        color: #aab3bd;
        line-height: 1.1;
    }

    .ts-ok {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
        font-weight: 700;
        color: #2ecc71;
        margin-top: 2px;
    }

    /* La progress bar è la seconda riga della grid: niente absolute */
    .ts-progress {
        height: 3px;
        background: transparent;
        border-radius: 0;
    }

        .ts-progress span {
            display: block;
            height: 3px;
            width: 100%;
            background: #2ecc71;
            opacity: .9;
            animation: ts-progress 2200ms linear forwards;
        }
    @@keyframes ts-progress {
        from

    {
        width: 100%
    }

    to {
        width: 0%
    }

    }

    /* Mobile: logo un filo più piccolo */
    @@media (max-width:576px) {
        #toast-logo

    {
        width: 56px;
        height: 56px;
    }

    .ts-player-name {
        font-size: 1.15rem;
    }

    }



    /* Barra crediti */
    #crediti-bar {
        position: fixed;
        left: 0;
        right: 0;
        bottom: env(safe-area-inset-bottom, 0px);
        display: flex;
        justify-content: center;
        gap: 18px;
        align-items: center;
        background: #2c3e50;
        border-top: 1px solid #34495e;
        padding: 10px 14px calc(10px + env(safe-area-inset-bottom, 0px));
        box-shadow: 0 -6px 16px rgba(0,0,0,0.35);
        z-index: 1900;
    }

        #crediti-bar .chip {
            background: #1a2533;
            border: 1px solid #34495e;
            color: #fff;
            border-radius: 999px;
            padding: 6px 10px;
            font-weight: 600;
            font-size: .95rem;
        }

    .spacer-crediti {
        height: calc(64px + env(safe-area-inset-bottom, 0px));
    }

    /* Modal/Accordion dark */
    .modal-content {
        background-color: #2c3e50;
        color: #ecf0f1;
        border: 1px solid #34495e;
    }

    .modal-header, .modal-footer {
        border-color: #34495e;
    }

    .accordion-dark .accordion-item {
        background-color: #2c3e50;
        border: 1px solid #34495e;
    }

    .accordion-dark .accordion-button {
        background-color: #233041;
        color: #ecf0f1;
        border-bottom: 1px solid #34495e;
    }

        .accordion-dark .accordion-button:not(.collapsed) {
            color: #fff;
            background-color: #1f2a39;
            box-shadow: inset 0 -1px 0 #34495e;
        }

    .accordion-dark .accordion-body {
        background-color: #2c3e50;
    }

    .team-chip {
        font-weight: 700;
        color: #5dade2;
    }

    .my-team {
        outline: 2px solid #5dade2;
        border-radius: .5rem;
    }

    .role-col {
        min-width: 220px;
    }

    .role-title {
        font-weight: 700;
        color: #a9cce3;
        margin-bottom: .25rem;
    }

    .pl-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 8px;
        padding: 4px 0;
        border-bottom: 1px dashed #34495e;
    }

    .pl-left {
        display: flex;
        align-items: center;
        gap: 8px;
        min-width: 0;
    }

    .pl-logo {
        width: 20px;
        height: 20px;
        object-fit: contain;
    }

    .pl-name {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 180px;
    }

    .pl-cred {
        font-size: .85rem;
        opacity: .9;
    }

    .pl-role {
        margin-left: 6px;
        font-style: italic;
        font-size: .85em;
        color: #0dcaf0;
        white-space: nowrap;
    }

    .modal-open #crediti-bar {
        display: none;
    }

    #modalRiepilogo .modal-content {
        padding-bottom: env(safe-area-inset-bottom, 0px);
    }

    /* Overlay Pausa (base) */
    #pausa-overlay {
        position: fixed;
        inset: 0;
        background: rgba(0,0,0,.8);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 2000;
        text-align: center;
        color: #fff;
        padding: 20px;
    }

        #pausa-overlay.visible {
            display: flex;
        }

    #pausa-box {
        background: linear-gradient(145deg,#34495e,#2c3e50);
        border: 1px solid #3498db;
        border-radius: 14px;
        padding: 24px 20px;
        max-width: 520px;
        width: 92%;
        box-shadow: 0 10px 30px rgba(0,0,0,.6);
    }

        #pausa-box h3 {
            margin: 0 0 .5rem 0;
            color: #f1c40f;
        }

        #pausa-box p {
            margin: 0;
        }

    #pausa-remaining {
        font-weight: 700;
    }

    /* Overlay Reconnect */
    #reconnect-overlay {
        position: fixed;
        inset: 0;
        background: rgba(0,0,0,.75);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 2100;
        text-align: center;
        color: #fff;
        padding: 20px;
    }

        #reconnect-overlay.visible {
            display: flex;
        }

    #reconnect-box {
        background: linear-gradient(145deg,#2b3a4b,#1e2a38);
        border: 1px solid #5dade2;
        border-radius: 14px;
        padding: 20px 18px;
        width: 92%;
        max-width: 460px;
        box-shadow: 0 10px 30px rgba(0,0,0,.6);
    }

        #reconnect-box h4 {
            margin: 0 0 .25rem 0;
            color: #5dade2;
        }

        #reconnect-box p {
            margin: 0;
        }

    #reconnect-attempt {
        font-weight: 700;
    }

    /* Mobile tweaks */
    @@media (max-width:576px) {
        h2 #giocatore {
            font-size: 1.05rem;
            line-height: 1.2;
        }

        #offerente {
            font-size: 1rem;
        }

        #offerta.display-1 {
            font-size: 2.75rem;
        }

        .card .card-body {
            padding: .75rem .75rem;
        }

        .card .card-header, .card .card-footer {
            padding: .5rem .75rem;
        }

        .pulsanti-offerta-container {
            gap: .35rem;
        }

            .pulsanti-offerta-container .btn {
                padding: .35rem .25rem;
                font-size: .9rem;
                flex: 0 0 calc(33.333% - .35rem);
            }

        #offertaPersonalizzataInput {
            font-size: .95rem;
        }

        #btnOffertaPersonalizzata {
            padding: .45rem .65rem;
        }

        .role-col {
            min-width: 100%;
        }

        .pl-name {
            max-width: 60vw;
        }
    }

    :root {
        --safe-top: env(safe-area-inset-top, 0px);
        --safe-bottom: env(safe-area-inset-bottom, 0px);
    }

    .modal {
        z-index: 2050;
    }

    .modal-backdrop {
        z-index: 2000;
    }

    .modal-dialog {
        margin-top: calc(var(--safe-top) + 16px) !important;
        margin-bottom: calc(var(--safe-bottom) + 84px) !important;
    }

    body {
        padding-top: 0 !important;
    }

    .card-header {
        padding-top: max(.5rem, env(safe-area-inset-top, 0px));
    }

    .modal-dialog {
        margin-top: calc(10px + env(safe-area-inset-top, 0px)) !important;
        margin-bottom: calc(10px + env(safe-area-inset-bottom, 0px) + 64px) !important;
    }

    .modal-body {
        max-height: calc(100vh - env(safe-area-inset-top, 0px) - env(safe-area-inset-bottom, 0px) - 140px);
        overflow: auto;
    }

    #crediti-bar {
        bottom: env(safe-area-inset-bottom, 0px);
        padding-bottom: calc(10px + env(safe-area-inset-bottom, 0px));
    }

    .spacer-crediti {
        height: calc(64px + env(safe-area-inset-bottom, 0px));
    }

    .badge-myteam {
        margin-left: auto;
        margin-right: auto;
    }

    .badge-credits, .badge-max {
        display: inline-block;
        min-width: 45px;
        text-align: right;
    }

    .role-counts {
        display: inline-flex;
        gap: 8px;
        font-size: 0.85rem;
        color: #aaa;
    }

        .role-counts .rc {
            display: inline-block;
            min-width: 40px;
        }

        .role-counts .num {
            display: inline-block;
            min-width: 16px;
            text-align: right;
            font-weight: 600;
            color: #fff;
        }

    .header-grid {
        display: grid;
        grid-template-columns: var(--left-block) 1fr var(--right-block);
        align-items: center;
        width: 100%;
        gap: 8px;
    }

    .hg-left {
        display: grid;
        grid-template-columns: var(--nick-width) 1fr;
        align-items: center;
        gap: 12px;
    }

    .nick-clip {
        display: inline-block;
        max-width: var(--nick-width);
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .role-grid {
        display: grid;
        grid-template-columns: repeat(4, var(--role-col));
        column-gap: 10px;
        font-size: 0.95rem;
        color: #bfc7cf;
    }

        .role-grid .rg {
            display: flex;
            justify-content: space-between;
        }

        .role-grid .num {
            display: inline-block;
            min-width: 18px;
            text-align: right;
            font-weight: 700;
            color: #fff;
        }

    .role-badge {
        display: inline-block;
        padding: 0 8px;
        min-width: 22px;
        height: 22px;
        line-height: 22px;
        text-align: center;
        font-weight: 800;
        border-radius: 6px;
        color: #fff;
        margin-right: 6px;
        font-size: .9rem;
    }

    .role-P {
        background: #d9822b;
    }

    .role-D {
        background: #2da44e;
    }

    .role-C {
        background: #2563eb;
    }

    .role-A {
        background: #c0353a;
    }

    .role-grid .rg {
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .role-grid .lbl {
        display: inline-flex;
        align-items: center;
    }

    .pl-role .role-badge {
        margin-left: 6px;
        transform: translateY(-1px);
    }

    .hg-center {
        text-align: center;
    }

    .hg-right {
        display: flex;
        justify-content: flex-end;
        gap: 8px;
    }

    .badge-credits, .badge-max {
        display: inline-block;
        min-width: 45px;
        text-align: right;
    }

    :root {
        --nick-width: 140px;
        --role-col: 56px;
        --left-block: 420px;
        --right-block: 220px;
    }

    @@media (max-width: 576px) {
        .header-grid {
            display: flex;
            flex-direction: column;
            row-gap: 6px;
            width: 100%;
        }

        .hg-left {
            display: flex;
            flex-direction: column;
            gap: 6px;
        }

        .nick-clip {
            max-width: 100%;
        }

        .role-grid {
            display: flex;
            flex-wrap: wrap;
            gap: 8px 14px;
            font-size: 0.95rem;
        }

            .role-grid .rg {
                display: inline-flex;
                align-items: center;
                gap: 4px;
                line-height: 1.2;
            }

            .role-grid .lbl {
                margin-right: 0;
            }

            .role-grid .num {
                min-width: 0;
                width: auto;
                text-align: left;
            }

        .hg-center {
            text-align: center;
            order: 2;
        }

        .hg-right {
            order: 3;
            display: flex;
            justify-content: center;
            gap: 6px;
            flex-wrap: wrap;
            width: 100%;
        }

        .badge-credits, .badge-max {
            min-width: 42px;
            text-align: center;
        }

        .accordion-button {
            padding: .5rem .75rem;
        }
    }

    /* === Quick bid buttons === */
    .pulsanti-offerta-container .bazzer {
        --c1: #64748b;
        --c2: #475569;
        --ring: #93c5fd;
        --shadow: rgba(0,0,0,.35);
        border: 0 !important;
        color: #fff !important;
        background: linear-gradient(180deg,var(--c1),var(--c2)) !important;
        box-shadow: 0 8px 18px var(--shadow), inset 0 1px 0 rgba(255,255,255,.08), inset 0 -1px 0 rgba(0,0,0,.25);
        border-radius: 12px;
        padding: .6rem .5rem;
        font-weight: 800;
        letter-spacing: .2px;
        transform: translateY(0);
        transition: transform .06s ease, box-shadow .12s ease, filter .12s ease, opacity .12s ease;
        backdrop-filter: saturate(120%);
    }

        .pulsanti-offerta-container .bazzer:hover:not(:disabled) {
            filter: brightness(1.06);
            box-shadow: 0 10px 22px var(--shadow), inset 0 1px 0 rgba(255,255,255,.10), inset 0 -1px 0 rgba(0,0,0,.25);
        }

        .pulsanti-offerta-container .bazzer:active:not(:disabled) {
            transform: translateY(1px);
            box-shadow: 0 6px 12px var(--shadow), inset 0 2px 6px rgba(0,0,0,.25);
        }

        .pulsanti-offerta-container .bazzer:focus-visible {
            outline: 2px solid var(--ring);
            outline-offset: 2px;
        }

        .pulsanti-offerta-container .bazzer:disabled {
            opacity: .45;
            filter: grayscale(.25);
            box-shadow: none;
            cursor: not-allowed;
        }

        .pulsanti-offerta-container .bazzer[data-incremento="1"],
        .pulsanti-offerta-container .bazzer[data-incremento="2"],
        .pulsanti-offerta-container .bazzer[data-incremento="3"],
        .pulsanti-offerta-container .bazzer[data-incremento="4"],
        .pulsanti-offerta-container .bazzer[data-incremento="5"] {
            --c1: #06b6d4;
            --c2: #0891b2;
            --ring: #67e8f9;
        }

        .pulsanti-offerta-container .bazzer[data-incremento="10"],
        .pulsanti-offerta-container .bazzer[data-incremento="15"],
        .pulsanti-offerta-container .bazzer[data-incremento="20"] {
            --c1: #a855f7;
            --c2: #7c3aed;
            --ring: #c4b5fd;
        }

        .pulsanti-offerta-container .bazzer[data-incremento="25"],
        .pulsanti-offerta-container .bazzer[data-incremento="30"] {
            --c1: #f59e0b;
            --c2: #d97706;
            --ring: #fde68a;
        }

        .pulsanti-offerta-container .bazzer[data-incremento="40"],
        .pulsanti-offerta-container .bazzer[data-incremento="50"] {
            --c1: #ef4444;
            --c2: #b91c1c;
            --ring: #fecaca;
        }

    @@media (max-width:576px) {
        .pulsanti-offerta-container .bazzer {
            border-radius: 10px;
            padding: .5rem .4rem;
            font-size: .95rem;
        }
    }

    /* === OFFERTA ATTUALE — compatta, altezza = contenuto === */
    /* OFFERTA ATTUALE — contenuto centrato, watermark sempre intero */
    .offerta-panel {
        --offerta-bg: none; /* settata via JS */
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 12px 16px; /* niente padding-left speciale */
        border: 1px solid #334353;
        border-radius: 14px;
        overflow: hidden;
        background: radial-gradient(120% 120% at 50% 30%, #1f2a39 0%, #1b2431 60%, #16202c 100%);
    }

        /* stemma centrato e RIDOTTO: altezza vincolata -> non si taglia mai */
        .offerta-panel::before {
            content: "";
            position: absolute;
            inset: 0;
            background-image: var(--offerta-bg);
            background-repeat: no-repeat;
            background-position: center;
            /* adatta alla *altezza* del box, ma più piccolo del 100% */
            background-size: auto clamp(95px, 58%, 150px); /* height: 58% (min 95px, max 150px) */
            opacity: .12;
            filter: saturate(115%) blur(.15px);
            pointer-events: none;
        }

        /* leggero velo scuro per contrasto */
        .offerta-panel::after {
            content: "";
            position: absolute;
            inset: 0;
            background: linear-gradient(180deg, rgba(0,0,0,.10), rgba(0,0,0,.25));
            pointer-events: none;
        }

    /* contenuto centrato; niente “riquadro” interno */
    .offerta-content {
        position: relative;
        z-index: 1;
        text-align: center;
        margin: 0;
        padding: 0;
        background: transparent;
        border: 0;
        backdrop-filter: none;
    }

        /* un filo di aria sopra/sotto il testo */
        .offerta-content .card-title {
            margin-top: .45rem;
        }

    #offerente {
        margin-bottom: .45rem;
    }

    /* mobile: stemma un pelo più piccolo ancora */
    @@media (max-width:576px) {
        .offerta-panel::before

    {
        background-size: auto clamp(80px, 52%, 130px);
    }

    }


    /* Modale base stile admin */
    .modal-base {
        position: relative;
        overflow: hidden;
        border: 1px solid #334155;
        border-radius: 16px;
        background: linear-gradient(180deg,#0b1320,#0a1220);
        color: #e5e7eb;
        box-shadow: 0 12px 34px rgba(0,0,0,.45);
    }

        .modal-base .modal-header {
            border: 0;
            background: radial-gradient(1200px 420px at -15% -60%, rgba(59,130,246,.22), transparent 60%);
        }

        .modal-base .btn-close {
            filter: invert(1) contrast(1.2);
            opacity: .75;
        }

    .modal-squad-bg {
        position: absolute;
        inset: 0;
        background-repeat: no-repeat;
        background-position: center;
        background-size: 360px;
        opacity: .06;
        filter: grayscale(100%);
        pointer-events: none;
        z-index: 0;
    }

    .modal-base .modal-header, .modal-base .modal-body, .modal-base .modal-footer {
        position: relative;
        z-index: 1;
    }

    /* Overlay Pausa (stile modal-base) */
    #pausa-overlay {
        position: fixed;
        inset: 0;
        display: none;
        align-items: center;
        justify-content: center;
        background: rgba(0,0,0,.85);
        z-index: 2000;
        color: #fff;
        text-align: center;
        padding: 20px;
    }

        #pausa-overlay.visible {
            display: flex;
        }

    #pausa-box.modal-base {
        position: relative;
        overflow: hidden;
        width: min(92%,560px);
        border: 1px solid #334155;
        border-radius: 16px;
        background: linear-gradient(180deg,#0b1320,#0a1220);
        color: #e5e7eb;
        box-shadow: 0 12px 34px rgba(0,0,0,.45);
    }

    #pausa-box .modal-header, #pausa-box .modal-body {
        position: relative;
        z-index: 1;
    }

    #pausa-box .modal-header {
        display: flex;
        align-items: center;
        gap: 10px;
        justify-content: center;
        padding: 12px 16px;
        border-bottom: 1px solid #334155;
        background: radial-gradient(1200px 420px at -15% -60%, rgba(59,130,246,.22), transparent 60%);
    }

    #pausa-box .modal-title {
        display: flex;
        align-items: center;
        gap: 10px;
        font-weight: 800;
        color: #ecf0f1;
        margin: 0;
    }

    #pausa-box .modal-body {
        padding: 16px;
    }

    #bg-pausa.modal-squad-bg {
        position: absolute;
        inset: 0;
        background-repeat: no-repeat;
        background-position: center;
        background-size: 340px;
        opacity: .08;
        filter: grayscale(100%);
        pointer-events: none;
        z-index: 0;
    }

    /* === BUZZER BUTTON === */
    .btn-buzzer {
        position: relative;
        width: 220px;
        height: 220px;
        border-radius: 50%;
        border: 0;
        outline: 0;
        background: radial-gradient(circle at 30% 30%, #ef4444, #b91c1c);
        box-shadow: 0 14px 28px rgba(0,0,0,.35), inset 0 -8px 18px rgba(0,0,0,.3);
        display: inline-flex;
        align-items: center;
        justify-content: center;
        color: #fff;
        font-weight: 900;
        letter-spacing: .5px;
        text-transform: uppercase;
        transition: transform .06s ease, filter .12s ease;
    }

        .btn-buzzer:active {
            transform: translateY(2px);
        }

    .buzzer-ring {
        position: absolute;
        inset: 14px;
        border-radius: 50%;
        background: rgba(255,255,255,.08);
        box-shadow: inset 0 6px 18px rgba(0,0,0,.35);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .buzzer-logo {
        width: 150px; /* scegli il valore che vuoi: 80/90/100… */
        height: 150px;
        object-fit: contain;
        filter: drop-shadow(0 6px 14px rgba(0,0,0,.45));
    }


    .buzzer-text {
        position: absolute;
        bottom: 16px;
        font-size: 1.1rem;
        text-shadow: 0 2px 8px rgba(0,0,0,.5);
    }
    /* Evidenziazione offerente in modalità Buzzer */
    .offerente-buzzer {
        font-size: clamp(2rem, 8vw, 3rem) !important;
        font-weight: 900 !important;
        color: #2ecc71 !important;
        text-transform: uppercase;
        text-shadow: 0 2px 10px rgba(0,0,0,.35);
    }

    #label-offerente-buzzer {
        text-transform: uppercase;
        font-weight: 800;
        opacity: .85;
    }

</style>

<div class="row mt-md-4">
    <div class="col-md-7 col-lg-8 mb-3 mb-md-0">
        <div class="card text-center shadow-lg h-100">
            <div class="card-header bg-dark text-white">
                <div class="header-actions">
                    <button id="btnRiepilogo" class="btn btn-outline-info btn-sm">Rose</button>
                </div>
                <div id="giocatore-info" class="d-flex justify-content-center align-items-center gap-3">
                    <img id="logo-giocatore-in-asta" src="@Model.LogoSquadra" alt="Logo"
                         style="height:40px; display:@(string.IsNullOrEmpty(Model.LogoSquadra) ? "none" : "block");" />
                    <h2 id="giocatore" class="mb-0">
                        @if (Model.CalciatoreInAsta != null && !string.IsNullOrEmpty(Model.CalciatoreInAsta.Nome))
                        {
                            @($"{Model.CalciatoreInAsta.Nome} ({Model.CalciatoreInAsta.Ruolo} - {Model.CalciatoreInAsta.Squadra})")
                        }
                        else
                        {
                            <text>Nessun giocatore</text>
                        }
                    </h2>
                </div>
            </div>

            <div class="card-body p-0">
                <div class="offerta-panel" id="offertaPanel">
                    <div class="offerta-content">
                        <h5 class="card-title text-muted mb-1">Offerta Attuale</h5>
                        <p id="offerta" class="display-1 fw-bold text-warning mb-0">@Model.OffertaAttuale</p>
                        <small id="label-da" class="text-muted">da</small>
                        <h6 id="label-offerente-buzzer" class="text-muted mb-1" style="display:none; letter-spacing:.3px;">ATTUALE OFFERENTE</h6>
                        <h3 id="offerente" class="text-info mb-0">@Model.OfferenteAttuale</h3>
                    </div>
                </div>
            </div>

            <div class="card-footer bg-dark text-white">
                <span class="text-muted">Tempo Rimanente:</span>
                <strong id="timer" class="fs-4 ms-2">-</strong>
            </div>
        </div>
    </div>

    <div class="col-md-5 col-lg-4">
        <div class="card shadow mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Offri</h5>
                <span class="text-muted small">Rilanci rapidi</span>
            </div>
            <div class="card-body">
                <!-- UI CLASSICA (offerte) -->
                <div id="bidUi">
                    <div id="avviso-ruolo-completo" class="alert alert-danger" style="display:none;"></div>

                    <div class="pulsanti-offerta-container d-flex flex-wrap gap-2">
                        @foreach (var incremento in new[] { 1, 2, 3, 4, 5, 10, 15, 20, 25, 30, 40, 50 })
                        {
                            <button class="bazzer btn btn-outline-primary flex-grow-1" data-incremento="@incremento" disabled>+@incremento</button>
                        }
                    </div>
                    <hr />
                    <div class="input-group mt-3">
                        <span class="input-group-text" id="basic-addon1">Off. Pers.</span>
                        <input type="number" id="offertaPersonalizzataInput" class="form-control" placeholder="Valore" aria-label="Offerta personalizzata" min="1" disabled>
                        <button id="btnOffertaPersonalizzata" class="btn btn-success" disabled>Offri</button>
                    </div>
                </div>

                <!-- UI BUZZER (mostrata solo in modalità buzzer) -->
                <div id="buzzerClientArea" class="d-none text-center my-3">
                    <button id="btnClientBuzzer" type="button" class="btn btn-lg btn-buzzer">
                        <span class="buzzer-ring">
                            <img src="@appLogoUrl" alt="Logo" class="buzzer-logo" />
                        </span>
                        <span class="buzzer-text">BUZZ!</span>
                    </button>
                    <div class="small text-muted mt-2">Premi per prenotare la parola</div>
                </div>
            </div>

        </div>

        <div class="card shadow">
            <div class="card-header"><h5 class="mb-0">Suggerisci un Giocatore</h5></div>
            <div class="card-body">
                <input type="text" id="input-ricerca-giocatore" class="form-control" placeholder="Cerca per nome..." />
                <div id="risultati-ricerca" class="mt-2"></div>
            </div>
        </div>
    </div>
</div>

<!-- Toast suggerimento -->
<div id="toast-suggerimento" class="toast-sug" role="status" aria-live="polite" aria-atomic="true">
    <button type="button" class="toast-close" aria-label="Chiudi">&times;</button>

    <div class="ts-hero">
        <img id="toast-logo" alt="Logo squadra" />
        <div class="ts-player">
            <div id="toast-nome" class="ts-player-name">-</div>
            <div id="toast-dettagli" class="ts-player-sub">-</div>
        </div>
    </div>

    <div class="ts-ok">✅ <span>Suggerimento inviato all’admin</span></div>

    <div class="ts-progress"><span id="toast-progress"></span></div>
</div>





<!-- Barra compatta crediti in basso -->
<div id="crediti-bar" aria-live="polite">
    <span class="chip">Disp.: <strong id="crediti-bottom">@Model.CreditiDisponibili</strong></span>
    <span class="chip">Max: <strong id="puntata-bottom">@Model.PuntataMassima</strong></span>
</div>
<div class="spacer-crediti"></div>

<!-- Modal riepilogo rose -->
<div class="modal fade" id="modalRiepilogo" tabindex="-1" aria-labelledby="modalRiepilogoLabel" aria-hidden="true">
    <div class="modal-dialog modal-fullscreen-sm-down modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalRiepilogoLabel">Riepilogo rose</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Chiudi"></button>
            </div>
            <div class="modal-body">
                <div id="riepilogo-loading" class="text-center my-3" style="display:none;">Caricamento…</div>
                <div id="riepilogoContainer" class="accordion accordion-dark"></div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Chiudi</button>
            </div>
        </div>
    </div>
</div>

<!-- Overlay Pausa -->
<div id="pausa-overlay" aria-live="polite">
    <div id="pausa-box" class="modal-base">
        <div class="modal-squad-bg" id="bg-pausa"></div>
        <div class="modal-header">
            <h5 class="modal-title">
                <img src="@appLogoUrl" style="width:22px;height:22px;object-fit:contain" alt="Logo">
                Asta in pausa
            </h5>
        </div>
        <div class="modal-body">
            <p class="mb-0">Attendi che l’amministratore riprenda l’asta.</p>
        </div>
    </div>
</div>

<!-- Overlay Reconnect -->
<div id="reconnect-overlay" aria-live="polite">
    <div id="reconnect-box">
        <h4>Connessione persa</h4>
        <p>Riconnessione in corso… tentativo <span id="reconnect-attempt">0</span></p>
        <p class="small text-muted mt-1">I comandi sono disabilitati finché la connessione non torna disponibile.</p>
    </div>
</div>

<!-- Modale Messaggi generici -->
<div class="modal fade" id="messaggioModale" tabindex="-1" aria-labelledby="messaggioModaleLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modal-base">
            <div class="modal-squad-bg" id="bg-msg-user" style="background-image:url('@appLogoUrl')"></div>

            <div class="modal-header">
                <h5 class="modal-title d-flex align-items-center gap-2" id="messaggioModaleLabel">
                    <img src="@appLogoUrl" alt="Logo" style="width:20px;height:20px;object-fit:contain" />
                    <span id="messaggioModaleTitolo">Info</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
            </div>

            <div class="modal-body">
                <p id="messaggioModaleCorpo" class="mb-0">-</p>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" id="messaggioModaleBtnAnnulla" style="display:none;">Annulla</button>
                <button type="button" class="btn btn-primary" id="messaggioModaleBtnOk">OK</button>
            </div>
        </div>
    </div>
</div>
<audio id="suono-offerta" src="~/sounds/coin.mp3" preload="auto"></audio>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script>
        const appLogoUrl = '@appLogoUrl'; // disponibile ovunque
        let lastPlayerLogoUrl = null;


        // Modale messaggi – stessa API dell’admin
        window.mostraMessaggio = function (titolo, corpo, conferma = false) {
          const mEl = document.getElementById('messaggioModale');
          if (!mEl) { alert(corpo || titolo || ''); return Promise.resolve(true); }
          const titleEl = document.getElementById('messaggioModaleTitolo');
          const bodyEl  = document.getElementById('messaggioModaleCorpo');
          let   btnOk   = document.getElementById('messaggioModaleBtnOk');
          let   btnAnn  = document.getElementById('messaggioModaleBtnAnnulla');

          titleEl.textContent = titolo || 'Info';
          bodyEl.textContent  = corpo  || '';
          btnAnn.style.display = conferma ? '' : 'none';

          const bs = bootstrap.Modal.getOrCreateInstance(mEl);
          // reset handlers
          btnOk.replaceWith(btnOk.cloneNode(true));
          btnAnn.replaceWith(btnAnn.cloneNode(true));
          btnOk  = document.getElementById('messaggioModaleBtnOk');
          btnAnn = document.getElementById('messaggioModaleBtnAnnulla');

          const bgMsg = document.getElementById('bg-msg-user');
          if (bgMsg) bgMsg.style.backgroundImage = `url('${appLogoUrl}')`;

          return new Promise((resolve) => {
            let decided = false;
            const cleanup = () => { mEl.removeEventListener('hidden.bs.modal', onHidden); };
            const onHidden = () => { if (!decided) { decided = true; resolve(false); } cleanup(); };
            const onOk  = () => { if (decided) return; decided = true; mEl.addEventListener('hidden.bs.modal', () => { resolve(true);  cleanup(); }, { once: true }); bs.hide(); };
            const onAnn = () => { if (decided) return; decided = true; mEl.addEventListener('hidden.bs.modal', () => { resolve(false); cleanup(); }, { once: true }); bs.hide(); };
            btnOk.addEventListener('click', onOk, { once:true });
            if (conferma) btnAnn.addEventListener('click', onAnn, { once:true });
            mEl.addEventListener('hidden.bs.modal', onHidden);
            bs.show();
          });
        };

        document.addEventListener('DOMContentLoaded', function () {

          // ===== Watermark helpers (UNICA versione) =====
          function teamSlug(name){ return (name||'').toLowerCase().replace(/\s+/g,'-'); }
          function getTeamLogo(squadra){ return squadra ? `https://content.fantacalcio.it/web/img/team/${teamSlug(squadra)}.png` : ''; }

          function setOffertaBg(url){
            const panel = document.getElementById('offertaPanel');
            if (panel) panel.style.setProperty('--offerta-bg', url ? `url('${url}')` : 'none');
          }
          function setPausaBg(url){
            const bg = document.getElementById('bg-pausa');
            if (bg) bg.style.backgroundImage = url ? `url('${url}')` : 'none';
          }
          (function initOffertaBg(){
            const headerLogo = (document.getElementById('logo-giocatore-in-asta')?.src || '').trim();
            setOffertaBg(headerLogo || appLogoUrl);
          })();

          // === Stato ===
          let listoneCompleto = [];
          const nickname = "@Model.Nickname";
          const legaAlias = new URLSearchParams(window.location.search).get('lega');
          let offertaAttuale = parseInt("@Model.OffertaAttuale") || 0;
          let idListoneAttuale = parseInt("@(Model.CalciatoreInAsta?.IdListone ?? 0)");
          let ruoloGiocatoreAttuale = "@(Model.CalciatoreInAsta?.Ruolo ?? "")";
          let timerSecondi = @Model.TimerAsta;
          let fineUtcCorrente = null;
          let lastFineUtcStr = null;
          let countdownTimerUtente = null;
          let finalizeGuard = false;

          let maxPortieri = @Model.MaxPortieri;
          let maxDifensori = @Model.MaxDifensori;
          let maxCentrocampisti = @Model.MaxCentrocampisti;
          let maxAttaccanti = @Model.MaxAttaccanti;
          let portieriAttuali = @Model.PortieriAcquistati;
          let difensoriAttuali = @Model.DifensoriAcquistati;
          let centrocampistiAttuali = @Model.CentrocampistiAcquistati;
          let attaccantiAttuali = @Model.AttaccantiAcquistati;

          let pausaAttivaClient = false;
          let pauseLockUntil = 0;

          let resumePollId = null;
          function startResumePolling(){
            if (resumePollId) return;
            resumePollId = setInterval(async () => { try{ await connection.invoke("RichiediStatoAttuale"); } catch{} }, 2000);
          }
          function stopResumePolling(){ if (resumePollId){ clearInterval(resumePollId); resumePollId = null; } }

          // === Reconnect ===
          let pingIntervalId = null;
          let manualReconnectTimer = null;
          let manualAttempts = 0;
          const MAX_AUTO_ATTEMPTS = 120;
          const reconnectOverlay = document.getElementById('reconnect-overlay');
          const reconnectAttemptEl = document.getElementById('reconnect-attempt');

          function showReconnectOverlay(attempt){ reconnectAttemptEl.textContent = attempt ?? 0; reconnectOverlay.classList.add('visible'); setBidControlsEnabled(false); stopCountdown(); }
          function hideReconnectOverlay(){ reconnectOverlay.classList.remove('visible'); aggiornaStatoPulsantiBazzer(); }

          const connection = new signalR.HubConnectionBuilder()
            .withUrl("/bazzerHub")
            .withAutomaticReconnect({ nextRetryDelayInMilliseconds: (ctx) => ctx.previousRetryCount < MAX_AUTO_ATTEMPTS ? 1000 : null })
            .build();
                    // === CLICK BUZZER (utente) ===
        document.getElementById('btnClientBuzzer')?.addEventListener('click', async ()=>{
          if (pausaAttivaClient){
            if (typeof mostraMessaggio === 'function') mostraMessaggio("Asta in pausa", "Non puoi buzzare durante la pausa.");
            return;
          }

          // SUONO MONETE (feedback immediato lato utente)
          try {
            const s = document.getElementById('suono-offerta');
            s.currentTime = 0;
            await s.play();
          } catch {}

          try {
            await connection.invoke('Buzz', legaAlias, nickname);
          } catch (e) {
            console.error(e);
          }
        });


          // ===== Utils =====
          function setPauseUI(isPaused){
            const overlay = document.getElementById('pausa-overlay');
            if (!overlay) return;
            if (isPaused) {
              overlay.classList.add('visible');
              setBidControlsEnabled(false);
              stopCountdown();
            } else {
              const hide = () => overlay.classList.remove('visible');
              hide(); setTimeout(hide, 0); setTimeout(hide, 150); setTimeout(hide, 400);
              aggiornaStatoPulsantiBazzer();
            }
          }
          function setBidControlsEnabled(enabled){
            document.querySelectorAll(".bazzer, #offertaPersonalizzataInput, #btnOffertaPersonalizzata")
              .forEach(el => el.disabled = !enabled);
          }

                  // === BUZZER UI ======================================================
        let buzzerModeOn = false;

        function setBuzzerUI(on){
          buzzerModeOn = !!on;

          const titleOff = document.querySelector('.offerta-content .card-title'); // "Offerta Attuale"
          const offVal   = document.getElementById('offerta');                     // valore numerico
          const labelDa  = document.getElementById('label-da');                    // "da"
          const buzLbl   = document.getElementById('label-offerente-buzzer');      // "ATTUALE OFFERENTE"
          const offName  = document.getElementById('offerente');                   // nome offerente

          if (buzzerModeOn){
            if (titleOff) titleOff.style.display = 'none';
            if (offVal)   offVal.style.display   = 'none';
            if (labelDa)  labelDa.style.display  = 'none';
            if (buzLbl)   buzLbl.style.display   = '';
            if (offName)  offName.classList.add('offerente-buzzer');
          } else {
            if (titleOff) titleOff.style.display = '';
            if (offVal)   offVal.style.display   = '';
            if (labelDa)  labelDa.style.display  = '';
            if (buzLbl)   buzLbl.style.display   = 'none';
            if (offName)  offName.classList.remove('offerente-buzzer');
          }
        }
        // ===================================================================

        let buzzerAttivoClient = false;
        function showBuzzerUI(on){
          buzzerAttivoClient = !!on;
          const bidUi  = document.getElementById('bidUi');
          const buzzer = document.getElementById('buzzerClientArea');
          if (buzzer) buzzer.classList.toggle('d-none', !on);
          if (bidUi)  bidUi.classList.toggle('d-none',  on);
          // in modalità buzzer, disabilito in ogni caso i controlli offerta classici
          setBidControlsEnabled(!on);
        }

          function aggiornaStatoPulsantiBazzer(){
            const hubState = connection.state;
            let abilitato = idListoneAttuale > 0 && !pausaAttivaClient && hubState === signalR.HubConnectionState.Connected;
            let messaggio = "";
            if (abilitato){
              if (ruoloGiocatoreAttuale === 'P' && portieriAttuali >= maxPortieri){ abilitato=false; messaggio=`Non puoi fare offerte, hai già raggiunto il numero massimo di portieri (${maxPortieri}).`; }
              else if (ruoloGiocatoreAttuale === 'D' && difensoriAttuali >= maxDifensori){ abilitato=false; messaggio=`Non puoi fare offerte, hai già raggiunto il numero massimo di difensori (${maxDifensori}).`; }
              else if (ruoloGiocatoreAttuale === 'C' && centrocampistiAttuali >= maxCentrocampisti){ abilitato=false; messaggio=`Non puoi fare offerte, hai già raggiunto il numero massimo di centrocampisti (${maxCentrocampisti}).`; }
              else if (ruoloGiocatoreAttuale === 'A' && attaccantiAttuali >= maxAttaccanti){ abilitato=false; messaggio=`Non puoi fare offerte, hai già raggiunto il numero massimo di attaccanti (${maxAttaccanti}).`; }
            }
            setBidControlsEnabled(abilitato);
            const avvisoDiv = document.getElementById('avviso-ruolo-completo');
            if (!abilitato && messaggio){ avvisoDiv.innerText = messaggio; avvisoDiv.style.display = 'block'; }
            else { avvisoDiv.style.display = 'none'; }
            // Niente setOffertaBg qui (evita ReferenceError e side effects)
          }

          function stopCountdown(){ clearTimeout(countdownTimerUtente); countdownTimerUtente = null; }
          function aggiornaCountdownDaFineUtc(){
            const timerEl = document.getElementById("timer");
            stopCountdown();
            if (!idListoneAttuale || !fineUtcCorrente){ if (timerEl) timerEl.textContent = "-"; return; }
            const end = new Date(fineUtcCorrente);
            let prevSec = -1;
            const tick = () => {
              const msLeft = end.getTime() - Date.now();
              const sec = Math.max(0, Math.ceil(msLeft / 1000));
              if (sec !== prevSec){
                timerEl.textContent = sec; prevSec = sec;
                if (sec === 0){ stopCountdown(); setBidControlsEnabled(false); if (typeof richiestaChiusuraAstaSafeguard === 'function') richiestaChiusuraAstaSafeguard(); return; }
              }
              const nextDelay = Math.max(50, msLeft - (sec - 1) * 1000);
              countdownTimerUtente = setTimeout(tick, nextDelay);
            };
            tick();
          }

          async function aggiornaCrediti(){
            try{
              const res = await fetch(`/utente/crediti?nick=${encodeURIComponent(nickname)}&lega=${encodeURIComponent(legaAlias)}`);
              if (!res.ok) return;
              const data = await res.json();
              document.getElementById("crediti-bottom").textContent = data.creditiDisponibili;
              document.getElementById("puntata-bottom").textContent = data.puntataMassima;
              portieriAttuali = data.portieri; difensoriAttuali = data.difensori; centrocampistiAttuali = data.centrocampisti; attaccantiAttuali = data.attaccanti;
              aggiornaStatoPulsantiBazzer();
            }catch(e){ console.error("Errore aggiornamento crediti:", e); }
          }

          async function caricaListone(){
            try{
              const res = await fetch(`/Utente/GetListoneDisponibile?lega=${encodeURIComponent(legaAlias)}`);
              if (!res.ok) return;
              const raw = await res.json();
              const norm = (s) => (s || "").normalize('NFD').replace(/\p{Diacritic}/gu, '').toLowerCase().trim();
              const seen = new Set();
              listoneCompleto = raw.filter(g => {
                const key = `${norm(g.nome)}|${norm(g.ruolo)}|${norm(g.squadra ?? g.squadraReale)}`;
                if (seen.has(key)) return false; seen.add(key); return true;
              });
            }catch(e){ console.error("Errore nel caricamento del listone:", e); }
          }

          function modalRoseAperto(){
            const el = document.getElementById('modalRiepilogo');
            return !!el && el.classList.contains('show');
          }

          const modalEl = document.getElementById('modalRiepilogo');
          const riepilogoContainer = document.getElementById('riepilogoContainer');
          const riepilogoLoading = document.getElementById('riepilogo-loading');

          function renderListaGiocatori(titolo, arr, mantraAttivo){
            const colorClassFromOriginal = (roleOriginal) => {
              const L = (roleOriginal || '').toString().trim().toUpperCase().charAt(0);
              return ['P','D','C','A'].includes(L) ? `role-${L}` : null;
            };
            const makeBadge = (textToShow, roleOriginal) => {
              const colorCls = colorClassFromOriginal(roleOriginal);
              return colorCls ? `<span class="role-badge ${colorCls}">${textToShow}</span>` : null;
            };
            const items = (arr || []).map(p => {
              const ruoloOriginale = p.ruolo;
              const ruoloMantra = p.ruoloMantra;
              const ruoloVisibile = mantraAttivo ? (ruoloMantra || ruoloOriginale) : ruoloOriginale;
              let ruoloMarkup;
              if (mantraAttivo){
                const badge = makeBadge(ruoloVisibile, ruoloOriginale);
                ruoloMarkup = badge ? `<span class="pl-role">${badge}</span>` : `<span class="pl-role">${ruoloVisibile || ''}</span>`;
              }else{
                const L = (ruoloVisibile || '').toString().trim().toUpperCase();
                if (L.length === 1 && ['P','D','C','A'].includes(L)){
                  const badge = makeBadge(L, L);
                  ruoloMarkup = `<span class="pl-role">${badge}</span>`;
                }else{
                  ruoloMarkup = `<span class="pl-role">${ruoloVisibile || ''}</span>`;
                }
              }
              return `
                <div class="pl-item">
                  <div class="pl-left">
                    <img class="pl-logo" src="${p.logoUrl || ''}" alt="">
                    <span class="pl-name">${p.nome}</span>
                    ${ruoloMarkup}
                  </div>
                  <span class="pl-cred">(${p.crediti})</span>
                </div>`;
            }).join('') || `<div class="text-muted small">Nessuno</div>`;

            return `<div class="role-col"><div class="role-title">${titolo}</div>${items}</div>`;
          }

          function renderAccordionSquadre(data){
            const squads = (data && (data.squads || data.squadre)) ? (data.squads || data.squadre) : [];
            const mantraAttivo = !!data?.mantraAttivo;
            const accId = 'acc-riepilogo';
            const html = squads.map((s) => {
              const collapseId = `collapse-${s.squadraId}`;
              const headingId = `heading-${s.squadraId}`;
              const show = s.isMe ? 'show' : '';
              const myTeamClass = s.isMe ? 'my-team' : '';
              const counts = { P: (s.portieri || []).length, D: (s.difensori || []).length, C: (s.centrocampisti || []).length, A: (s.attaccanti || []).length };
              const credVal = (typeof s.creditiDisponibili === 'number') ? s.creditiDisponibili : '-';
              const maxVal  = (typeof s.puntataMassima    === 'number') ? s.puntataMassima    : '-';
              return `
                <div class="accordion-item ${myTeamClass}">
                  <h2 class="accordion-header" id="${headingId}">
                    <button class="accordion-button ${show ? '' : 'collapsed'}" type="button"
                            data-bs-toggle="collapse" data-bs-target="#${collapseId}"
                            aria-expanded="${show ? 'true' : 'false'}" aria-controls="${collapseId}">
                      <div class="header-grid">
                        <div class="hg-left">
                          <span class="team-chip nick-clip" title="${s.nickname}">${s.nickname}</span>
                          <div class="role-grid">
                            <span class="rg"><span class="lbl"><span class="role-badge role-P">P</span></span><span class="num">${counts.P}</span></span>
                            <span class="rg"><span class="lbl"><span class="role-badge role-D">D</span></span><span class="num">${counts.D}</span></span>
                            <span class="rg"><span class="lbl"><span class="role-badge role-C">C</span></span><span class="num">${counts.C}</span></span>
                            <span class="rg"><span class="lbl"><span class="role-badge role-A">A</span></span><span class="num">${counts.A}</span></span>
                          </div>
                        </div>
                        <div class="hg-center">${s.isMe ? '<span class="badge bg-info">La tua</span>' : ''}</div>
                        <div class="hg-right">
                          <span class="badge bg-secondary">Crediti: <span id="cred-${s.squadraId}" class="badge-credits">${credVal}</span></span>
                          <span class="badge bg-secondary">Max: <span id="max-${s.squadraId}" class="badge-max">${maxVal}</span></span>
                        </div>
                      </div>
                    </button>
                  </h2>
                  <div id="${collapseId}" class="accordion-collapse collapse ${show}" data-bs-parent="#${accId}">
                    <div class="accordion-body">
                      <div class="d-flex flex-wrap gap-3">
                        ${renderListaGiocatori('Portieri', s.portieri, mantraAttivo)}
                        ${renderListaGiocatori('Difensori', s.difensori, mantraAttivo)}
                        ${renderListaGiocatori('Centrocampisti', s.centrocampisti, mantraAttivo)}
                        ${renderListaGiocatori('Attaccanti', s.attaccanti, mantraAttivo)}
                      </div>
                    </div>
                  </div>
                </div>`;
            }).join('');
            return `<div class="accordion accordion-dark" id="${accId}">${html || '<div class="text-muted">Nessuna squadra trovata.</div>'}</div>`;
          }

          async function apriRiepilogo(){
            try{
              riepilogoLoading.style.display = 'block';
              riepilogoContainer.innerHTML = '';
              const res = await fetch(`/utente/riepilogo?lega=${encodeURIComponent(legaAlias)}&nick=${encodeURIComponent(nickname)}`);
              if (!res.ok){ riepilogoContainer.innerHTML = '<div class="text-danger">Errore nel caricamento del riepilogo.</div>'; return; }
              const data = await res.json();
              riepilogoContainer.innerHTML = renderAccordionSquadre(data);
            }catch(e){
              console.error(e); riepilogoContainer.innerHTML = '<div class="text-danger">Errore inatteso.</div>';
            }finally{ riepilogoLoading.style.display = 'none'; }
          }
          document.getElementById('btnRiepilogo').addEventListener('click', () => { bootstrap.Modal.getOrCreateInstance(modalEl).show(); apriRiepilogo(); });

          // ===== Suggerimento =====
          const inputRicerca = document.getElementById('input-ricerca-giocatore');
          const risultatiRicercaDiv = document.getElementById('risultati-ricerca');

          inputRicerca.addEventListener('input', () => {
            const norm = (s) => (s || "").normalize('NFD').replace(/\p{Diacritic}/gu, '').toLowerCase();
            const testo = norm(inputRicerca.value);
            risultatiRicercaDiv.innerHTML = '';
            if (testo.length < 2) return;
            const filtrati = listoneCompleto.filter(g => norm(g.nome).includes(testo));
            filtrati.slice(0, 10).forEach(g => {
              const itemDiv = document.createElement('div');
              itemDiv.className = 'risultato-item';
              const spanInfo = document.createElement('span');
              spanInfo.textContent = `${g.nome} (${g.ruolo} - ${g.squadra ?? g.squadraReale ?? ''})`;
              const suggestButton = document.createElement('button');
              suggestButton.className = 'btn btn-sm btn-info';
              suggestButton.textContent = 'Suggerisci';
              suggestButton.addEventListener('click', () => suggerisciGiocatore(g));
              itemDiv.appendChild(spanInfo);
              itemDiv.appendChild(suggestButton);
              risultatiRicercaDiv.appendChild(itemDiv);
            });
          });

          function suggerisciGiocatore(giocatore){
            connection.invoke("SuggerisciGiocatore", giocatore.id, nickname, legaAlias)
              .then(() => {
                mostraToastSuggerimento(giocatore);
                inputRicerca.value = ''; risultatiRicercaDiv.innerHTML = '';
              })
              .catch(err => console.error("Errore nell'invio del suggerimento:", err));
          }



         function mostraToastSuggerimento(giocatore, durataMs = 2200) {
          const el   = document.getElementById('toast-suggerimento');
          const logo = document.getElementById('toast-logo');
          const nome = document.getElementById('toast-nome');
          const dett = document.getElementById('toast-dettagli');
          const bar  = document.getElementById('toast-progress');
          const closeBtn = el.querySelector('.toast-close');

          // Dati
          const teamSlug = (giocatore.squadra || '').toLowerCase().replace(/\s+/g, '-');
          const logoUrl  = `https://content.fantacalcio.it/web/img/team/${teamSlug}.png`;

          if (logo){
            logo.src = logoUrl;
            logo.style.display = 'block';
            logo.onerror = () => { logo.style.display = 'none'; };
          }
          if (nome) nome.textContent = (giocatore.nome || '').toUpperCase();
          if (dett) dett.textContent = `${giocatore.ruolo || ''} - ${giocatore.squadra || ''}`;

          // Mostra
          el.classList.add('show');

          // Riavvio animazione barra + durata dinamica
          if (bar){
            bar.style.animation = 'none';
            void bar.offsetWidth;
            bar.style.animation = `ts-progress ${durataMs}ms linear forwards`;
          }

          // Auto close
          clearTimeout(el._tClose);
          el._tClose = setTimeout(() => el.classList.remove('show'), durataMs);

          // Chiudi con la X
          if (closeBtn){
            closeBtn.onclick = () => { clearTimeout(el._tClose); el.classList.remove('show'); };
          }
        }




         // ===== SignalR Handlers =====
        let lastPlayerLogoUrl = null; // logo del giocatore correntemente in asta (o null)

        connection.on("MostraGiocatoreInAsta", (giocatore) => {
          const logoImg = document.getElementById("logo-giocatore-in-asta");

          idListoneAttuale = giocatore.id;
          ruoloGiocatoreAttuale = giocatore.ruolo;

          document.getElementById("giocatore").textContent =
            `${giocatore.nome} (${giocatore.ruolo} - ${giocatore.squadraReale})`;

          if (giocatore.logoUrl) {
            logoImg.src = giocatore.logoUrl;
            logoImg.style.display = "block";
          } else {
            logoImg.style.display = "none";
          }

          document.getElementById("offerente").textContent = "NESSUNO";
          document.getElementById("offerta").textContent = "0";
          offertaAttuale = 0;
          fineUtcCorrente = null;
          lastFineUtcStr = null;
          finalizeGuard = false;

          // Watermark: memorizzo il logo del giocatore (con fallback) per l'offerta;
          // per la PAUSA uso SEMPRE il logo dell'app.
          lastPlayerLogoUrl =
            giocatore.logoUrl || getTeamLogo(giocatore.squadraReale) || appLogoUrl;

          setOffertaBg(lastPlayerLogoUrl);
          setPausaBg(appLogoUrl); // la pausa deve mostrare solo il logo app
          setBuzzerUI(buzzerModeOn);
          aggiornaStatoPulsantiBazzer();
          aggiornaCountdownDaFineUtc();
        });
                // Modalità buzzer ON/OFF (arrivano sia da AdminController che da Hub)
        connection.on('BuzzerModeChanged', payload => {
          const on = !!(payload && (payload.attivo === true));
          showBuzzerUI(on);
        });
        connection.on('BuzzerModeAggiornato', payload => {
          const on = !!(payload && (payload.buzzerAttivo === true));
          showBuzzerUI(on);
        });

        // Quando qualcuno preme BUZZ (server manda offerente + fineUtc)
        connection.on('Buzz', (offerente, fineUtc) => {
          document.getElementById("offerente").textContent = offerente || "-";
          document.getElementById("offerta").textContent = "0"; // in buzzer non c'è importo
          if (fineUtc && fineUtc !== lastFineUtcStr) {
            lastFineUtcStr = fineUtc;
            fineUtcCorrente = fineUtc;
            if (!pausaAttivaClient) aggiornaCountdownDaFineUtc();
          }
        });

        connection.on("AggiornaOfferta", (offerente, offerta, fineUtc) => {
          document.getElementById("offerente").textContent = offerente || "-";

          if (!buzzerModeOn) {
            // modalità classica: aggiorno il numero
            document.getElementById("offerta").textContent = offerta || 0;
            offertaAttuale = offerta || 0;
          } else {
            // modalità Buzzer: non mostro un numero, metto un trattino lungo
            const el = document.getElementById("offerta");
            if (el) el.textContent = '—';
            // e NON tocco offertaAttuale (irrilevante qui)
          }

          if (fineUtc && fineUtc !== lastFineUtcStr) {
            lastFineUtcStr = fineUtc;
            fineUtcCorrente = fineUtc;
            if (!pausaAttivaClient) aggiornaCountdownDaFineUtc();
          }
        });


        connection.on("AstaTerminata", (giocatoreId, nomeGiocatore, nomeOfferente, offerta) => {
          const titolo = "Asta Conclusa!";
          const corpo  = (typeof buzzerModeOn !== 'undefined' && buzzerModeOn)
            ? `Giocatore ${nomeGiocatore} aggiudicato da ${nomeOfferente}`
            : `Giocatore ${nomeGiocatore} aggiudicato da ${nomeOfferente} per ${offerta} crediti!`;

          if (typeof mostraMessaggio === "function") {
            mostraMessaggio(titolo, corpo);
          } else {
            alert(`${titolo}\n${corpo}`);
          }

          idListoneAttuale = 0;
          ruoloGiocatoreAttuale = "";
          document.getElementById("giocatore").textContent = "Nessun giocatore";
          document.getElementById("logo-giocatore-in-asta").style.display = "none";

          // Reset watermark e memoria del logo
          lastPlayerLogoUrl = null;
          setOffertaBg(appLogoUrl);
          setPausaBg(appLogoUrl);

          document.getElementById("offerente").textContent = "-";
          document.getElementById("offerta").textContent = "0";
          fineUtcCorrente = null;
          lastFineUtcStr = null;
          finalizeGuard = false;

          stopCountdown();
          document.getElementById("timer").textContent = "-";
          pausaAttivaClient = false;
          document.getElementById("pausa-overlay").classList.remove("visible");

          aggiornaStatoPulsantiBazzer();
          aggiornaCrediti();
          caricaListone();
        });

        connection.on("AstaAnnullata", () => {
          if (typeof mostraMessaggio === "function") {
            mostraMessaggio("Asta Annullata", "L'amministratore ha annullato l'asta corrente.");
          } else {
            alert("Asta Annullata");
          }

          idListoneAttuale = 0;
          ruoloGiocatoreAttuale = "";

          const nomeEl = document.getElementById("giocatore");
          const logoEl = document.getElementById("logo-giocatore-in-asta");
          const offerenteEl = document.getElementById("offerente");
          const offertaEl = document.getElementById("offerta");
          const timerEl = document.getElementById("timer");

          if (nomeEl) nomeEl.textContent = "Nessun giocatore";
          if (logoEl) logoEl.style.display = "none";
          if (offerenteEl) offerenteEl.textContent = "-";
          if (offertaEl) offertaEl.textContent = "0";

          fineUtcCorrente = null;
          lastFineUtcStr = null;
          finalizeGuard = false;
          stopCountdown();
          if (timerEl) timerEl.textContent = "-";

          pausaAttivaClient = false;
          const pausaEl = document.getElementById("pausa-overlay");
          if (pausaEl) pausaEl.classList.remove("visible");

          // Reset watermark e memoria del logo
          lastPlayerLogoUrl = null;
          setOffertaBg(appLogoUrl);
          setPausaBg(appLogoUrl);

          aggiornaStatoPulsantiBazzer();
        });

        // ► Pausa
        connection.on("AstaPausa", (payload) => {
          pausaAttivaClient = true;
          pauseLockUntil = 0;

          const rem =
            typeof payload?.remainingSec === "number"
              ? payload.remainingSec
              : document.getElementById("timer").textContent || "--";

          const remEl = document.getElementById("pausa-remaining");
          if (remEl) remEl.textContent = rem;

          const tEl = document.getElementById("timer");
          if (tEl) tEl.textContent = rem;

          // SOLO PAUSA: usa esclusivamente il logo dell'app
          setPausaBg(appLogoUrl);

          // Non tocchiamo l'offerta: resta col logo giocatore (se asta attiva), altrimenti è già appLogo
          if (!idListoneAttuale) setOffertaBg(appLogoUrl);

          setPauseUI(true);
          startResumePolling();
        });

        // ► Ripresa
        connection.on("AstaRipresa", (arg) => {
          pausaAttivaClient = false;
          pauseLockUntil = Date.now() + 5000;
          stopResumePolling();
          setPauseUI(false);

          // Ripristina lo sfondo dell'offerta al logo del giocatore (se presente), altrimenti app
          setOffertaBg(lastPlayerLogoUrl || appLogoUrl);

          const fineUtc = typeof arg === "string" ? arg : arg && arg.fineUtc;
          if (fineUtc) {
            lastFineUtcStr = fineUtc;
            fineUtcCorrente = fineUtc;
            aggiornaCountdownDaFineUtc();
          } else {
            try {
              connection.invoke("RichiediStatoAttuale");
            } catch {}
          }
          aggiornaStatoPulsantiBazzer();
        });


          // ► Sync stato
                 connection.on("StatoAsta", (stato) => {
          const buzzerOn = !!stato?.buzzerAttivo;

          // 1) Aggiorna testi/etichette (nascondi "Offerta Attuale", mostra "ATTUALE OFFERENTE", ecc.)
          setBuzzerUI(buzzerOn);

          // 2) Sincronizza i pannelli (BUZZER vs pulsanti offerta)
          showBuzzerUI(buzzerOn);

          if (Date.now() < pauseLockUntil && stato?.pausaAttiva === true) return;

          if (stato?.pausaAttiva) {
            pausaAttivaClient = true;
            setPauseUI(true);
            startResumePolling();
          } else {
            pausaAttivaClient = false;
            stopResumePolling();
            setPauseUI(false);
            if (stato?.fineUtc) {
              lastFineUtcStr  = stato.fineUtc;
              fineUtcCorrente = stato.fineUtc;
              aggiornaCountdownDaFineUtc();
            }
          }
        });

          // === Riepilogo & crediti live ===
          connection.on("RiepilogoAggiornato", (data) => {
            aggiornaCrediti();
            const squads = (data && (data.squadre || data.squads)) ? (data.squadre || data.squads) : [];
            squads.forEach(s => {
              const credChip = document.getElementById(`cred-${s.squadraId}`);
              if (credChip && typeof s.creditiDisponibili === 'number') credChip.textContent = s.creditiDisponibili;
              const maxChip = document.getElementById(`max-${s.squadraId}`);
              if (maxChip && typeof s.puntataMassima === 'number') maxChip.textContent = s.puntataMassima;
            });
            if (modalRoseAperto()) apriRiepilogo();
          });

          connection.on("AggiornaUtente", ()=>{ aggiornaCrediti(); caricaListone(); });
          connection.on("AggiornaDurataTimer", (nuoviSecondi)=>{ timerSecondi = nuoviSecondi; });
                  // Ricevi i broadcast dell'admin quando cambia lo switch
        connection.on("BuzzerModeChanged",   (p) => setBuzzerUI(!!p?.attivo));
        connection.on("BuzzerModeAggiornato",(p) => setBuzzerUI(!!p?.buzzerAttivo));

          connection.on("AggiornaRegoleLega", (regole) => {
            maxPortieri = regole.maxPortieri;
            maxDifensori = regole.maxDifensori;
            maxCentrocampisti = regole.maxCentrocampisti;
            maxAttaccanti = regole.maxAttaccanti;
            aggiornaStatoPulsantiBazzer();
          });

          // ===== Offerte (guard pausa) =====
          document.querySelectorAll(".bazzer").forEach(btn => {
            btn.addEventListener("click", async () => {
              if (pausaAttivaClient){ if (typeof mostraMessaggio === 'function') mostraMessaggio("Asta in pausa", "Non puoi fare offerte durante la pausa."); return; }
              const incremento = parseInt(btn.dataset.incremento);
              const snapshot = offertaAttuale;
              const nuovaOfferta = snapshot + incremento;
              const puntataMassima = parseInt(document.getElementById('puntata-bottom').textContent);
              if (nuovaOfferta > puntataMassima){
                if (typeof mostraMessaggio === 'function') mostraMessaggio("Offerta non valida", "Non hai abbastanza crediti! Puntata max: " + puntataMassima);
                else alert("Offerta non valida");
                return;
              }
              await connection.invoke("InviaOfferta", nickname, nuovaOfferta, snapshot);
            });
          });

          document.getElementById("btnOffertaPersonalizzata").addEventListener("click", async () => {
            if (pausaAttivaClient){ if (typeof mostraMessaggio === 'function') mostraMessaggio("Asta in pausa", "Non puoi fare offerte durante la pausa."); return; }
            const inputOfferta = document.getElementById('offertaPersonalizzataInput');
            const offertaInserita = parseInt(inputOfferta.value);
            if (isNaN(offertaInserita) || offertaInserita <= 0){ if (typeof mostraMessaggio === 'function') mostraMessaggio("Errore", "Inserisci un valore numerico valido."); else alert("Errore"); return; }
            if (offertaInserita <= offertaAttuale){ if (typeof mostraMessaggio === 'function') mostraMessaggio("Offerta non valida", "Deve essere superiore all'attuale!"); else alert("Offerta non valida"); return; }
            const puntataMassima = parseInt(document.getElementById('puntata-bottom').textContent);
            if (offertaInserita > puntataMassima){ if (typeof mostraMessaggio === 'function') mostraMessaggio("Offerta non valida", "Supera la tua puntata massima (" + puntataMassima + ")"); else alert("Offerta non valida"); return; }
            const snapshot = offertaAttuale;
            await connection.invoke("InviaOfferta", nickname, offertaInserita, snapshot);
            inputOfferta.value = "";
          });

          // ===== Reconnect =====
          function clearPing(){ if (pingIntervalId){ clearInterval(pingIntervalId); pingIntervalId = null; } }
          function startPing(){
            clearPing();
            pingIntervalId = setInterval(() => {
              if (connection.state === signalR.HubConnectionState.Connected){
                connection.invoke("Ping", legaAlias, nickname).catch(()=>{});
              }
            }, 15000);
          }

          async function postConnectedSetup(){
            try { await connection.invoke("RegistratiAllaLega", legaAlias, nickname, false); } catch(_){}
            try { await connection.invoke("RichiediStatoAttuale"); } catch(_){}
            aggiornaStatoPulsantiBazzer();
            caricaListone();
            aggiornaCrediti();
            startPing();
          }

          async function startConnectionInitial(){
            try{
              await connection.start();
              hideReconnectOverlay();
              manualAttempts = 0;
              await postConnectedSetup();
              aggiornaStatoPulsantiBazzer();
            }catch(err){
              console.warn("Connessione iniziale fallita, parte retry 1s:", err);
              startManualReconnectLoop();
            }
          }

          function startManualReconnectLoop(){
            if (manualReconnectTimer) return;
            manualAttempts = 0;
            showReconnectOverlay(0);
            manualReconnectTimer = setInterval(async () => {
              if (connection.state === signalR.HubConnectionState.Connected){
                stopManualLoop(); hideReconnectOverlay(); return;
              }
              manualAttempts++; showReconnectOverlay(manualAttempts);
              try{
                await connection.start();
                stopManualLoop(); hideReconnectOverlay();
                await postConnectedSetup();
                aggiornaStatoPulsantiBazzer();
              }catch(e){ /* retry 1s */ }
            }, 1000);
          }
          function stopManualLoop(){ if (manualReconnectTimer){ clearInterval(manualReconnectTimer); manualReconnectTimer = null; } }

          connection.onreconnecting((err) => { showReconnectOverlay((connection._reconnectDisplayCount || 0) + 1); setBidControlsEnabled(false); stopCountdown(); });
          connection.onreconnected((_id) => {
            hideReconnectOverlay();
            stopManualLoop();
            manualAttempts = 0;
            postConnectedSetup();
            try { connection.invoke("RichiediStatoAttuale"); } catch {}
            aggiornaStatoPulsantiBazzer();
          });
          connection.onclose((err) => { showReconnectOverlay(manualAttempts); clearPing(); startManualReconnectLoop(); });

          // ===== Avvio =====
          startConnectionInitial();

          // Evita leak se si lascia la pagina
          window.addEventListener('beforeunload', () => { try { clearPing(); stopManualLoop(); connection.stop(); } catch(_){} });
        });

        // persistenza ultima URL utente
        (function(){
          try {
            var isUtente = /^\/utente(?:\/)?(?:\?|$)/i.test(location.pathname);
            var qs = new URLSearchParams(location.search);
            var lega = qs.get('lega');
            var nick = qs.get('nick');
            if (isUtente && lega && nick) {
              var url = '/utente?lega=' + encodeURIComponent(lega) + '&nick=' + encodeURIComponent(nick);
              localStorage.setItem('fb:lastUtenteUrl', url);
              localStorage.setItem('fb:lega', lega);
              localStorage.setItem('fb:nick', nick);
            }
          } catch(e){}
        })();
    </script>
}
