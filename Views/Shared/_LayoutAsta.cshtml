<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <!-- 👇 aggiunto viewport-fit=cover per abilitare le safe-area -->
    <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover">
    <title>@ViewData["Title"] - AstaLegheFC</title>

    <link rel="manifest" href="/manifest-utente">
    <meta name="theme-color" content="#2c3e50" />

    <meta name="mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-title" content="Fantabazzer">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <link rel="apple-touch-icon" href="/images/icons/icon-192x192.png">

    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap" rel="stylesheet">
    <link rel="icon" type="image/png" href="~/png/logo_bazzer.png" />

    <style>
        /* 👇 spingi giù il contenuto quando l’app è in standalone su iPhone con notch */
        .safe-top {
            /* iOS 11 */
            padding-top: calc(constant(safe-area-inset-top) + 10px);
            /* iOS 12+ */
            padding-top: calc(env(safe-area-inset-top) + 10px);
        }

        /* Evita scroll chaining/glow su Android/Chrome */
        html, body {
            overscroll-behavior: none;
        }

            /* Classe che blocca lo scroll quando non serve */
            html.scroll-lock, body.scroll-lock {
                overflow: hidden;
                height: 100%;
            }
    </style>
</head>
<body>
    <div class="container-fluid">
        <!-- 👇 aggiunta la classe safe-top -->
        <main role="main" class="pb-3 safe-top">
            @RenderBody()
        </main>
    </div>

    <!-- Modal riuso messaggi -->
    <div class="modal fade" id="messaggioModale" tabindex="-1" aria-labelledby="messaggioModaleLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content text-white" style="background-color: #2c3e50; border: 1px solid #3498db;">
                <div class="modal-header" style="border-bottom-color: #34495e;">
                    <h5 class="modal-title" id="messaggioModaleTitolo">Messaggio</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="messaggioModaleCorpo"></p>
                </div>
                <div class="modal-footer" style="border-top-color: #34495e;">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="messaggioModaleBtnAnnulla">Annulla</button>
                    <button type="button" class="btn btn-primary" id="messaggioModaleBtnOk">OK</button>
                </div>
            </div>
        </div>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)

    <script>
        // SW: registra se presente
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/service-worker.js')
                    .then(() => console.log('Service Worker registrato'))
                    .catch(err => console.error('SW error:', err));
            });
        }
    </script>

    <script>
        (function(){
          try {
            var qs = new URLSearchParams(location.search);
            var lega = qs.get('lega');
            var nick = qs.get('nick');
            if (lega && nick) {
              localStorage.setItem('fb:lega', lega);
              localStorage.setItem('fb:nick', nick);
              localStorage.setItem('fb:lastUtenteUrl', '/utente?lega=' + encodeURIComponent(lega) + '&nick=' + encodeURIComponent(nick));
            }
          } catch(e){}
        })();
    </script>

    <!-- 👇 Blocco scroll “intelligente” su mobile -->
    <script>
        (function () {
          let isLocked = false;

          // iOS: blocca il "rubber-band" quando lock attivo
          const preventTouchMove = (e) => { if (isLocked) e.preventDefault(); };
          document.addEventListener('touchmove', preventTouchMove, { passive: false });

          function viewportHeight() {
            return window.visualViewport ? Math.round(window.visualViewport.height) : window.innerHeight;
          }

          function docHeight() {
            const d = document.documentElement, b = document.body;
            return Math.max(d.scrollHeight, d.offsetHeight, b.scrollHeight, b.offsetHeight);
          }

          function updateScrollLock() {
            // Non bloccare mai con modali aperti (Bootstrap aggiunge .modal-open al body)
            const modalOpen = document.body.classList.contains('modal-open');

            // piccolo margine per evitare “1px scroll” da safe-area / toolbar
            const shouldLock = !modalOpen && (docHeight() <= viewportHeight() + 1);

            document.documentElement.classList.toggle('scroll-lock', shouldLock);
            document.body.classList.toggle('scroll-lock', shouldLock);
            isLocked = shouldLock;
          }

          // Ricalcola su eventi tipici
          ['load', 'resize', 'orientationchange'].forEach(ev =>
            window.addEventListener(ev, updateScrollLock)
          );
          if (window.visualViewport) window.visualViewport.addEventListener('resize', updateScrollLock);

          // Ricalcola quando cambia l’altezza del body (es. contenuti che arrivano via SignalR)
          if ('ResizeObserver' in window) {
            new ResizeObserver(updateScrollLock).observe(document.body);
          }

          // Ricalcola quando Bootstrap apre/chiude modali (cambia class sul body)
          new MutationObserver(updateScrollLock).observe(document.body, {
            attributes: true, attributeFilter: ['class']
          });

          document.addEventListener('DOMContentLoaded', updateScrollLock);
          updateScrollLock();
        })();
    </script>
</body>
</html>
