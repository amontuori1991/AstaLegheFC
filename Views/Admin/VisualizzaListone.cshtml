@using System.Text.Json
@model List<AstaLegheFC.Models.CalciatoreListone>
@{
    ViewData["Title"] = "Listone Calciatori";
    var riepilogo = ViewBag.RiepilogoSquadre as List<AstaLegheFC.Models.ViewModels.SquadraRiepilogoViewModel> ?? new List<AstaLegheFC.Models.ViewModels.SquadraRiepilogoViewModel>();
    var squadreJson = JsonSerializer.Serialize(riepilogo.Select(s => new { s.SquadraId, s.Nickname }));
}

<style>
    #overlay-timer {
        font-size: 3.5rem;
        font-weight: 700;
        line-height: 1;
        margin: 0;
        transition: color .3s
    }

    .timer-green {
        color: #2ecc71
    }

    .timer-yellow {
        color: #f1c40f
    }

    .timer-red {
        color: #e74c3c
    }

    #asta-overlay {
        position: fixed;
        inset: 0;
        background: rgba(0,0,0,.9);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050;
        color: #fff;
        text-align: center;
        font-family: 'Montserrat',sans-serif;
        opacity: 0;
        visibility: hidden;
        transition: opacity .3s,visibility .3s
    }

        #asta-overlay.visible {
            opacity: 1;
            visibility: visible
        }

    .asta-box {
        background: linear-gradient(145deg,#34495e,#2c3e50);
        padding: 40px;
        border-radius: 20px;
        box-shadow: 0 15px 35px rgba(0,0,0,.6);
        border: 1px solid #3498db;
        min-width: 650px;
        transform: scale(.95);
        transition: transform .3s
    }

    #asta-overlay.visible .asta-box {
        transform: scale(1)
    }

    .asta-box-header {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        margin-bottom: 10px
    }

    #overlay-logo-squadra {
        height: 90px;
        filter: drop-shadow(0 0 10px rgba(255,255,255,.2))
    }

    #overlay-nome-giocatore {
        font-size: 3.5rem;
        font-weight: 700;
        text-transform: uppercase;
        margin: 0;
        text-shadow: 0 0 15px rgba(0,0,0,.5);
        color: #fff
    }

    #overlay-dettagli-giocatore {
        font-size: 1.5rem;
        color: #95a5a6;
        margin-top: 0
    }

    #overlay-offerta {
        font-size: 7rem;
        font-weight: 700;
        margin: 20px 0;
        line-height: 1;
        text-shadow: 0 0 20px rgba(241,196,15,.5);
        color: #f1c40f !important
    }

    #overlay-offerente {
        font-size: 2.2rem;
        font-weight: 300;
        color: #fff
    }

    #overlay-log {
        margin-top: 20px;
        max-height: 150px;
        overflow-y: auto;
        text-align: left;
        font-family: monospace;
        background: rgba(0,0,0,.3);
        border-radius: 5px;
        padding: 10px
    }

        #overlay-log p {
            margin: 2px 0;
            border-bottom: 1px solid #34495e;
            padding-bottom: 2px
        }

    .asta-box-footer {
        margin-top: 30px
    }

    .status-dot {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: .35rem;
        vertical-align: middle;
        border: 1px solid rgba(255,255,255,.2)
    }

    .dot-online {
        background: #2ecc71
    }

    .dot-offline {
        background: #e74c3c
    }

    .dot-waiting {
        background: #f1c40f
    }

    .auction-bar {
        background: rgba(44,62,80,.5);
        border: 1px solid #34495e;
        border-radius: .5rem;
        padding: .5rem .75rem
    }

    .letters-bar .letter-chip {
        border: 1px solid #6c757d;
        background: transparent;
        color: #fff;
        padding: .125rem .5rem;
        border-radius: .375rem;
        font-weight: 600;
        line-height: 1;
        cursor: pointer;
    }

        .letters-bar .letter-chip:hover {
            background: rgba(255,255,255,.06);
        }

    .letters-bar .letter-selected {
        border-color: #0d6efd !important;
        background: #0d6efd !important;
        color: #fff !important;
    }

    .letters-bar .letter-archived {
        opacity: .45;
        text-decoration: line-through;
    }
</style>

<h2 class="mt-3">Listone Calciatori</h2>

<div class="auction-bar d-flex flex-wrap align-items-center justify-content-between mb-3">
    <div class="d-flex align-items-center gap-3">
        <span class="badge bg-secondary">Durata asta</span>
        <span id="durata-asta" class="fs-4 fw-bold">00:00</span>
        <span id="stato-pausa" class="badge bg-warning d-none">In PAUSA</span>
    </div>
    <div class="btn-group">
        <button id="btn-pausa" type="button" class="btn btn-outline-warning btn-sm">Pausa</button>
        <button id="btn-riprendi" type="button" class="btn btn-outline-success btn-sm" disabled>Riprendi</button>
        <button id="btn-reset" class="btn btn-outline-danger btn-sm">Reset</button>

    </div>
    @if (ViewBag.SorteggioLetteraAttivo)
    {
        <div class="letters-bar d-flex align-items-center gap-2 flex-wrap mb-2">
            <button id="btnSorteggiaLettera" type="button" class="btn btn-outline-primary btn-sm">
                Sorteggia lettera
            </button>
            <button id="btnResetLettere" type="button" class="btn btn-outline-secondary btn-sm">
                Reset lettere
            </button>
            <div id="lettersChips" class="d-flex flex-wrap gap-1 ms-1"></div>
        </div>
    }


</div>

@if (riepilogo.Any())
{
    <h4 class="mt-4">Riepilogo Squadre</h4>
    <div class="table-responsive mb-4">
        <table class="table table-bordered table-sm text-center align-middle">
            <thead class="table-primary">
                <tr><th>Nickname</th><th>Crediti</th><th>Puntata Max</th><th>P</th><th>D</th><th>C</th><th>A</th></tr>
            </thead>
            <tbody>
                @foreach (var s in riepilogo)
                {
                    <tr>
                        <td>
                            <span class="status-dot dot-offline" data-nick="@s.Nickname" title="@s.Nickname"></span>
                            @s.Nickname
                        </td>
                        <td>@s.CreditiDisponibili</td>
                        <td>@s.PuntataMassima</td>
                        <td>
                            <button class="btn btn-sm btn-secondary" type="button" onclick="toggleLista('portieri-@s.Nickname')">@s.PortieriAssegnati.Count +/-</button>
                            <ul id="portieri-@s.Nickname" class="mt-2 d-none list-unstyled small text-start">
                                @foreach (var g in s.PortieriAssegnati)
                                {
                                    <li class="d-flex align-items-center py-1 border-bottom border-secondary">
                                        <span class="me-auto pe-2">@g.Nome</span>
                                        @if (ViewBag.MantraAttivo)
                                        {
                                            <span class="text-info fst-italic small me-2">@g.RuoloMantra</span>
                                        }
                                        <img src="@g.LogoUrl" alt="@g.SquadraReale" style="height:22px" class="mx-2" />
                                        <span class="text-nowrap small">(@g.CreditiSpesi)</span>
                                        <button class="btn btn-danger btn-sm ms-2" data-id="@g.Id" data-nome="@g.Nome" data-costo="@g.CreditiSpesi" data-squadra="@g.SquadraReale" data-logo="@g.LogoUrl" data-ruolo="@g.Ruolo" onclick="apriModaleSvincolo(this)">SVINCOLA</button>
                                    </li>
                                }
                            </ul>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-secondary" type="button" onclick="toggleLista('difensori-@s.Nickname')">@s.DifensoriAssegnati.Count +/-</button>
                            <ul id="difensori-@s.Nickname" class="mt-2 d-none list-unstyled small text-start">
                                @foreach (var g in s.DifensoriAssegnati)
                                {
                                    <li class="d-flex align-items-center py-1 border-bottom border-secondary">
                                        <span class="me-auto pe-2">@g.Nome</span>
                                        @if (ViewBag.MantraAttivo)
                                        {
                                            <span class="text-info fst-italic small me-2">@g.RuoloMantra</span>
                                        }
                                        <img src="@g.LogoUrl" alt="@g.SquadraReale" style="height:22px" class="mx-2" />
                                        <span class="text-nowrap small">(@g.CreditiSpesi)</span>
                                        <button class="btn btn-danger btn-sm ms-2" data-id="@g.Id" data-nome="@g.Nome" data-costo="@g.CreditiSpesi" data-squadra="@g.SquadraReale" data-logo="@g.LogoUrl" data-ruolo="@g.Ruolo" onclick="apriModaleSvincolo(this)">SVINCOLA</button>
                                    </li>
                                }
                            </ul>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-secondary" type="button" onclick="toggleLista('centro-@s.Nickname')">@s.CentrocampistiAssegnati.Count +/-</button>
                            <ul id="centro-@s.Nickname" class="mt-2 d-none list-unstyled small text-start">
                                @foreach (var g in s.CentrocampistiAssegnati)
                                {
                                    <li class="d-flex align-items-center py-1 border-bottom border-secondary">
                                        <span class="me-auto pe-2">@g.Nome</span>
                                        @if (ViewBag.MantraAttivo)
                                        {
                                            <span class="text-info fst-italic small me-2">@g.RuoloMantra</span>
                                        }
                                        <img src="@g.LogoUrl" alt="@g.SquadraReale" style="height:22px" class="mx-2" />
                                        <span class="text-nowrap small">(@g.CreditiSpesi)</span>
                                        <button class="btn btn-danger btn-sm ms-2" data-id="@g.Id" data-nome="@g.Nome" data-costo="@g.CreditiSpesi" data-squadra="@g.SquadraReale" data-logo="@g.LogoUrl" data-ruolo="@g.Ruolo" onclick="apriModaleSvincolo(this)">SVINCOLA</button>
                                    </li>
                                }
                            </ul>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-secondary" type="button" onclick="toggleLista('attaccanti-@s.Nickname')">@s.AttaccantiAssegnati.Count +/-</button>
                            <ul id="attaccanti-@s.Nickname" class="mt-2 d-none list-unstyled small text-start">
                                @foreach (var g in s.AttaccantiAssegnati)
                                {
                                    <li class="d-flex align-items-center py-1 border-bottom border-secondary">
                                        <span class="me-auto pe-2">@g.Nome</span>
                                        @if (ViewBag.MantraAttivo)
                                        {
                                            <span class="text-info fst-italic small me-2">@g.RuoloMantra</span>
                                        }
                                        <img src="@g.LogoUrl" alt="@g.SquadraReale" style="height:22px" class="mx-2" />
                                        <span class="text-nowrap small">(@g.CreditiSpesi)</span>
                                        <button class="btn btn-danger btn-sm ms-2" data-id="@g.Id" data-nome="@g.Nome" data-costo="@g.CreditiSpesi" data-squadra="@g.SquadraReale" data-logo="@g.LogoUrl" data-ruolo="@g.Ruolo" onclick="apriModaleSvincolo(this)">SVINCOLA</button>
                                    </li>
                                }
                            </ul>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<form id="filtroForm" method="get" asp-action="VisualizzaListone" class="row g-2 mb-4">
    <input type="hidden" name="lega" value="@ViewBag.LegaAlias" />
    <input type="hidden" name="iniziale" id="inizialeInput" value="@(ViewBag.Iniziale ?? "")" />
    <input type="hidden" name="sorteggio" id="sorteggioInput" value="@(ViewBag.SorteggioLetteraAttivo ? "true" : "false")" />
    <div class="col-md-4"><input type="text" name="nome" id="nomeFilterInput" class="form-control" placeholder="Cerca per nome" value="@ViewBag.Nome" /></div>
    <div class="col-md-4"><input type="text" name="squadra" id="squadraFilterInput" class="form-control" placeholder="Cerca per squadra" value="@ViewBag.Squadra" /></div>
    <div class="col-md-4">
        <select name="ruolo" class="form-select" onchange="this.form.submit()">
            <option value="">Tutti i ruoli</option>
            @foreach (var r in (List<string>)ViewBag.RuoliDisponibili)
            {
                <option value="@r" selected="@(ViewBag.Ruolo == r)">@r</option>
            }
        </select>
    </div>
</form>

<div class="row mb-3 align-items-center">
    <div class="col-auto">
        <form id="formTimer" class="d-flex" onsubmit="impostaTimer(event)">
            <input type="number" class="form-control me-2" id="secondiTimer" value="5" min="2" placeholder="Secondi Timer" />
            <button type="submit" class="btn btn-secondary">Imposta Timer</button>
        </form>
    </div>
    <div class="col-auto">
        <div class="form-check form-switch fs-5">
            <input class="form-check-input" type="checkbox" role="switch" id="bloccoPortieriSwitch" @(ViewBag.BloccoPortieriAttivo ? "checked" : "")>
            <label class="form-check-label" for="bloccoPortieriSwitch">Blocco Portieri</label>
        </div>
    </div>
    <div class="col-auto">
        <div class="form-check form-switch fs-5">
            <input class="form-check-input" type="checkbox" role="switch" id="mantraSwitch" @(ViewBag.MantraAttivo ? "checked" : "")>
            <label class="form-check-label" for="mantraSwitch">Mantra</label>
        </div>
    </div>
    <div class="col-auto">
        <div class="form-check form-switch fs-5">
            <input class="form-check-input" type="checkbox" role="switch" id="sorteggioSwitch" @(ViewBag.SorteggioLetteraAttivo ? "checked" : "")>
            <label class="form-check-label" for="sorteggioSwitch">Sorteggio lettera</label>
        </div>
    </div>

</div>

<div class="table-responsive">
    <table class="table table-striped table-bordered table-hover">
        <thead class="table-dark text-center">
            <tr><th>Nome</th><th>Ruolo</th><th>Squadra</th><th>Azioni</th></tr>
        </thead>
        <tbody class="text-center">
            @foreach (var c in Model)
            {
                <tr id="riga-giocatore-@c.Id">
                    <td class="text-start">@c.Nome</td>
                    <td>@(ViewBag.MantraAttivo? c.RuoloMantra: c.Ruolo)</td>
                    <td class="text-start">@c.Squadra</td>
                    <td>
                        <button class="btn btn-success btn-sm btn-avvia-asta"
                                data-id="@c.Id"
                                data-mantra="@ViewBag.MantraAttivo.ToString().ToLower()">
                            Asta
                        </button>
                        <button class="btn btn-warning btn-sm btn-assegna"
                                data-id="@c.Id"
                                data-nome="@c.Nome">
                            Assegna
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Modale Assegna -->
<div class="modal fade" id="assegnaModal" tabindex="-1" aria-labelledby="assegnaModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="assegnaModalLabel">Assegna Giocatore</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Stai assegnando: <strong id="nomeGiocatoreModale"></strong></p>
                <input type="hidden" id="idGiocatoreModale" />
                <div class="mb-3">
                    <label for="squadraSelect" class="form-label">Assegna a:</label>
                    <select id="squadraSelect" class="form-select"></select>
                </div>
                <div class="mb-3">
                    <label for="costoInput" class="form-label">Costo:</label>
                    <input type="number" id="costoInput" class="form-control" value="1" min="1" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-primary" onclick="salvaAssegnazione()">Salva Assegnazione</button>
            </div>
        </div>
    </div>
</div>

<!-- Modale Svincola -->
<div class="modal fade" id="svincolaModal" tabindex="-1" aria-labelledby="svincolaModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="svincolaModalLabel">Svincola Giocatore</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <img id="logoGiocatoreSvincola" src="" alt="Logo Squadra" class="d-block mx-auto mb-3" style="height:70px" />
                <p class="mb-0 fs-4" id="nomeGiocatoreSvincolo"></p>
                <p class="text-muted" id="dettagliGiocatoreSvincolo"></p>
                <hr />
                <input type="hidden" id="idGiocatoreSvincola" />
                <div class="mb-3 text-start">
                    <label for="creditiSvincoloInput" class="form-label">Crediti da restituire (costo originale: <span id="costoOriginaleSvincolo"></span>):</label>
                    <input type="number" id="creditiSvincoloInput" class="form-control" value="1" min="0" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-primary" id="btnConfermaSvincolo">Conferma Svincolo</button>
            </div>
        </div>
    </div>
</div>

<!-- Overlay Asta -->
<div id="asta-overlay">
    <div class="asta-box">
        <div class="asta-box-header">
            <img id="overlay-logo-squadra" src="" alt="Logo Squadra" />
            <div>
                <h2 id="overlay-nome-giocatore">NOME GIOCATORE</h2>
                <p id="overlay-dettagli-giocatore">Ruolo - Squadra</p>
            </div>
        </div>
        <h1 id="overlay-timer" class="mb-2">--</h1>
        <h1 id="overlay-offerta">0</h1>
        <h3 id="overlay-offerente">In attesa di offerte...</h3>
        <div id="overlay-log"></div>
        <div class="asta-box-footer">
            <button class="btn btn-danger" onclick="annullaAsta()">Annulla Asta</button>
        </div>
    </div>
</div>

<audio id="suono-offerta" src="~/sounds/coin.mp3" preload="auto"></audio>
<audio id="suono-countdown" src="~/sounds/beep.mp3" preload="auto"></audio>
<audio id="suono-vittoria" src="~/sounds/gavel.mp3" preload="auto"></audio>

@section Scripts {
    @Html.AntiForgeryToken()
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script>
        // ====== VAR GLOBALI ======
        let debounceTimer;
        let durataTimer = @ViewBag.DurataTimer;
        let countdownTimerAdmin = null;
        let closeTimeoutAdmin = null;
        let lastOffertaAdmin = 0;

        // Durata asta (client) — persistita in localStorage
        const legaAliasAdmin = "@ViewBag.LegaAlias";
        const adminNick = "@(ViewBag.AdminNick ?? "ADMIN")";
        const LS_START = `asta:start:${legaAliasAdmin}`;
        const LS_PAUSE_ACC = `asta:pauseAcc:${legaAliasAdmin}`;
        const LS_PAUSE_AT = `asta:pauseAt:${legaAliasAdmin}`;
        const LS_PAUSE_ACTIVE = `asta:pauseActive:${legaAliasAdmin}`;
        const sorteggioInput = document.getElementById('sorteggioInput');

        let durataInterval = null;

        // ====== LETTERE (state per lega) — spostate qui in globale ======
        const ALPH = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');
        const LS_LETTERS = `asta:lettersArchived:${legaAliasAdmin}`;
        function getArchivedLetters() {
            try { return JSON.parse(localStorage.getItem(LS_LETTERS) || '[]'); }
            catch { return []; }
        }
        function setArchivedLetters(arr) {
            localStorage.setItem(LS_LETTERS, JSON.stringify(arr));
            renderLettersChips(); // ridisegna UI
        }
                function clearInitialFilterAndSubmit(){
            const inizialeInput = document.getElementById('inizialeInput');
            if (inizialeInput) inizialeInput.value = '';
            document.getElementById('filtroForm').submit();
        }


        function fmt(s){
            s = Math.max(0, Math.floor(s||0));
            const h = Math.floor(s/3600);
            const m = Math.floor((s%3600)/60);
            const ss = s%60;
            return h>0 ? `${h}:${String(m).padStart(2,'0')}:${String(ss).padStart(2,'0')}`
                       : `${String(m).padStart(2,'0')}:${String(ss).padStart(2,'0')}`;
        }
        function paintDurata(){
            const out = document.getElementById('durata-asta');
            const badge = document.getElementById('stato-pausa');
            const startIso = localStorage.getItem(LS_START);
            if (!startIso){ out.textContent='00:00'; badge?.classList.add('d-none'); return; }
            const start = new Date(startIso).getTime();
            const pauseAcc = parseInt(localStorage.getItem(LS_PAUSE_ACC)||"0");
            const pauseActive = localStorage.getItem(LS_PAUSE_ACTIVE) === "true";
            const pauseAtIso = localStorage.getItem(LS_PAUSE_AT);
            const extraPause = (pauseActive && pauseAtIso)
                ? Math.max(0, Math.floor((Date.now() - new Date(pauseAtIso).getTime())/1000))
                : 0;
            const sec = Math.max(0, Math.floor((Date.now()-start)/1000) - (pauseAcc + extraPause));
            out.textContent = fmt(sec);
            if (badge) badge.classList.toggle('d-none', !pauseActive);
        }
        function startDurataLoop(){
            if (durataInterval) clearInterval(durataInterval);
            paintDurata();
            durataInterval = setInterval(paintDurata, 1000);
        }
        function resetDurataLocal(){
            // azzera tutte le chiavi e UI
            localStorage.removeItem(LS_START);
            localStorage.removeItem(LS_PAUSE_AT);
            localStorage.setItem(LS_PAUSE_ACC, "0");
            localStorage.setItem(LS_PAUSE_ACTIVE, "false");
            if (durataInterval) { clearInterval(durataInterval); durataInterval = null; }
            const out = document.getElementById('durata-asta');
            const badge = document.getElementById('stato-pausa');
            if (out) out.textContent = '00:00';
            if (badge) badge.classList.add('d-none');
        }

        // ====== UTILS ======
        function submitFormDebounced(){
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(()=>{ document.getElementById("filtroForm").submit(); }, 500);
        }
        async function impostaTimer(e){
            e.preventDefault();
            const s = parseInt(document.getElementById('secondiTimer').value || "0");
            fetch('/Admin/ImpostaTimer',{
                method:'POST',
                headers:{'Content-Type':'application/json'},
                body:JSON.stringify({ secondi:s })
            }).then(async r=>{
                if(r.ok){ durataTimer=s; await mostraMessaggio('Timer Aggiornato', 'Timer aggiornato a '+s+' secondi!'); }
                else { await mostraMessaggio('Errore','Errore aggiornamento timer.'); }
            });
        }
        async function annullaAsta(){
            if (await mostraMessaggio('Annulla Asta','Sei sicuro?', true)){
                fetch('/Admin/AnnullaAsta',{
                    method:'POST',
                    headers:{ 'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value }
                }).then(r=>{
                    if(!r.ok) mostraMessaggio('Errore','Errore annullamento.');
                });
            }
        }
        async function salvaAssegnazione(){
            const payload = {
                giocatoreId: parseInt(document.getElementById('idGiocatoreModale').value),
                squadraId: parseInt(document.getElementById('squadraSelect').value),
                costo: parseInt(document.getElementById('costoInput').value)
            };
            fetch('/Admin/AssegnaManualmente',{
                method:'POST',
                headers:{
                    'Content-Type':'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(payload)
            }).then(async r=>{
                if(r.ok){ location.reload(); }
                else { await mostraMessaggio('Errore','Errore assegnazione.'); }
            });
        }
        function toggleLista(id){
            const el=document.getElementById(id);
            if(el) el.classList.toggle('d-none');
        }
        function apriModaleSvincolo(btn){
            const id=btn.dataset.id, nome=btn.dataset.nome, costo=parseInt(btn.dataset.costo)||0, squadra=btn.dataset.squadra, logo=btn.dataset.logo, ruolo=btn.dataset.ruolo;
            document.getElementById('idGiocatoreSvincola').value=id;
            document.getElementById('costoOriginaleSvincolo').innerText=costo;
            const input=document.getElementById('creditiSvincoloInput'); input.min=0; input.max=costo; input.value=costo;
            document.getElementById('logoGiocatoreSvincola').src=logo;
            document.getElementById('nomeGiocatoreSvincolo').innerText=nome;
            document.getElementById('dettagliGiocatoreSvincolo').innerText=`Ruolo: ${ruolo} - Squadra: ${squadra}`;
            new bootstrap.Modal(document.getElementById('svincolaModal')).show();
        }

        // ====== LETTERE: funzioni UI globali ======
        function applyInitialFilter(letter) {
          const inizialeInput = document.getElementById('inizialeInput');
          const nomeInput = document.getElementById('nomeFilterInput');
          const squadraInput = document.getElementById('squadraFilterInput');

          if (sorteggioInput) sorteggioInput.value = 'true'; // ← preserva lo switch ON
          if (inizialeInput) inizialeInput.value = letter || '';
          if (nomeInput) nomeInput.value = '';
          if (squadraInput) squadraInput.value = '';

          document.getElementById('filtroForm').submit();
        }

        function renderLettersChips() {
            const cont = document.getElementById('lettersChips');
            if (!cont) return;
            const archived = getArchivedLetters();
            const selected = (new URLSearchParams(window.location.search).get('iniziale') || '').toUpperCase();

            cont.innerHTML = '';
            ALPH.forEach(l => {
                const btn = document.createElement('button');
                btn.type = 'button';
                btn.className = 'letter-chip btn btn-sm';
                if (archived.includes(l)) btn.classList.add('letter-archived');
                if (selected === l) btn.classList.add('letter-selected');
                btn.textContent = l;
                btn.title = archived.includes(l)
                    ? 'Lettera estratta (clic per renderla disponibile)'
                    : 'Filtra per ' + l;

                btn.addEventListener('click', () => {
                    if (archived.includes(l)) {
                        setArchivedLetters(archived.filter(x => x !== l));
                    }
                    applyInitialFilter(l);
                });

                cont.appendChild(btn);
            });
        }

        // ====== DOM READY ======
        document.addEventListener('DOMContentLoaded', function(){
            const squadre = JSON.parse('@Html.Raw(squadreJson)');
            const antiToken = document.querySelector('input[name="__RequestVerificationToken"]')?.value;
            const connection = new signalR.HubConnectionBuilder().withUrl("/bazzerHub").build();

            // filtri
            const urlParams = new URLSearchParams(window.location.search);
            const nomeFilter = document.getElementById('nomeFilterInput');
            if (urlParams.has('nome') && urlParams.get('nome') !== '' && nomeFilter){
                nomeFilter.focus(); const v=nomeFilter.value; nomeFilter.value=''; nomeFilter.value=v;
            }
            const squadraFilter = document.getElementById('squadraFilterInput');

            // quando si digita nei campi, azzera "iniziale" per evitare conflitti
            nomeFilter?.addEventListener('input', () => {
                const inizialeInput = document.getElementById('inizialeInput');
                if (inizialeInput) inizialeInput.value = '';
                submitFormDebounced();
            });
            squadraFilter?.addEventListener('input', () => {
                const inizialeInput = document.getElementById('inizialeInput');
                if (inizialeInput) inizialeInput.value = '';
                submitFormDebounced();
            });

            // ====== FIX: toggle liste svincolo robusto (niente ID con nickname) ======
            document
                .querySelectorAll('table.table-bordered.table-sm button.btn.btn-sm.btn-secondary')
                .forEach(btn=>{
                    if (btn.getAttribute('onclick')?.includes('toggleLista(')) {
                        btn.removeAttribute('onclick');
                    }
                    btn.addEventListener('click', (ev)=>{
                        ev.preventDefault();
                        ev.stopPropagation();
                        const td = btn.closest('td');
                        const ul = td?.querySelector('ul');
                        if (ul) ul.classList.toggle('d-none');
                    });
                });

                        // Avvia Asta (POST esplicita + antiforgery + urlencoded)
        document.querySelectorAll('.btn-avvia-asta').forEach(btn => {
          btn.addEventListener('click', () => {
            const id = btn.dataset.id;
            const mantra = btn.dataset.mantra === 'true';
            const body = `id=${encodeURIComponent(id)}&mantra=${mantra}`;
            fetch('/Admin/AvviaAsta', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
              },
              body
            }).then(async r => {
              if (!r.ok) {
                const t = await r.text().catch(() => '-');
                console.error('AvviaAsta fallita', r.status, t);
                await mostraMessaggio('Errore', 'Errore avvio asta.');
              }
              // Se il server emette subito MostraGiocatoreInAsta non serve altro qui.
            }).catch(err => {
              console.error('AvviaAsta errore:', err);
              mostraMessaggio('Errore', 'Impossibile avviare l’asta.');
            });
          });
        });


            // ====== LETTERE: UI & actions ======
            renderLettersChips();

            document.getElementById('btnSorteggiaLettera')?.addEventListener('click', () => {
                const archived = getArchivedLetters();
                const pool = ALPH.filter(l => !archived.includes(l));
                if (pool.length === 0) {
                    mostraMessaggio('Sorteggio lettera', 'Tutte le lettere sono già state estratte. Premi "Reset lettere" o riabilita una singola lettera cliccando il chip barrato.');
                    return;
                }
                const letter = pool[Math.floor(Math.random() * pool.length)];
                setArchivedLetters([...archived, letter]);   // archivia quella estratta
                applyInitialFilter(letter);                  // filtra subito
            });

        document.getElementById('btnResetLettere')?.addEventListener('click', () => {
          setArchivedLetters([]);
          const inizialeInput = document.getElementById('inizialeInput');
          if (inizialeInput) inizialeInput.value = '';
          // NON tocchiamo sorteggioInput: resta com’è (se era ON, resta ON)
          document.getElementById('filtroForm').submit();
        });



            // ====== SIGNALR ======
            connection.on("StatoAsta", (stato)=>{
                if (stato?.startUtc) {
                    localStorage.setItem(LS_START, stato.startUtc);
                } else {
                    if (!localStorage.getItem(LS_START)) { /* resta 00:00 finché parte qualcosa */ }
                }
                if (typeof stato?.pausaAccumulataSec === 'number') {
                    localStorage.setItem(LS_PAUSE_ACC, String(stato.pausaAccumulataSec));
                } else if (!localStorage.getItem(LS_PAUSE_ACC)) {
                    localStorage.setItem(LS_PAUSE_ACC, "0");
                }

                const pauseActive = !!stato?.pausaAttiva;
                localStorage.setItem(LS_PAUSE_ACTIVE, pauseActive ? "true" : "false");
                if (pauseActive) {
                    if (!localStorage.getItem(LS_PAUSE_AT)) {
                        localStorage.setItem(LS_PAUSE_AT, new Date().toISOString());
                    }
                    document.getElementById('btn-pausa').disabled = true;
                    document.getElementById('btn-riprendi').disabled = false;
                } else {
                    localStorage.removeItem(LS_PAUSE_AT);
                    document.getElementById('btn-pausa').disabled = false;
                    document.getElementById('btn-riprendi').disabled = true;
                }

                startDurataLoop();
            });

            connection.on("MostraGiocatoreInAsta",(giocatore)=>{
                if (!localStorage.getItem(LS_START)) {
                    localStorage.setItem(LS_START, new Date().toISOString());
                    localStorage.setItem(LS_PAUSE_ACC, "0");
                    localStorage.setItem(LS_PAUSE_ACTIVE, "false");
                    localStorage.removeItem(LS_PAUSE_AT);
                    startDurataLoop();
                }

                document.getElementById('overlay-nome-giocatore').innerText = giocatore.nome;
                document.getElementById('overlay-dettagli-giocatore').innerText = `${giocatore.ruolo} - ${giocatore.squadraReale}`;
                document.getElementById('overlay-logo-squadra').src = giocatore.logoUrl;
                document.getElementById('overlay-offerta').innerText = '0';
                document.getElementById('overlay-offerente').innerText = 'In attesa di offerte...';
                document.getElementById('overlay-offerente').style.color = '';
                document.getElementById('overlay-log').innerHTML = '';
                const timerEl = document.getElementById('overlay-timer');
                timerEl.innerText = '--';
                timerEl.classList.remove('timer-green','timer-yellow','timer-red');
                document.querySelector('.asta-box-footer').style.display = 'block';
                document.getElementById('asta-overlay').classList.add('visible');

                lastOffertaAdmin = 0;
                clearInterval(countdownTimerAdmin);
                clearTimeout(closeTimeoutAdmin);
                closeTimeoutAdmin = null;
            });

            connection.on("AggiornaOfferta",(offerente, offerta, fineUtc)=>{
                const offerenteEl = document.getElementById('overlay-offerente'); if (offerenteEl) offerenteEl.innerText = offerente || '-';
                const offertaEl = document.getElementById('overlay-offerta'); if (offertaEl) offertaEl.innerText = offerta || 0;

                clearInterval(countdownTimerAdmin);
                clearTimeout(closeTimeoutAdmin);
                closeTimeoutAdmin = null;

                const timerEl = document.getElementById('overlay-timer');
                if (!fineUtc || !offerta || offerta <= 0){
                    timerEl.innerText='--';
                    timerEl.classList.remove('timer-green','timer-yellow','timer-red');
                    lastOffertaAdmin = offerta || 0;
                    return;
                }

                const isRealBid = (offerta > (lastOffertaAdmin||0));
                if (isRealBid){
                    document.getElementById('suono-offerta').play();
                    const logContainer = document.getElementById('overlay-log');
                    if (logContainer){ const p=document.createElement('p'); p.innerText=`${offerente} offre ${offerta}`; logContainer.prepend(p); }
                }
                lastOffertaAdmin = offerta;

                const end = new Date(fineUtc);
                const paint = (sec)=>{
                    timerEl.innerText = sec >= 0 ? sec : 0;
                    timerEl.classList.remove('timer-green','timer-yellow','timer-red');
                    if (sec>5) timerEl.classList.add('timer-green');
                    else if (sec>=4) timerEl.classList.add('timer-yellow');
                    else timerEl.classList.add('timer-red');
                };
                const tick = ()=>{
                    const sec = Math.ceil((end.getTime() - Date.now())/1000);
                    paint(sec);
                    if (sec >= 0){
                        const beep=document.getElementById('suono-countdown');
                        beep.currentTime=0; beep.play();
                    } else {
                        clearInterval(countdownTimerAdmin);
                    }
                };
                tick();
                countdownTimerAdmin = setInterval(tick, 1000);

                const msRemaining = end.getTime() - Date.now();
                if (msRemaining > 0){
                    closeTimeoutAdmin = setTimeout(()=>{
                        connection.invoke("TerminaAsta", legaAliasAdmin).catch(err=>console.error(err.toString()));
                    }, msRemaining + 50);
                } else {
                    connection.invoke("TerminaAsta", legaAliasAdmin).catch(err=>console.error(err.toString()));
                }
            });

            connection.on("AstaTerminata", (giocatoreId, nomeGiocatore, vincitore, prezzo) => {
                clearInterval(countdownTimerAdmin);
                clearTimeout(closeTimeoutAdmin);
                closeTimeoutAdmin = null;

                document.getElementById('suono-vittoria').play();

                const offerenteEl = document.getElementById('overlay-offerente');
                if (offerenteEl) {
                    offerenteEl.innerText = `AGGIUDICATO a ${vincitore} per ${prezzo} crediti!`;
                    offerenteEl.style.color = '#2ecc71';
                }

                const offertaEl = document.getElementById('overlay-offerta');
                if (offertaEl) offertaEl.innerText = prezzo || 0;

                const logContainer = document.getElementById('overlay-log');
                if (logContainer) {
                    const ts = new Date().toLocaleTimeString();
                    const row = document.createElement('p');
                    row.innerText = `[${ts}] ${nomeGiocatore} → ${vincitore} (${prezzo} crediti)`;
                    logContainer.prepend(row);
                }

                const footer = document.querySelector('.asta-box-footer');
                if (footer) footer.style.display = 'none';

                setTimeout(() => {
                    document.getElementById('asta-overlay').classList.remove('visible');
                    setTimeout(() => location.reload(), 300);
                }, 4000);
            });

            connection.on("AstaAnnullata",()=>{
                clearInterval(countdownTimerAdmin);
                clearTimeout(closeTimeoutAdmin);
                closeTimeoutAdmin = null;
                document.getElementById('asta-overlay').classList.remove('visible');
            });

            connection.on("StatoPartecipanti",(p)=>{
                if(p?.partecipanti) paintPartecipanti(p.partecipanti);
            });

            // ► PAUSA / RIPRESA
            connection.on("AstaPausa",()=>{
                localStorage.setItem(LS_PAUSE_ACTIVE,"true");
                localStorage.setItem(LS_PAUSE_AT, new Date().toISOString());
                document.getElementById('btn-pausa').disabled = true;
                document.getElementById('btn-riprendi').disabled = false;
                paintDurata();
            });
            connection.on("AstaRipresa",()=>{
                const pauseAtIso = localStorage.getItem(LS_PAUSE_AT);
                const acc = parseInt(localStorage.getItem(LS_PAUSE_ACC)||"0");
                if (pauseAtIso){
                    const delta=Math.max(0, Math.floor((Date.now()-new Date(pauseAtIso).getTime())/1000));
                    localStorage.setItem(LS_PAUSE_ACC, String(acc+delta));
                }
                localStorage.setItem(LS_PAUSE_ACTIVE,"false");
                localStorage.removeItem(LS_PAUSE_AT);
                document.getElementById('btn-pausa').disabled = false;
                document.getElementById('btn-riprendi').disabled = true;
                paintDurata();
            });

            // ► RESET (broadcast)
            connection.on("DurataResettata", ()=>{
                resetDurataLocal();
            });

            connection.on("GiocatoreSuggerito",(giocatore, suggeritore)=>{
                mostraMessaggio("Suggerimento Ricevuto", `${suggeritore} ha suggerito: ${giocatore.nome}`);
                const inputNome = document.querySelector('#filtroForm input[name="nome"]');
                if (inputNome){ inputNome.value = giocatore.nome; document.getElementById('filtroForm').submit(); }
            });

            // CONNESSIONE
            connection.start().then(()=>{
                connection.invoke("RegistratiAllaLega", legaAliasAdmin, adminNick, true).catch(()=>{});
                setInterval(()=>{ connection.invoke("Ping", legaAliasAdmin, adminNick).catch(()=>{}); }, 20000);

                connection.invoke("AggiungiAdminAlGruppo", legaAliasAdmin);
                connection.invoke("RichiediStatoAttuale");
            }).catch(err=>console.error(err));

            // UI events
            const squadreArr = JSON.parse('@Html.Raw(squadreJson)');
            document.querySelectorAll('.btn-assegna').forEach(btn=>{
                btn.addEventListener('click', function(){
                    document.getElementById('idGiocatoreModale').value = this.dataset.id;
                    document.getElementById('nomeGiocatoreModale').innerText = this.dataset.nome;
                    const sel = document.getElementById('squadraSelect'); sel.innerHTML='';
                    squadreArr.forEach(s=>{
                        const o=document.createElement('option'); o.value=s.SquadraId; o.innerText=s.Nickname; sel.appendChild(o);
                    });
                    new bootstrap.Modal(document.getElementById('assegnaModal')).show();
                });
            });

            document.getElementById('btnConfermaSvincolo')?.addEventListener('click', function(){
                const id = parseInt(document.getElementById('idGiocatoreSvincola').value);
                const costoOriginale = parseInt(document.getElementById('costoOriginaleSvincolo').innerText);
                let crediti = parseInt(document.getElementById('creditiSvincoloInput').value);
                if (isNaN(crediti)||crediti<0) crediti=0;
                if (!isNaN(costoOriginale) && crediti > costoOriginale) crediti = costoOriginale;
                fetch('/Admin/SvincolaGiocatore',{
                    method:'POST',
                    headers:{ 'Content-Type':'application/json' },
                    body: JSON.stringify({ id, creditiRestituiti: crediti })
                }).then(r=>{
                    if(r.ok){ location.reload(); }
                    else { mostraMessaggio("Errore","Errore durante lo svincolo."); }
                });
            });

            document.getElementById('formTimer')?.addEventListener('submit', impostaTimer);
            document.getElementById('bloccoPortieriSwitch')?.addEventListener('change', async function(){
                const isAttivo = this.checked;
                fetch('/Admin/ImpostaBloccoPortieri',{
                    method:'POST',
                    headers:{ 'Content-Type':'application/json' },
                    body: JSON.stringify({ attivo:isAttivo })
                }).then(async r=>{
                    if(r.ok) await mostraMessaggio('Regola Aggiornata','Blocco Portieri '+(isAttivo?'ATTIVATO':'DISATTIVATO'));
                    else await mostraMessaggio('Errore','Errore aggiornamento regola.');
                });
            });
            document.getElementById('mantraSwitch')?.addEventListener('change', function(){
                const isAttivo=this.checked;
                const url=new URL(window.location.href);
                url.searchParams.set('mantra', isAttivo);
                window.location.href=url.toString();
            });

        document.getElementById('sorteggioSwitch')?.addEventListener('change', function () {
          const isAttivo = this.checked;
          if (sorteggioInput) sorteggioInput.value = isAttivo ? 'true' : 'false';

          const url = new URL(window.location.href);
          url.searchParams.set('sorteggio', isAttivo);
          if (!isAttivo) {
            // se lo disattivo tolgo anche l’eventuale filtro lettera
            url.searchParams.delete('iniziale');
          }
          window.location.href = url.toString();
        });



            // Pausa/Riprendi
            document.getElementById('btn-pausa')?.addEventListener('click', ()=>{
                connection.invoke("PausaAsta", legaAliasAdmin).catch(()=>{});
            });
            document.getElementById('btn-riprendi')?.addEventListener('click', ()=>{
                connection.invoke("RiprendiAsta", legaAliasAdmin).catch(()=>{});
            });

            // ✅ Reset timer (locale + broadcast)
            document.getElementById('btn-reset')?.addEventListener('click', async ()=>{
                resetDurataLocal(); // effetto immediato locale
                try { await connection.invoke("ResetDurataAsta", legaAliasAdmin); } catch {}
            });

            // helper paint partecipanti
            window.paintPartecipanti = function(list){
                list.forEach(p=>{
                    const nick = (p.nick||p.Nick||'').toString();
                    const el = document.querySelector(`.status-dot[data-nick="${CSS.escape(nick)}"]`) ||
                               document.querySelector(`.status-dot[title="${CSS.escape(nick)}"]`);
                    if (!el) return;
                    el.classList.remove('dot-online','dot-offline','dot-waiting');
                    const stato = (p.stato||p.Stato||'offline').toLowerCase();
                    if (stato==='waiting') el.classList.add('dot-waiting');
                    else if (stato==='online') el.classList.add('dot-online');
                    else el.classList.add('dot-offline');
                });
            }
        });
    </script>
}
