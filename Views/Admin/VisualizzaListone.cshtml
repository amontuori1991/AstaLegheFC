@using System.Text.Json
@model List<AstaLegheFC.Models.CalciatoreListone>
@{
    ViewData["Title"] = "Listone Calciatori";
    var riepilogo = ViewBag.RiepilogoSquadre as List<AstaLegheFC.Models.ViewModels.SquadraRiepilogoViewModel> ?? new List<AstaLegheFC.Models.ViewModels.SquadraRiepilogoViewModel>();
    var squadreJson = JsonSerializer.Serialize(riepilogo.Select(s => new { s.SquadraId, s.Nickname }));
}

<style>
    #overlay-timer {
        font-size: 3.5rem; /* Metà dei 7rem dell'offerta */
        font-weight: 700;
        line-height: 1;
        margin: 0;
        transition: color 0.3s ease-in-out; /* Effetto di transizione per il cambio colore */
    }

    .timer-green {
        color: #2ecc71; /* Verde */
    }

    .timer-yellow {
        color: #f1c40f; /* Giallo (lo stesso dell'offerta) */
    }

    .timer-red {
        color: #e74c3c; /* Rosso */
    }

    #asta-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.9);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050;
        color: white;
        text-align: center;
        font-family: 'Montserrat', sans-serif;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease, visibility 0.3s ease;
    }

    .player-row {
        display: flex;
        align-items: center;
        padding: 6px 0;
    }

        .player-row:not(:last-child) {
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

    .player-name {
        text-align: left;
        margin-right: auto;
        padding-right: 10px;
    }

    .player-logo {
        height: 22px;
        margin: 0 10px;
        flex-shrink: 0;
    }

    .player-credits {
        text-align: center;
        min-width: 40px;
        padding: 0 10px;
        flex-shrink: 0;
    }

    .player-action {
        text-align: right;
        flex-shrink: 0;
    }

    .player-mantra {
        color: #0dcaf0;
        font-style: italic;
        font-size: 0.9em;
        margin-right: 8px;
        flex-shrink: 0;
    }

    #asta-overlay.visible {
        opacity: 1;
        visibility: visible;
    }

    .asta-box {
        background: linear-gradient(145deg, #34495e, #2c3e50);
        padding: 40px;
        border-radius: 20px;
        box-shadow: 0 15px 35px rgba(0,0,0,0.6);
        border: 1px solid #3498db;
        min-width: 650px;
        transform: scale(0.95);
        transition: transform 0.3s ease;
    }

    #asta-overlay.visible .asta-box {
        transform: scale(1);
    }

    .asta-box-header {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        margin-bottom: 10px;
    }

    #overlay-logo-squadra {
        height: 90px;
        filter: drop-shadow(0 0 10px rgba(255,255,255,0.2));
    }

    #overlay-nome-giocatore {
        font-size: 3.5rem;
        font-weight: 700;
        text-transform: uppercase;
        margin: 0;
        text-shadow: 0 0 15px rgba(0,0,0,0.5);
        color: white;
    }

    #overlay-dettagli-giocatore {
        font-size: 1.5rem;
        color: #95a5a6;
        margin-top: 0;
    }

    #overlay-offerta {
        font-size: 7rem;
        font-weight: 700;
        margin: 20px 0;
        line-height: 1;
        text-shadow: 0 0 20px rgba(241, 196, 15, 0.5);
        color: #f1c40f !important;
    }

    #overlay-offerente {
        font-size: 2.2rem;
        font-weight: 300;
        color: white;
    }

    #overlay-log {
        margin-top: 20px;
        max-height: 150px;
        overflow-y: auto;
        text-align: left;
        font-family: monospace;
        background-color: rgba(0,0,0,0.3);
        border-radius: 5px;
        padding: 10px;
    }

        #overlay-log p {
            margin: 2px 0;
            border-bottom: 1px solid #34495e;
            padding-bottom: 2px;
        }

    .asta-box-footer {
        margin-top: 30px;
    }
</style>

<h2 class="mt-3">Listone Calciatori</h2>

@if (riepilogo != null && riepilogo.Any())
{
    <h4 class="mt-4">Riepilogo Squadre</h4>
    <div class="table-responsive mb-4">
        <table class="table table-bordered table-sm text-center align-middle">
            <thead class="table-primary">
                <tr>
                    <th>Nickname</th>
                    <th>Crediti</th>
                    <th>Puntata Max</th>
                    <th>P</th>
                    <th>D</th>
                    <th>C</th>
                    <th>A</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var s in riepilogo)
                {
                    <tr>
                        <td>@s.Nickname</td>
                        <td>@s.CreditiDisponibili</td>
                        <td>@s.PuntataMassima</td>
                        <td>
                            <button class="btn btn-sm btn-secondary" type="button" onclick="toggleLista('portieri-@s.Nickname')">@s.PortieriAssegnati.Count +/-</button>
                            <ul id="portieri-@s.Nickname" class="mt-2 d-none list-unstyled small text-start">
                                @foreach (var g in s.PortieriAssegnati)
                                {
                                    <li class="player-row">
                                        <span class="player-name">@g.Nome</span>
                                        @if (ViewBag.MantraAttivo)
                                        {
                                            <span class="player-mantra">@g.RuoloMantra</span>
                                        }
                                        <img src="@g.LogoUrl" alt="@g.SquadraReale" class="player-logo" />
                                        <span class="player-credits">(@g.CreditiSpesi)</span>
                                        <span class="player-action">
                                            <button class="btn btn-danger btn-sm btn-svincola" data-id="@g.Id" data-nome="@g.Nome" data-costo="@g.CreditiSpesi" data-squadra="@g.SquadraReale" data-logo="@g.LogoUrl" data-ruolo="@g.Ruolo" onclick="apriModaleSvincolo(this)">SVINCOLA</button>
                                        </span>
                                    </li>
                                }
                            </ul>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-secondary" type="button" onclick="toggleLista('difensori-@s.Nickname')">@s.DifensoriAssegnati.Count +/-</button>
                            <ul id="difensori-@s.Nickname" class="mt-2 d-none list-unstyled small text-start">
                                @foreach (var g in s.DifensoriAssegnati)
                                {
                                    <li class="player-row">
                                        <span class="player-name">@g.Nome</span>
                                        @if (ViewBag.MantraAttivo)
                                        {
                                            <span class="player-mantra">@g.RuoloMantra</span>
                                        }
                                        <img src="@g.LogoUrl" alt="@g.SquadraReale" class="player-logo" />
                                        <span class="player-credits">(@g.CreditiSpesi)</span>
                                        <span class="player-action">
                                            <button class="btn btn-danger btn-sm btn-svincola" data-id="@g.Id" data-nome="@g.Nome" data-costo="@g.CreditiSpesi" data-squadra="@g.SquadraReale" data-logo="@g.LogoUrl" data-ruolo="@g.Ruolo" onclick="apriModaleSvincolo(this)">SVINCOLA</button>
                                        </span>
                                    </li>
                                }
                            </ul>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-secondary" type="button" onclick="toggleLista('centro-@s.Nickname')">@s.CentrocampistiAssegnati.Count +/-</button>
                            <ul id="centro-@s.Nickname" class="mt-2 d-none list-unstyled small text-start">
                                @foreach (var g in s.CentrocampistiAssegnati)
                                {
                                    <li class="player-row">
                                        <span class="player-name">@g.Nome</span>
                                        @if (ViewBag.MantraAttivo)
                                        {
                                            <span class="player-mantra">@g.RuoloMantra</span>
                                        }
                                        <img src="@g.LogoUrl" alt="@g.SquadraReale" class="player-logo" />
                                        <span class="player-credits">(@g.CreditiSpesi)</span>
                                        <span class="player-action">
                                            <button class="btn btn-danger btn-sm btn-svincola" data-id="@g.Id" data-nome="@g.Nome" data-costo="@g.CreditiSpesi" data-squadra="@g.SquadraReale" data-logo="@g.LogoUrl" data-ruolo="@g.Ruolo" onclick="apriModaleSvincolo(this)">SVINCOLA</button>
                                        </span>
                                    </li>
                                }
                            </ul>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-secondary" type="button" onclick="toggleLista('attaccanti-@s.Nickname')">@s.AttaccantiAssegnati.Count +/-</button>
                            <ul id="attaccanti-@s.Nickname" class="mt-2 d-none list-unstyled small text-start">
                                @foreach (var g in s.AttaccantiAssegnati)
                                {
                                    <li class="player-row">
                                        <span class="player-name">@g.Nome</span>
                                        @if (ViewBag.MantraAttivo)
                                        {
                                            <span class="player-mantra">@g.RuoloMantra</span>
                                        }
                                        <img src="@g.LogoUrl" alt="@g.SquadraReale" class="player-logo" />
                                        <span class="player-credits">(@g.CreditiSpesi)</span>
                                        <span class="player-action">
                                            <button class="btn btn-danger btn-sm btn-svincola" data-id="@g.Id" data-nome="@g.Nome" data-costo="@g.CreditiSpesi" data-squadra="@g.SquadraReale" data-logo="@g.LogoUrl" data-ruolo="@g.Ruolo" onclick="apriModaleSvincolo(this)">SVINCOLA</button>
                                        </span>
                                    </li>
                                }
                            </ul>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<form id="filtroForm" method="get" asp-action="VisualizzaListone" class="row g-2 mb-4">
    <input type="hidden" name="lega" value="@ViewBag.LegaAlias" />
    <div class="col-md-4">
        <input type="text" name="nome" id="nomeFilterInput" class="form-control" placeholder="Cerca per nome" value="@ViewBag.Nome" />
    </div>
    <div class="col-md-4">
        <input type="text" name="squadra" id="squadraFilterInput" class="form-control" placeholder="Cerca per squadra" value="@ViewBag.Squadra" />
    </div>
    <div class="col-md-4">
        <select name="ruolo" class="form-select" onchange="this.form.submit()">
            <option value="">Tutti i ruoli</option>
            @foreach (var r in (List<string>)ViewBag.RuoliDisponibili)
            {
                <option value="@r" selected="@(ViewBag.Ruolo == r)">@r</option>
            }
        </select>
    </div>
</form>

<div class="row mb-3 align-items-center">
    <div class="col-md-4">
        <form id="formTimer" class="d-flex" onsubmit="impostaTimer(event)">
            <input type="number" class="form-control me-2" id="secondiTimer" value="5" min="2" placeholder="Secondi Timer" />
            <button type="submit" class="btn btn-secondary">Imposta Timer</button>
        </form>
    </div>
    <div class="col-md-4">
        <div class="form-check form-switch fs-5">
            <input class="form-check-input" type="checkbox" role="switch" id="bloccoPortieriSwitch" @(ViewBag.BloccoPortieriAttivo ? "checked" : "")>
            <label class="form-check-label" for="bloccoPortieriSwitch">Blocco Portieri</label>
        </div>
    </div>
    <div class="col-md-4">
        <div class="form-check form-switch fs-5">
            <input class="form-check-input" type="checkbox" role="switch" id="mantraSwitch" @(ViewBag.MantraAttivo ? "checked" : "")>
            <label class="form-check-label" for="mantraSwitch">Mantra</label>
        </div>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-striped table-bordered table-hover">
        <thead class="table-dark text-center">
            <tr>
                <th>Nome</th>
                <th>Ruolo</th>
                <th>Squadra</th>
                <th>Azioni</th>
            </tr>
        </thead>
        <tbody class="text-center">
            @foreach (var c in Model)
            {
                <tr id="riga-giocatore-@c.Id">
                    <td class="text-start">@c.Nome</td>
                    <td>@(ViewBag.MantraAttivo? c.RuoloMantra: c.Ruolo)</td>
                    <td class="text-start">@c.Squadra</td>
                    <td>
                        <form asp-action="AvviaAsta" method="post" style="display:inline;" class="form-avvia-asta">
                            <input type="hidden" name="id" value="@c.Id" />

                            <input type="hidden" name="mantra" value="@ViewBag.MantraAttivo.ToString().ToLower()" />

                            <button type="submit" class="btn btn-success btn-sm">Asta</button>
                        </form>
                        <button class="btn btn-warning btn-sm btn-assegna"
                                data-id="@c.Id"
                                data-nome="@c.Nome">
                            Assegna
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="modal fade" id="assegnaModal" tabindex="-1" aria-labelledby="assegnaModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="assegnaModalLabel">Assegna Giocatore</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Stai assegnando: <strong id="nomeGiocatoreModale"></strong></p>
                <input type="hidden" id="idGiocatoreModale" />
                <div class="mb-3">
                    <label for="squadraSelect" class="form-label">Assegna a:</label>
                    <select id="squadraSelect" class="form-select"></select>
                </div>
                <div class="mb-3">
                    <label for="costoInput" class="form-label">Costo:</label>
                    <input type="number" id="costoInput" class="form-control" value="1" min="1" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-primary" onclick="salvaAssegnazione()">Salva Assegnazione</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="svincolaModal" tabindex="-1" aria-labelledby="svincolaModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="svincolaModalLabel">Svincola Giocatore</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <img id="logoGiocatoreSvincola" src="" alt="Logo Squadra" class="d-block mx-auto mb-3" style="height: 70px;" />
                <p class="mb-0 fs-4" id="nomeGiocatoreSvincolo"></p>
                <p class="text-muted" id="dettagliGiocatoreSvincolo"></p>
                <hr />
                <input type="hidden" id="idGiocatoreSvincola" />
                <div class="mb-3 text-start">
                    <label for="creditiSvincoloInput" class="form-label">Crediti da restituire (costo originale: <span id="costoOriginaleSvincolo"></span>):</label>
                    <input type="number" id="creditiSvincoloInput" class="form-control" value="1" min="0" />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-primary" id="btnConfermaSvincolo">Conferma Svincolo</button>
            </div>
        </div>
    </div>
</div>

<div id="asta-overlay">
    <div class="asta-box">
        <div class="asta-box-header">
            <img id="overlay-logo-squadra" src="" alt="Logo Squadra" />
            <div>
                <h2 id="overlay-nome-giocatore">NOME GIOCATORE</h2>
                <p id="overlay-dettagli-giocatore">Ruolo - Squadra</p>
            </div>
        </div>
        <h1 id="overlay-timer" class="mb-2">--</h1>
        <h1 id="overlay-offerta">0</h1>
        <h3 id="overlay-offerente">In attesa di offerte...</h3>
        <div id="overlay-log"></div>
        <div class="asta-box-footer">
            <button class="btn btn-danger" onclick="annullaAsta()">Annulla Asta</button>
        </div>
    </div>
</div>

<audio id="suono-offerta" src="~/sounds/coin.mp3" preload="auto"></audio>
<audio id="suono-countdown" src="~/sounds/beep.mp3" preload="auto"></audio>
<audio id="suono-vittoria" src="~/sounds/gavel.mp3" preload="auto"></audio>
@section Scripts {
    @Html.AntiForgeryToken()
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>

    <script>
        // ===================================================================================
        // VARIABILI GLOBALI
        // ===================================================================================
        let debounceTimer;
        let durataTimer = @ViewBag.DurataTimer;

        // Countdown (visuale) e timeout (colpo di martello) lato ADMIN
        let countdownTimerAdmin = null;
        let closeTimeoutAdmin = null;

        // 🔔 Traccia l'ultima offerta per evitare il suono su sync/avvio
        let lastOffertaAdmin = 0;

        function submitFormDebounced() {
            clearTimeout(debounceTimer);
            debounceTimer = setTimeout(() => { document.getElementById("filtroForm").submit(); }, 500);
        }

        async function impostaTimer(event) {
            event.preventDefault();
            const secondi = document.getElementById('secondiTimer').value;
            fetch('/Admin/ImpostaTimer', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ secondi: parseInt(secondi) })
            }).then(async response => {
                if (response.ok) {
                    durataTimer = parseInt(secondi);
                    await mostraMessaggio('Timer Aggiornato', 'Timer aggiornato a ' + secondi + ' secondi!');
                } else {
                    await mostraMessaggio('Errore', 'Errore aggiornamento timer.');
                }
            });
        }

        async function annullaAsta() {
            if (typeof mostraMessaggio === 'function' && await mostraMessaggio('Annulla Asta', 'Sei sicuro di voler annullare l\'asta in corso per tutti i partecipanti?', true)) {
                fetch('/Admin/AnnullaAsta', {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                }).then(response => {
                    if (!response.ok) {
                        mostraMessaggio("Errore", "Si è verificato un errore durante l'annullamento dell'asta.");
                    }
                });
            }
        }

        async function salvaAssegnazione() {
            const payload = {
                giocatoreId: parseInt(document.getElementById('idGiocatoreModale').value),
                squadraId: parseInt(document.getElementById('squadraSelect').value),
                costo: parseInt(document.getElementById('costoInput').value)
            };
            fetch('/Admin/AssegnaManualmente', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(payload)
            }).then(async response => {
                if (response.ok) {
                    location.reload();
                } else {
                    await mostraMessaggio('Errore', 'Si è verificato un errore durante l\'assegnazione manuale.');
                }
            });
        }

        function toggleLista(id) {
            const lista = document.getElementById(id);
            if (lista) lista.classList.toggle("d-none");
        }

        function apriModaleSvincolo(btn) {
            const giocatoreId = btn.dataset.id;
            const giocatoreNome = btn.dataset.nome;
            let giocatoreCosto = parseInt(btn.dataset.costo);
            if (isNaN(giocatoreCosto) || giocatoreCosto < 0) giocatoreCosto = 0;
            const giocatoreSquadra = btn.dataset.squadra;
            const logoUrl = btn.dataset.logo;
            const giocatoreRuolo = btn.dataset.ruolo;

            document.getElementById('idGiocatoreSvincola').value = giocatoreId;
            document.getElementById('costoOriginaleSvincolo').innerText = giocatoreCosto;

            const input = document.getElementById('creditiSvincoloInput');
            input.min = 0;
            input.max = giocatoreCosto;
            input.value = giocatoreCosto;

            document.getElementById('logoGiocatoreSvincola').src = logoUrl;
            document.getElementById('nomeGiocatoreSvincolo').innerText = giocatoreNome;
            document.getElementById('dettagliGiocatoreSvincolo').innerText = `Ruolo: ${giocatoreRuolo} - Squadra: ${giocatoreSquadra}`;

            const svincolaModal = new bootstrap.Modal(document.getElementById('svincolaModal'));
            svincolaModal.show();
        }

        // ===================================================================================
        // DOMContentLoaded: setup
        // ===================================================================================
        document.addEventListener('DOMContentLoaded', function () {
            const squadre = JSON.parse('@Html.Raw(squadreJson)');
            const connection = new signalR.HubConnectionBuilder().withUrl("/bazzerHub").build();
            const legaAliasAdmin = "@ViewBag.LegaAlias";

            // focus filtri
            const urlParams = new URLSearchParams(window.location.search);
            const nomeFilter = document.getElementById('nomeFilterInput');
            if (urlParams.has('nome') && urlParams.get('nome') !== '' && nomeFilter) {
                nomeFilter.focus();
                const val = nomeFilter.value;
                nomeFilter.value = '';
                nomeFilter.value = val;
            }

            // attiva filtri
            const squadraFilter = document.getElementById('squadraFilterInput');
            if (nomeFilter) nomeFilter.addEventListener('input', submitFormDebounced);
            if (squadraFilter) squadraFilter.addEventListener('input', submitFormDebounced);

            // ===========================
            // SIGNALR HANDLERS
            // ===========================
            connection.on("MostraGiocatoreInAsta", (giocatore) => {
                document.getElementById('overlay-nome-giocatore').innerText = giocatore.nome;
                document.getElementById('overlay-dettagli-giocatore').innerText = `${giocatore.ruolo} - ${giocatore.squadraReale}`;
                document.getElementById('overlay-logo-squadra').src = giocatore.logoUrl;
                document.getElementById('overlay-offerta').innerText = '0';
                document.getElementById('overlay-offerente').innerText = 'In attesa di offerte...';
                document.getElementById('overlay-offerente').style.color = '';
                document.getElementById('overlay-log').innerHTML = '';
                const timerEl = document.getElementById('overlay-timer');
                timerEl.innerText = '--';
                timerEl.classList.remove('timer-green', 'timer-yellow', 'timer-red');
                document.querySelector('.asta-box-footer').style.display = 'block';
                document.getElementById('asta-overlay').classList.add('visible');

                // reset timers/suono tracker
                lastOffertaAdmin = 0;
                clearInterval(countdownTimerAdmin);
                clearTimeout(closeTimeoutAdmin);
                closeTimeoutAdmin = null;
            });

            // 🔔 Suona SOLO su rilanci veri; usa fineUtc per countdown + chiusura
            connection.on("AggiornaOfferta", (offerente, offerta, fineUtc) => {
                const offerenteEl = document.getElementById('overlay-offerente');
                if (offerenteEl) offerenteEl.innerText = offerente || '-';
                const offertaEl = document.getElementById('overlay-offerta');
                if (offertaEl) offertaEl.innerText = offerta || 0;

                // reset displays/timeouts
                clearInterval(countdownTimerAdmin);
                clearTimeout(closeTimeoutAdmin);
                closeTimeoutAdmin = null;

                const timerEl = document.getElementById('overlay-timer');

                // Se non c'è end-time (sync iniziale/nessuna offerta), niente suono/log/timer
                if (!fineUtc || !offerta || offerta <= 0) {
                    timerEl.innerText = '--';
                    timerEl.classList.remove('timer-green', 'timer-yellow', 'timer-red');
                    lastOffertaAdmin = offerta || 0; // aggiorna stato locale
                    return;
                }

                // Suona e logga SOLO se l'offerta è aumentata rispetto all'ultima mostrata
                const isRealBid = (offerta > (lastOffertaAdmin || 0));
                if (isRealBid) {
                    document.getElementById('suono-offerta').play();
                    const logContainer = document.getElementById('overlay-log');
                    if (logContainer) {
                        const logEntry = document.createElement('p');
                        logEntry.innerText = `${offerente} offre ${offerta}`;
                        logContainer.prepend(logEntry);
                    }
                }
                lastOffertaAdmin = offerta;

                // Countdown visivo sincronizzato
                const end = new Date(fineUtc);
                const paint = (sec) => {
                    timerEl.innerText = sec >= 0 ? sec : 0;
                    timerEl.classList.remove('timer-green', 'timer-yellow', 'timer-red');
                    if (sec > 5) timerEl.classList.add('timer-green');
                    else if (sec >= 4) timerEl.classList.add('timer-yellow');
                    else timerEl.classList.add('timer-red');
                };
                const tick = () => {
                    const sec = Math.ceil((end.getTime() - Date.now()) / 1000);
                    paint(sec);
                    if (sec >= 0) {
                        const beep = document.getElementById('suono-countdown');
                        beep.currentTime = 0;
                        beep.play();
                    } else {
                        clearInterval(countdownTimerAdmin);
                    }
                };
                tick();
                countdownTimerAdmin = setInterval(tick, 1000);

                // Pianifica il colpo di martello UNA SOLA VOLTA lato admin
                const msRemaining = end.getTime() - Date.now();
                if (msRemaining > 0) {
                    closeTimeoutAdmin = setTimeout(() => {
                        connection.invoke("TerminaAsta", legaAliasAdmin).catch(err => console.error(err.toString()));
                    }, msRemaining + 50); // piccolo margine
                } else {
                    // end-time già passato (admin è rientrato tardi): chiudi subito
                    connection.invoke("TerminaAsta", legaAliasAdmin).catch(err => console.error(err.toString()));
                }
            });

            connection.on("AstaTerminata", (giocatoreId, nomeGiocatore, offerente, offerta) => {
                // stop timers
                clearInterval(countdownTimerAdmin);
                clearTimeout(closeTimeoutAdmin);
                closeTimeoutAdmin = null;

                document.getElementById('suono-vittoria').play();
                const offerenteEl = document.getElementById('overlay-offerente');
                if (offerenteEl) {
                    offerenteEl.innerText = `AGGIUDICATO a ${offerente}!`;
                    offerenteEl.style.color = '#2ecc71';
                }
                document.querySelector('.asta-box-footer').style.display = 'none';

                setTimeout(() => {
                    document.getElementById('asta-overlay').classList.remove('visible');
                    setTimeout(() => location.reload(), 300);
                }, 4000);
            });

            connection.on("AstaAnnullata", () => {
                clearInterval(countdownTimerAdmin);
                clearTimeout(closeTimeoutAdmin);
                closeTimeoutAdmin = null;

                document.getElementById('asta-overlay').classList.remove('visible');
            });

            connection.on("GiocatoreSuggerito", (giocatore, suggeritore) => {
                mostraMessaggio("Suggerimento Ricevuto", `${suggeritore} ha suggerito di chiamare: ${giocatore.nome}`);
                const inputNome = document.querySelector('form#filtroForm input[name="nome"]');
                if (inputNome) {
                    inputNome.value = giocatore.nome;
                    document.getElementById('filtroForm').submit();
                }
            });

            // avvio connessione
            connection.start().then(() => {
                connection.invoke("AggiungiAdminAlGruppo", legaAliasAdmin);
                connection.invoke("RichiediStatoAttuale"); // in caso di F5, riprende fineUtc e rischedula
            }).catch(err => console.error(err.toString()));

            // vari eventi UI
            document.querySelectorAll('.form-avvia-asta').forEach(form => {
                form.addEventListener('submit', function (event) {
                    event.preventDefault();
                    fetch(this.action, { method: 'POST', body: new URLSearchParams(new FormData(this)) })
                        .then(response => { if (!response.ok) mostraMessaggio('Errore', 'Errore avvio asta.'); });
                });
            });

            document.querySelectorAll('.btn-assegna').forEach(btn => {
                btn.addEventListener('click', function () {
                    const giocatoreId = this.dataset.id;
                    const giocatoreNome = this.dataset.nome;
                    document.getElementById('idGiocatoreModale').value = giocatoreId;
                    document.getElementById('nomeGiocatoreModale').innerText = giocatoreNome;

                    const squadraSelect = document.getElementById('squadraSelect');
                    squadraSelect.innerHTML = '';
                    squadre.forEach(squadra => {
                        const option = document.createElement('option');
                        option.value = squadra.SquadraId;
                        option.innerText = squadra.Nickname;
                        squadraSelect.appendChild(option);
                    });

                    const modal = new bootstrap.Modal(document.getElementById('assegnaModal'));
                    modal.show();
                });
            });

            document.getElementById('btnConfermaSvincolo')?.addEventListener('click', function () {
                const id = parseInt(document.getElementById('idGiocatoreSvincola').value);
                const costoOriginale = parseInt(document.getElementById('costoOriginaleSvincolo').innerText);
                let crediti = parseInt(document.getElementById('creditiSvincoloInput').value);
                if (isNaN(crediti) || crediti < 0) crediti = 0;
                if (!isNaN(costoOriginale) && crediti > costoOriginale) crediti = costoOriginalo;
                const payload = { id, creditiRestituiti: crediti };
                fetch('/Admin/SvincolaGiocatore', {
                    method: 'POST', headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                }).then(response => { if (response.ok) { location.reload(); } else { mostraMessaggio("Errore", "Errore durante lo svincolo."); } });
            });

            document.getElementById('formTimer')?.addEventListener('submit', impostaTimer);

            document.getElementById('bloccoPortieriSwitch')?.addEventListener('change', async function () {
                const isAttivo = this.checked;
                fetch('/Admin/ImpostaBloccoPortieri', {
                    method: 'POST', headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ attivo: isAttivo })
                }).then(async response => {
                    if (response.ok) await mostraMessaggio('Regola Aggiornata', 'Regola Blocco Portieri ' + (isAttivo ? 'ATTIVATA' : 'DISATTIVATA'));
                    else await mostraMessaggio('Errore', 'Errore durante l\'aggiornamento della regola.');
                });
            });

            document.getElementById('mantraSwitch')?.addEventListener('change', function () {
                const isAttivo = this.checked;
                const url = new URL(window.location.href);
                url.searchParams.set('mantra', isAttivo);
                window.location.href = url.toString();
            });
        });
    </script>
}

