@using System.Text.Json
@model AstaLegheFC.Models.ViewModels.ListoneViewModel

@{
    ViewData["Title"] = "Listone Calciatori";
    var riepilogo = ViewBag.RiepilogoSquadre as List<AstaLegheFC.Models.ViewModels.SquadraRiepilogoViewModel> ?? new List<AstaLegheFC.Models.ViewModels.SquadraRiepilogoViewModel>();
    var squadreJson = JsonSerializer.Serialize(riepilogo.Select(s => new { s.SquadraId, s.Nickname }));
    var appLogoUrl = Url.Content(ViewBag.AppLogoUrl as string ?? "~/png/logo_bazzer.png");
}

<style>
    @@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;600&display=swap');

    #overlay-timer {
        font-size: 3.5rem;
        font-weight: 700;
        line-height: 1;
        margin: 0;
        transition: color .3s
    }

    .timer-green {
        color: #2ecc71
    }

    .timer-yellow {
        color: #f1c40f
    }

    .timer-red {
        color: #e74c3c
    }

    #asta-overlay {
        position: fixed;
        display: none;
        inset: 0;
        background: rgba(0,0,0,.9);
        justify-content: center;
        align-items: center;
        z-index: 1050;
        color: #fff;
        text-align: center;
        font-family: 'Montserrat',sans-serif;
        opacity: 0;
        visibility: hidden;
        pointer-events: none;
        transition: opacity .3s, visibility .3s;
    }

        #asta-overlay.visible {
            display: flex;
            opacity: 1;
            visibility: visible;
            pointer-events: auto;
        }

    .asta-box.overlay-beauty {
        position: relative;
        overflow: hidden;
        border: 1px solid #34495e;
        border-radius: 20px;
        background: radial-gradient(120% 120% at 0% 0%, #1f2a39 0%, #1b2431 60%, #16202c 100%);
        box-shadow: 0 22px 48px rgba(0,0,0,.5);
        padding: 40px;
        min-width: 650px;
        transform: scale(.95);
        transition: transform .3s;
    }

    #asta-overlay.visible .asta-box {
        transform: scale(1);
    }

    .asta-box.overlay-beauty::before,
    .asta-box.overlay-beauty::after {
        content: "";
        position: absolute;
        inset: 0;
        pointer-events: none;
        z-index: 0;
    }

    .asta-box.overlay-beauty::before {
        background-image: var(--bg-url, none);
        background-repeat: no-repeat;
        background-position: center;
        background-size: 420px;
        opacity: .12;
        filter: saturate(115%) blur(1px);
        transform: scale(1.04);
    }

    .asta-box.overlay-beauty::after {
        background: linear-gradient(180deg, rgba(0,0,0,.18), rgba(0,0,0,.35));
    }

    .asta-box-header,
    #overlay-timer,
    #overlay-offerta,
    #overlay-offerente,
    .asta-box-footer,
    #overlay-log {
        position: relative;
        z-index: 1;
    }


    @@keyframes log-in {
        from {
            opacity: 0;
            transform: translateY(2px);
        }

        to {
            opacity: 1;
            transform: none;
        }
    }
    /* cella nickname: un filo di aria a sinistra */
    .table-bordered td.td-nick {
        text-align: left !important;
        padding-left: .5rem !important; 
        display: flex;
        align-items: center;
        gap: .5rem;
        justify-content: flex-start;
    }

    /* puntino: nessun vincolo col bordo, ma puoi aggiungere un micro offset */
    .td-nick .status-dot {
        margin-left: .125rem;
        flex: 0 0 10px;
        width: 10px;
        height: 10px;
    }

    /* testo nickname */
    .td-nick .nick-label {
        display: inline-block;
    }


    .status-dot {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: .35rem;
        vertical-align: middle;
        border: 1px solid rgba(255,255,255,.2)
    }

    .dot-online {
        background: #2ecc71
    }

    .dot-offline {
        background: #e74c3c
    }

    .dot-waiting {
        background: #f1c40f
    }

    .auction-bar {
        background: rgba(44,62,80,.5);
        border: 1px solid #34495e;
        border-radius: .75rem;
        padding: .75rem .9rem;
        box-shadow: inset 2px 2px 6px rgba(0,0,0,.25), inset -2px -2px 6px rgba(255,255,255,.06)
    }

    .btn-neo {
        border: none !important;
        position: relative;
        font-weight: 700;
        letter-spacing: .2px;
        border-radius: .8rem !important;
        padding: .5rem .9rem !important;
        color: #fff !important;
        background: #2d3b4d;
        box-shadow: 6px 6px 12px rgba(0,0,0,.35),-6px -6px 12px rgba(255,255,255,.04);
        transition: transform .07s ease, box-shadow .07s ease, filter .15s ease
    }

        .btn-neo:hover {
            filter: brightness(1.05)
        }

        .btn-neo:active {
            transform: translateY(1px);
            box-shadow: inset 6px 6px 12px rgba(0,0,0,.35),inset -6px -6px 12px rgba(255,255,255,.04)
        }

    .btn-neo-warning {
        background: #d9822b
    }

    .btn-neo-success {
        background: #2da44e
    }

    .btn-neo-danger {
        background: #c0353a
    }

    .btn-neo-primary {
        background: #2563eb
    }

    .btn-neo-secondary {
        background: #6b7280
    }

    .btn-neo-info {
        background: #0ea5e9
    }

    .btn-neo-dark {
        background: #222f3e
    }

    .btn-neo[disabled], .btn-neo:disabled {
        opacity: .6;
        filter: none;
        cursor: not-allowed;
        transform: none;
        box-shadow: 6px 6px 12px rgba(0,0,0,.35),-6px -6px 12px rgba(255,255,255,.04) !important
    }

    .letters-bar .letter-chip {
        border: none;
        background: #2d3b4d;
        color: #fff;
        padding: .35rem .6rem;
        border-radius: .6rem;
        font-weight: 700;
        line-height: 1;
        cursor: pointer;
        box-shadow: 4px 4px 10px rgba(0,0,0,.35),-4px -4px 10px rgba(255,255,255,.04);
        transition: transform .07s ease, box-shadow .07s ease, filter .15s ease
    }

        .letters-bar .letter-chip:hover {
            filter: brightness(1.06)
        }

        .letters-bar .letter-chip:active {
            transform: translateY(1px);
            box-shadow: inset 4px 4px 10px rgba(0,0,0,.35), inset -4px -4px 10px rgba(255,255,255,.04)
        }

    .letters-bar .letter-selected {
        background: #2563eb !important
    }

    .letters-bar .letter-archived {
        opacity: .45;
        text-decoration: line-through
    }

    .modal-beauty .modal-content {
        position: relative;
        overflow: hidden;
        border: 1px solid #34495e;
        border-radius: 16px;
        background: radial-gradient(120% 120% at 0% 0%, #1f2a39 0%, #1b2431 60%, #16202c 100%);
        box-shadow: 0 22px 48px rgba(0,0,0,.5);
    }

        .modal-beauty .modal-content::before {
            content: "";
            position: absolute;
            inset: 0;
            background-image: var(--bg-url, none);
            background-size: 70%;
            background-repeat: no-repeat;
            background-position: center;
            opacity: .16;
            filter: blur(1.5px) saturate(120%);
            transform: scale(1.06);
            pointer-events: none;
        }

        .modal-beauty .modal-content::after {
            content: "";
            position: absolute;
            inset: 0;
            background: linear-gradient(180deg, rgba(0,0,0,.20), rgba(0,0,0,.35));
            pointer-events: none;
        }

    .modal-beauty .modal-header,
    .modal-beauty .modal-footer {
        position: relative;
        z-index: 1;
        border-color: #2c3e50;
        background: rgba(0,0,0,.15);
        backdrop-filter: blur(6px);
    }

    .modal-beauty .modal-title {
        display: flex;
        align-items: center;
        gap: 10px;
        color: #ecf0f1;
        font-weight: 800;
    }

    .modal-beauty .team-chip {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        background: rgba(0,0,0,.35);
        border: 1px solid rgba(255,255,255,.12);
        color: #dfe6ee;
        font-weight: 700;
        padding: 6px 10px;
        border-radius: 999px;
    }

        .modal-beauty .team-chip img {
            width: 20px;
            height: 20px;
            object-fit: contain;
        }

    .modal-beauty .modal-body {
        position: relative;
        z-index: 1;
        color: #e7edf3;
    }

    .modal-beauty .role-badge {
        display: inline-block;
        min-width: 22px;
        height: 22px;
        line-height: 22px;
        text-align: center;
        font-weight: 900;
        border-radius: 6px;
        color: #fff;
        margin-right: 8px;
    }

    .modal-beauty .role-P {
        background: #d9822b;
    }

    .modal-beauty .role-D {
        background: #2da44e;
    }

    .modal-beauty .role-C {
        background: #2563eb;
    }

    .modal-beauty .role-A {
        background: #c0353a;
    }

    .modal-beauty .input-group-text {
        background: #1f2a39;
        color: #cdd6df;
        border-color: #334353;
    }

    .modal-beauty .form-control,
    .modal-beauty .form-select {
        background: #1b2431;
        color: #e7edf3;
        border-color: #334353;
    }

        .modal-beauty .form-control:focus,
        .modal-beauty .form-select:focus {
            border-color: #5dade2;
            box-shadow: 0 0 0 .2rem rgba(93,173,226,.25);
        }

    .btn-glass {
        border: 1px solid rgba(255,255,255,.18);
        background: rgba(255,255,255,.06);
        color: #fff;
        backdrop-filter: blur(6px);
        transition: transform .08s ease, box-shadow .12s ease, filter .12s ease;
    }

        .btn-glass:hover {
            filter: brightness(1.07);
            box-shadow: 0 10px 20px rgba(0,0,0,.35);
        }

        .btn-glass:active {
            transform: translateY(1px);
        }

    .btn-danger-glow {
        background: linear-gradient(180deg,#ef4444,#b91c1c);
        border: 0;
        color: #fff;
        box-shadow: 0 10px 20px rgba(239,68,68,.25);
    }

    .btn-success-glow {
        background: linear-gradient(180deg,#22c55e,#15803d);
        border: 0;
        color: #fff;
        box-shadow: 0 10px 20px rgba(34,197,94,.25);
    }

    .modal-base {
        position: relative;
        overflow: hidden;
        border: 1px solid #334155;
        border-radius: 16px;
        background: linear-gradient(180deg,#0b1320,#0a1220);
        color: #e5e7eb;
        box-shadow: 0 12px 34px rgba(0,0,0,.45);
    }

        .modal-base .modal-header {
            border: 0;
            background: radial-gradient(1200px 420px at -15% -60%, rgba(59,130,246,.22), transparent 60%);
        }

        .modal-base .btn-close {
            filter: invert(1) contrast(1.2);
            opacity: .75;
        }

    .modal-squad-bg {
        position: absolute;
        inset: 0;
        background-repeat: no-repeat;
        background-position: center;
        background-size: 360px;
        opacity: .06;
        filter: grayscale(100%);
        pointer-events: none;
        z-index: 0;
    }

    .modal-hero {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 10px 0 2px 0;
        position: relative;
        z-index: 1;
    }

        .modal-hero img {
            width: 54px;
            height: 54px;
            object-fit: contain;
            filter: drop-shadow(0 6px 16px rgba(0,0,0,.35));
        }

        .modal-hero .meta {
            line-height: 1.15;
        }

            .modal-hero .meta .tit {
                font-weight: 800;
                letter-spacing: .15px;
            }

            .modal-hero .meta .sub {
                opacity: .85;
            }

    #asta-overlay #overlay-log,
    #asta-overlay #overlay-log *,
    #asta-overlay .log-stream,
    #asta-overlay .log-stream * {
        font-family: "JetBrains Mono", ui-monospace, SFMono-Regular, Menlo, Consolas, "Liberation Mono", monospace !important;
        font-variant-numeric: tabular-nums;
        letter-spacing: .2px;
    }

    #overlay-log .log-item {
        font-size: .95rem;
    }

    #overlay-log .log-time {
        font-size: .8rem;
        opacity: .9;
    }

</style>

<h2 class="mt-3">Listone Calciatori</h2>

<div class="auction-bar d-flex flex-wrap align-items-center justify-content-between mb-3">
    <div class="d-flex align-items-center gap-3">
        <span class="badge bg-secondary">Durata asta</span>
        <span id="durata-asta" class="fs-4 fw-bold">00:00</span>
        <span id="stato-pausa" class="badge bg-warning d-none">In PAUSA</span>
    </div>

    <div class="btn-group">
        <button id="btn-pausa" type="button" class="btn-neo btn-neo-warning btn-sm">Pausa</button>
        <button id="btn-riprendi" type="button" class="btn-neo btn-neo-success btn-sm" disabled>Riprendi</button>
        <button id="btn-stop" type="button" class="btn-neo btn-neo-dark btn-sm" data-state="go">Stop</button>
        <button id="btn-reset" type="button" class="btn-neo btn-neo-danger btn-sm">Reset</button>
    </div>

    @if (ViewBag.SorteggioLetteraAttivo)
    {
        <div class="letters-bar d-flex align-items-center gap-2 flex-wrap mb-2">
            <button id="btnSorteggiaLettera" type="button" class="btn-neo btn-neo-primary btn-sm">Sorteggia lettera</button>
            <button id="btnResetLettere" type="button" class="btn-neo btn-neo-secondary btn-sm">Reset lettere</button>
            <div id="lettersChips" class="d-flex flex-wrap gap-1 ms-1"></div>
        </div>
    }
</div>

@if (riepilogo.Any())
{
    <h4 class="mt-4">Riepilogo Squadre</h4>
    <div class="table-responsive mb-4">
        <table class="table table-bordered table-sm text-center align-middle">
            <thead class="table-primary">
                <tr>
                    <th>Nickname</th>
                    <th>Bonus/Malus</th>
                    <th>Crediti</th>
                    <th>Puntata Max</th>
                    <th>P</th>
                    <th>D</th>
                    <th>C</th>
                    <th>A</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var s in riepilogo)
                {
                    <tr>
                        
                        <td class="td-nick">
                                 <span class="status-dot dot-offline" data-nick="@s.Nickname" title="@s.Nickname"></span>
                                <span class="nick-label">@s.Nickname</span>
                           
                        </td>
                        <td>
                            <button class="btn btn-info btn-sm btn-bonus"
                                    data-squadraid="@s.SquadraId"
                                    data-nickname="@s.Nickname"
                                    data-crediti="@s.CreditiDisponibili"
                                    data-pmax="@s.PuntataMassima"
                                    data-giocatori="@(s.PortieriAssegnati.Count + s.DifensoriAssegnati.Count + s.CentrocampistiAssegnati.Count + s.AttaccantiAssegnati.Count)">
                                +/- Crediti
                            </button>
                        </td>
                        <td><span id="cred-@s.SquadraId">@s.CreditiDisponibili</span></td>
                        <td><span id="pmax-@s.SquadraId">@s.PuntataMassima</span></td>

                        <td>
                            <button class="btn btn-sm btn-warning btn-toggle-rosa" type="button" onclick="toggleLista('portieri-@s.Nickname')">
                                @s.PortieriAssegnati.Count +/-
                            </button>
                            <ul id="portieri-@s.Nickname" class="mt-2 d-none list-unstyled small text-start">
                                @foreach (var g in s.PortieriAssegnati)
                                {
                                    <li class="d-flex align-items-center py-1 border-bottom border-secondary">
                                        <span class="me-auto pe-2">@g.Nome</span>
                                        @if (ViewBag.MantraAttivo)
                                        {
                                            <span class="text-info fst-italic small me-2">@g.RuoloMantra</span>
                                        }
                                        <img src="@g.LogoUrl" alt="@g.SquadraReale" style="height:22px" class="mx-2" />
                                        <span class="text-nowrap small">(@g.CreditiSpesi)</span>
                                        <button class="btn-neo btn-neo-danger btn-sm ms-2 btn-svincola"
                                                data-role="btn-svincola"
                                                data-id="@g.Id"
                                                data-nome="@g.Nome"
                                                data-costo="@g.CreditiSpesi"
                                                data-squadra="@g.SquadraReale"
                                                data-logo="@g.LogoUrl"
                                                data-ruolo="@g.Ruolo"
                                                onclick="apriModaleSvincolo(this)">
                                            Svincola
                                        </button>

                                        <button class="btn-neo btn-neo-warning btn-sm ms-2 btn-modifica-costo"
                                                data-id="@g.Id"
                                                data-nome="@g.Nome"
                                                data-costo="@g.CreditiSpesi"
                                                data-squadraid="@s.SquadraId"
                                                data-squadra="@g.SquadraReale"
                                                data-logo="@g.LogoUrl"
                                                data-ruolo="@g.Ruolo"
                                                onclick="apriModaleModificaCosto(this)">
                                            Mod. Spesa
                                        </button>

                                    </li>
                                }
                            </ul>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-success btn-toggle-rosa" type="button" onclick="toggleLista('difensori-@s.Nickname')">
                                @s.DifensoriAssegnati.Count +/-
                            </button>
                            <ul id="difensori-@s.Nickname" class="mt-2 d-none list-unstyled small text-start">
                                @foreach (var g in s.DifensoriAssegnati)
                                {
                                    <li class="d-flex align-items-center py-1 border-bottom border-secondary">
                                        <span class="me-auto pe-2">@g.Nome</span>
                                        @if (ViewBag.MantraAttivo)
                                        {
                                            <span class="text-info fst-italic small me-2">@g.RuoloMantra</span>
                                        }
                                        <img src="@g.LogoUrl" alt="@g.SquadraReale" style="height:22px" class="mx-2" />
                                        <span class="text-nowrap small">(@g.CreditiSpesi)</span>

                                        <button class="btn-neo btn-neo-danger btn-sm ms-2 btn-svincola"
                                                data-role="btn-svincola"
                                                data-id="@g.Id"
                                                data-nome="@g.Nome"
                                                data-costo="@g.CreditiSpesi"
                                                data-squadra="@g.SquadraReale"
                                                data-logo="@g.LogoUrl"
                                                data-ruolo="@g.Ruolo"
                                                onclick="apriModaleSvincolo(this)">
                                            Svincola
                                        </button>


                                        <button class="btn-neo btn-neo-warning btn-sm ms-2 btn-modifica-costo"
                                                data-id="@g.Id" data-nome="@g.Nome" data-costo="@g.CreditiSpesi"
                                                data-squadraid="@s.SquadraId" data-squadra="@g.SquadraReale"
                                                data-logo="@g.LogoUrl" data-ruolo="@g.Ruolo"
                                                onclick="apriModaleModificaCosto(this)">
                                            Mod. Spesa
                                        </button>
                                    </li>
                                }

                            </ul>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-primary btn-toggle-rosa" type="button" onclick="toggleLista('centro-@s.Nickname')">
                                @s.CentrocampistiAssegnati.Count +/-
                            </button>
                            <ul id="centro-@s.Nickname" class="mt-2 d-none list-unstyled small text-start">
                                @foreach (var g in s.CentrocampistiAssegnati)
                                {
                                    <li class="d-flex align-items-center py-1 border-bottom border-secondary">
                                        <span class="me-auto pe-2">@g.Nome</span>
                                        @if (ViewBag.MantraAttivo)
                                        {
                                            <span class="text-info fst-italic small me-2">@g.RuoloMantra</span>
                                        }
                                        <img src="@g.LogoUrl" alt="@g.SquadraReale" style="height:22px" class="mx-2" />
                                        <span class="text-nowrap small">(@g.CreditiSpesi)</span>

                                        <button class="btn-neo btn-neo-danger btn-sm ms-2 btn-svincola"
                                                data-role="btn-svincola"
                                                data-id="@g.Id"
                                                data-nome="@g.Nome"
                                                data-costo="@g.CreditiSpesi"
                                                data-squadra="@g.SquadraReale"
                                                data-logo="@g.LogoUrl"
                                                data-ruolo="@g.Ruolo"
                                                onclick="apriModaleSvincolo(this)">
                                            Svincola
                                        </button>


                                        <button class="btn-neo btn-neo-warning btn-sm ms-2 btn-modifica-costo"
                                                data-id="@g.Id" data-nome="@g.Nome" data-costo="@g.CreditiSpesi"
                                                data-squadraid="@s.SquadraId" data-squadra="@g.SquadraReale"
                                                data-logo="@g.LogoUrl" data-ruolo="@g.Ruolo"
                                                onclick="apriModaleModificaCosto(this)">
                                            Mod. Spesa
                                        </button>
                                    </li>
                                }

                            </ul>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-danger btn-toggle-rosa" type="button" onclick="toggleLista('attaccanti-@s.Nickname')">
                                @s.AttaccantiAssegnati.Count +/-
                            </button>
                            <ul id="attaccanti-@s.Nickname" class="mt-2 d-none list-unstyled small text-start">
                                @foreach (var g in s.AttaccantiAssegnati)
                                {
                                    <li class="d-flex align-items-center py-1 border-bottom border-secondary">
                                        <span class="me-auto pe-2">@g.Nome</span>
                                        @if (ViewBag.MantraAttivo)
                                        {
                                            <span class="text-info fst-italic small me-2">@g.RuoloMantra</span>
                                        }
                                        <img src="@g.LogoUrl" alt="@g.SquadraReale" style="height:22px" class="mx-2" />
                                        <span class="text-nowrap small">(@g.CreditiSpesi)</span>

                                        <button class="btn-neo btn-neo-danger btn-sm ms-2 btn-svincola"
                                                data-role="btn-svincola"
                                                data-id="@g.Id"
                                                data-nome="@g.Nome"
                                                data-costo="@g.CreditiSpesi"
                                                data-squadra="@g.SquadraReale"
                                                data-logo="@g.LogoUrl"
                                                data-ruolo="@g.Ruolo"
                                                onclick="apriModaleSvincolo(this)">
                                            Svincola
                                        </button>


                                        <button class="btn-neo btn-neo-warning btn-sm ms-2 btn-modifica-costo"
                                                data-id="@g.Id" data-nome="@g.Nome" data-costo="@g.CreditiSpesi"
                                                data-squadraid="@s.SquadraId" data-squadra="@g.SquadraReale"
                                                data-logo="@g.LogoUrl" data-ruolo="@g.Ruolo"
                                                onclick="apriModaleModificaCosto(this)">
                                            Mod. Spesa
                                        </button>
                                    </li>


                                }
                            </ul>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

<form id="filtroForm" method="get" asp-action="VisualizzaListone" class="row g-2 mb-4">
    <input type="hidden" name="page" id="pageInput" value="@Model.Page" />

    <input type="hidden" name="lega" value="@ViewBag.LegaAlias" />
    <input type="hidden" name="iniziale" id="inizialeInput" value="@(ViewBag.Iniziale ?? "")" />
    <input type="hidden" name="sorteggio" id="sorteggioInput" value="@(ViewBag.SorteggioLetteraAttivo ? "true" : "false")" />
    <input type="hidden" name="mantra" id="mantraInput" value="@(ViewBag.MantraAttivo ? "true" : "false")" />
    <div class="col-md-4"><input type="text" name="nome" id="nomeFilterInput" class="form-control" placeholder="Cerca per nome" value="@ViewBag.Nome" /></div>
    <div class="col-md-4"><input type="text" name="squadra" id="squadraFilterInput" class="form-control" placeholder="Cerca per squadra" value="@ViewBag.Squadra" /></div>
    <div class="col-md-4">
        <select name="ruolo" class="form-select"
                onchange="document.getElementById('pageInput').value = 1; this.form.submit()">

            <option value="">Tutti i ruoli</option>
            @foreach (var r in (List<string>)ViewBag.RuoliDisponibili)
            {
                <option value="@r" selected="@(ViewBag.Ruolo == r)">@r</option>
            }
        </select>
    </div>
</form>

<div class="row mb-3 align-items-center">
    <div class="col-auto">
        <form id="formTimer" class="d-flex" onsubmit="return false;">
            <input type="number" class="form-control me-2" id="secondiTimer" value="@(ViewBag.DurataTimer ?? 5)" min="2" placeholder="Secondi Timer" />
            <button type="submit" class="btn-neo btn-neo-primary">Imposta Timer</button>
        </form>
    </div>
    <div class="col-auto">
        <div class="form-check form-switch fs-5">
            <input class="form-check-input" type="checkbox" role="switch" id="bloccoPortieriSwitch" @(ViewBag.BloccoPortieriAttivo ? "checked" : "")>
            <label class="form-check-label" for="bloccoPortieriSwitch">Blocco Portieri</label>
        </div>
    </div>
    <div class="col-auto">
        <div class="form-check form-switch fs-5">
            <input class="form-check-input" type="checkbox" role="switch" id="mantraSwitch" @(ViewBag.MantraAttivo ? "checked" : "")>
            <label class="form-check-label" for="mantraSwitch">Mantra</label>
        </div>
    </div>
    <div class="col-auto">
        <div class="form-check form-switch fs-5">
            <input class="form-check-input" type="checkbox" role="switch" id="sorteggioSwitch" @(ViewBag.SorteggioLetteraAttivo ? "checked" : "")>
            <label class="form-check-label" for="sorteggioSwitch">Sorteggio lettera</label>
        </div>
    </div>
    <div class="col-auto">
        <div class="form-check form-switch fs-5">
            <input class="form-check-input" type="checkbox" role="switch" id="buzzerSwitch" @(ViewBag.BuzzerAttivo ? "checked" : "")>
            <label class="form-check-label" for="buzzerSwitch">Modalità Buzzer</label>
        </div>
    </div>

</div>

<div class="table-responsive">
    <table class="table table-striped table-bordered table-hover">
        <thead class="table-dark text-center">
            <tr><th>Nome</th><th>Ruolo</th><th>Squadra</th><th>Azioni</th></tr>
        </thead>
        <tbody class="text-center">
            @foreach (var c in Model.Items)

            {
                <tr id="riga-giocatore-@c.Id">
                    <td class="text-start">@c.Nome</td>
                    <td>@(ViewBag.MantraAttivo? c.RuoloMantra: c.Ruolo)</td>
                    <td class="text-start">@c.Squadra</td>
                    <td>
                        <button class="btn btn-success btn-sm btn-avvia-asta"
                                data-id="@c.Id"
                                data-mantra="@ViewBag.MantraAttivo.ToString().ToLower()">
                            Asta
                        </button>
                        <button class="btn btn-warning btn-sm btn-assegna"
                                data-id="@c.Id"
                                data-nome="@c.Nome"
                                data-ruolo="@(ViewBag.MantraAttivo? c.RuoloMantra: c.Ruolo)"
                                data-squadra="@c.Squadra"
                                data-logo="@AstaLegheFC.Helpers.LogoHelper.GetLogoUrl(c.Squadra)">
                            Assegna
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@if (Model.TotalPages > 1)
{
    var legaAlias = (string)ViewBag.LegaAlias;
    var nomeQ = (string)(ViewBag.Nome ?? "");
    var squadraQ = (string)(ViewBag.Squadra ?? "");
    var ruoloQ = (string)(ViewBag.Ruolo ?? "");
    var inizialeQ = (string)(ViewBag.Iniziale ?? "");
    var mantraQ = ((ViewBag.MantraAttivo as bool?) == true) ? "true" : "false";
    var sorteggioQ = ((ViewBag.SorteggioLetteraAttivo as bool?) == true) ? "true" : "false";

    var start = Math.Max(1, Model.Page - 2);
    var end = Math.Min(Model.TotalPages, Model.Page + 2);

    <div class="d-flex align-items-center justify-content-between flex-wrap gap-2 my-3">
        <small class="text-muted">
            Mostrati @((Model.TotalCount == 0) ? 0 : ((Model.Page - 1) * Model.PageSize + 1))
            –
            @Math.Min(Model.Page * Model.PageSize, Model.TotalCount)
            di @Model.TotalCount
        </small>

        <nav aria-label="Paginazione listone">
            <ul class="pagination pagination-sm mb-0">
                <li class="page-item @(Model.Page == 1 ? "disabled" : "")">
                    <a class="page-link"
                       asp-action="VisualizzaListone"
                       asp-route-lega="@legaAlias"
                       asp-route-page="1"
                       asp-route-nome="@nomeQ"
                       asp-route-squadra="@squadraQ"
                       asp-route-ruolo="@ruoloQ"
                       asp-route-iniziale="@inizialeQ"
                       asp-route-mantra="@mantraQ"
                       asp-route-sorteggio="@sorteggioQ"
                       aria-label="Prima">&laquo;</a>
                </li>
                <li class="page-item @(Model.Page == 1 ? "disabled" : "")">
                    <a class="page-link"
                       asp-action="VisualizzaListone"
                       asp-route-lega="@legaAlias"
                       asp-route-page="@(Model.Page - 1)"
                       asp-route-nome="@nomeQ"
                       asp-route-squadra="@squadraQ"
                       asp-route-ruolo="@ruoloQ"
                       asp-route-iniziale="@inizialeQ"
                       asp-route-mantra="@mantraQ"
                       asp-route-sorteggio="@sorteggioQ"
                       aria-label="Precedente">Prec</a>
                </li>

                @for (var i = start; i <= end; i++)
                {
                    <li class="page-item @(i == Model.Page ? "active" : "")">
                        <a class="page-link"
                           asp-action="VisualizzaListone"
                           asp-route-lega="@legaAlias"
                           asp-route-page="@i"
                           asp-route-nome="@nomeQ"
                           asp-route-squadra="@squadraQ"
                           asp-route-ruolo="@ruoloQ"
                           asp-route-iniziale="@inizialeQ"
                           asp-route-mantra="@mantraQ"
                           asp-route-sorteggio="@sorteggioQ">@i</a>
                    </li>
                }

                <li class="page-item @(Model.Page == Model.TotalPages ? "disabled" : "")">
                    <a class="page-link"
                       asp-action="VisualizzaListone"
                       asp-route-lega="@legaAlias"
                       asp-route-page="@(Model.Page + 1)"
                       asp-route-nome="@nomeQ"
                       asp-route-squadra="@squadraQ"
                       asp-route-ruolo="@ruoloQ"
                       asp-route-iniziale="@inizialeQ"
                       asp-route-mantra="@mantraQ"
                       asp-route-sorteggio="@sorteggioQ"
                       aria-label="Successiva">Succ</a>
                </li>
                <li class="page-item @(Model.Page == Model.TotalPages ? "disabled" : "")">
                    <a class="page-link"
                       asp-action="VisualizzaListone"
                       asp-route-lega="@legaAlias"
                       asp-route-page="@Model.TotalPages"
                       asp-route-nome="@nomeQ"
                       asp-route-squadra="@squadraQ"
                       asp-route-ruolo="@ruoloQ"
                       asp-route-iniziale="@inizialeQ"
                       asp-route-mantra="@mantraQ"
                       asp-route-sorteggio="@sorteggioQ"
                       aria-label="Ultima">&raquo;</a>
                </li>
            </ul>
        </nav>
    </div>
}

<div class="modal fade" id="assegnaModal" tabindex="-1" aria-labelledby="assegnaLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modal-base">
            <div class="modal-squad-bg" id="bg-assegna"></div>

            <div class="modal-header">
                <h5 class="modal-title" id="assegnaLabel">Assegna manualmente</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
            </div>

            <div class="modal-body">
                <input type="hidden" id="idGiocatoreModale" />

                <div class="modal-hero mb-2">
                    <img id="logoGiocatoreAssegna" alt="">
                    <div class="meta">
                        <div id="nomeGiocatoreModale" class="tit"></div>
                        <div id="dettagliGiocatoreAssegna" class="sub small text-muted"></div>
                    </div>
                </div>

                <div class="row g-3 mt-2">
                    <div class="col-5">
                        <label for="costoAssegnaInput" class="form-label">Costo</label>
                        <input id="costoAssegnaInput" type="number" class="form-control" min="0" step="1" value="0">
                    </div>
                    <div class="col-7">
                        <label for="squadraSelectAssegna" class="form-label">Assegna a</label>
                        <select id="squadraSelectAssegna" class="form-select"></select>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Annulla</button>
                <button id="btnSalvaAssegnazione" type="button" class="btn btn-primary">Conferma</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="svincolaModal" tabindex="-1" aria-labelledby="svincolaLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modal-base">
            <div class="modal-squad-bg" id="bg-svincola"></div>

            <div class="modal-header">
                <h5 class="modal-title" id="svincolaLabel">Svincola giocatore</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
            </div>

            <div class="modal-body">
                <input type="hidden" id="idGiocatoreSvincola" />

                <div class="modal-hero mb-2">
                    <img id="logoGiocatoreSvincola" alt="">
                    <div class="meta">
                        <div id="nomeGiocatoreSvincolo" class="tit"></div>
                        <div id="dettagliGiocatoreSvincola" class="sub small text-muted"></div>
                    </div>
                </div>

                <div class="alert alert-secondary py-2 mb-3">
                    Costo originale: <strong id="costoOriginaleSvincolo">0</strong>
                </div>

                <div>
                    <label for="creditiSvincoloInput" class="form-label">Crediti da restituire</label>
                    <input id="creditiSvincoloInput" type="number" class="form-control" min="0" value="0" />
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Annulla</button>
                <button id="btnConfermaSvincolo" type="button" class="btn btn-danger">Conferma svincolo</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="modificaCostoModal" tabindex="-1" aria-labelledby="modCostoLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modal-base">
            <div class="modal-squad-bg" id="bg-modcosto"></div>

            <div class="modal-header">
                <h5 class="modal-title" id="modCostoLabel">Modifica costo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
            </div>

            <div class="modal-body">
                <input type="hidden" id="modCostoGiocatoreId" />
                <input type="hidden" id="modCostoSquadraId" />

                <div class="modal-hero mb-2">
                    <img id="modCostoLogo" alt="">
                    <div class="meta">
                        <div id="modCostoNome" class="tit"></div>
                        <div id="modCostoDettagli" class="sub small text-muted"></div>
                    </div>
                </div>

                <div class="row g-3 mt-2">
                    <div class="col-6">
                        <label class="form-label">Costo corrente</label>
                        <div class="form-control-plaintext fw-bold"><span id="modCostoCorrente">0</span></div>
                    </div>
                    <div class="col-6">
                        <label for="modCostoInput" class="form-label">Nuovo costo</label>
                        <input id="modCostoInput" type="number" class="form-control" min="0" step="1" value="0">
                    </div>
                </div>

                <div class="form-text mt-2">
                    Il nuovo costo non può superare il budget disponibile della squadra.
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Annulla</button>
                <button id="btnConfermaModificaCosto" type="button" class="btn btn-primary">Salva</button>
            </div>
        </div>
    </div>
</div>

<div id="asta-overlay">
    <div class="asta-box overlay-beauty">
        <div class="asta-box-header">
            <img id="overlay-logo-squadra" src="" alt="Logo Squadra" />
            <div>
                <h2 id="overlay-nome-giocatore">NOME GIOCATORE</h2>
                <p id="overlay-dettagli-giocatore">Ruolo - Squadra</p>
            </div>
        </div>
        <h1 id="overlay-timer" class="mb-2">--</h1>
        <h1 id="overlay-offerta">0</h1>
        <h3 id="overlay-offerente">In attesa di offerte...</h3>
        <div id="overlay-log"
             class="log-stream"
             role="log"
             aria-live="polite"
             style="--log-font:'JetBrains Mono',ui-monospace,SFMono-Regular,Menlo,Consolas,'Liberation Mono',monospace; font-family:var(--log-font); font-variant-numeric:tabular-nums; letter-spacing:.2px;">
        </div>


        <div class="asta-box-footer">
            <button class="btn btn-danger" id="btnAnnullaAsta">Annulla Asta</button>
        </div>
    </div>
</div>

<div class="modal fade" id="bonusModal" tabindex="-1" aria-labelledby="bonusModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modal-base">
            <div class="modal-squad-bg" id="bg-bonus" style="background-image:url('@appLogoUrl')"></div>

            <div class="modal-header">
                <h5 class="modal-title d-flex align-items-center gap-2" id="bonusModalLabel">
                    <img src="@appLogoUrl" alt="Logo" style="width:22px;height:22px;object-fit:contain" />
                    Gestione crediti
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
            </div>

            <div class="modal-body">
                <div class="modal-hero mb-2">
                    <img src="@appLogoUrl" alt="Logo app">
                    <div class="meta">
                        <div class="tit" id="bonusNick">—</div>
                        <div class="sub small text-muted">Aggiungi o rimuovi crediti alla squadra</div>
                    </div>
                </div>

                <div class="row g-3 align-items-end">
                    <div class="col-6">
                        <div class="small text-muted">Crediti attuali</div>
                        <div class="fw-bold fs-5"><span id="bonusCreditiAttuali">0</span></div>
                    </div>
                    <div class="col-6 text-end">
                        <div class="small text-muted">Puntata max attuale</div>
                        <div class="fw-bold fs-5"><span id="bonusPMaxAttuale">0</span></div>
                    </div>

                    <div class="col-12"><hr class="border-secondary-subtle my-2" /></div>

                    <div class="col-6">
                        <label for="bonusDeltaInput" class="form-label">Delta crediti</label>
                        <input type="number" id="bonusDeltaInput" class="form-control" value="0" step="1" />
                        <div class="form-text">Esempi: +10 (aggiungi), -5 (togli)</div>
                    </div>

                    <div class="col-6">
                        <div class="small text-muted">Crediti dopo</div>
                        <div class="fw-bold fs-5"><span id="bonusCreditiDopo">0</span></div>
                        <div class="small text-muted mt-2">Puntata max dopo</div>
                        <div class="fw-bold"><span id="bonusPMaxDopo">0</span></div>
                    </div>
                </div>

                <input type="hidden" id="bonusSquadraId" />
                <input type="hidden" id="bonusGiocatoriCount" />
                <input type="hidden" id="bonusSlotsRimasti" />

            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary btn-glass" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-primary btn-success-glow" id="btnConfermaBonus">Applica</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="messaggioModale" tabindex="-1" aria-labelledby="messaggioModaleLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modal-base">
            <div class="modal-squad-bg" id="bg-msg" style="background-image:url('@appLogoUrl')"></div>

            <div class="modal-header">
                <h5 class="modal-title d-flex align-items-center gap-2" id="messaggioModaleLabel">
                    <img src="@appLogoUrl" alt="Logo" style="width:20px;height:20px;object-fit:contain" />
                    <span id="messaggioModaleTitolo">Info</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
            </div>

            <div class="modal-body">
                <p id="messaggioModaleCorpo" class="mb-0">-</p>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary btn-glass" data-bs-dismiss="modal" id="messaggioModaleBtnAnnulla" style="display:none;">Annulla</button>
                <button type="button" class="btn btn-primary btn-success-glow" id="messaggioModaleBtnOk">OK</button>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="buzzerModal" tabindex="-1" aria-labelledby="buzzerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modal-base">
            <div class="modal-squad-bg" id="bg-buzzer"></div>

            <div class="modal-header">
                <h5 class="modal-title d-flex align-items-center gap-2" id="buzzerModalLabel">
                    <span>Concludi asta (Buzzer)</span>
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
            </div>

            <div class="modal-body">
                <input type="hidden" id="buzzerGiocatoreId" />
                <div class="modal-hero mb-2">
                    <img id="buzzerLogo" alt="">
                    <div class="meta">
                        <div id="buzzerNomeGiocatore" class="tit">—</div>
                        <div class="sub small text-muted">
                            Offerente: <strong id="buzzerOfferente">-</strong>
                        </div>
                    </div>
                </div>

                <div class="row g-3 mt-2">
                    <div class="col-7">
                        <label for="buzzerSquadraSelect" class="form-label">Assegna a</label>
                        <select id="buzzerSquadraSelect" class="form-select"></select>
                    </div>
                    <div class="col-5">
                        <label for="buzzerCostoInput" class="form-label">Costo</label>
                        <input id="buzzerCostoInput" type="number" class="form-control" min="0" step="1" value="1">
                    </div>
                </div>

                <div class="form-text mt-2">
                    Inserisci il costo concordato a voce e conferma l’assegnazione.
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary btn-glass" data-bs-dismiss="modal">Annulla</button>
                <button id="btnConfermaBuzzer" type="button" class="btn btn-primary btn-success-glow">Conferma</button>
            </div>
        </div>
    </div>
</div>

<audio id="suono-offerta" src="~/sounds/coin.mp3" preload="auto"></audio>
<audio id="suono-countdown" src="~/sounds/beep.mp3" preload="auto"></audio>
<audio id="suono-vittoria" src="~/sounds/gavel.mp3" preload="auto"></audio>

@section Scripts {
    @Html.AntiForgeryToken()
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.0/signalr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        (function(){
            let debounceTimer;
            let durataTimer = parseInt('@(ViewBag.DurataTimer ?? "0")', 10) || 0;
            let countdownTimerAdmin = null;
            let closeTimeoutAdmin = null;
            let lastOffertaAdmin = 0;
            let isBuzzer = false;
                    let astaAperta = false;
                            let astaAttiva = false;

            function updateBuzzerUI(on) {
                isBuzzer = !!on;
                const offertaEl   = document.getElementById('overlay-offerta');
                const offerenteEl = document.getElementById('overlay-offerente');
                if (offertaEl) offertaEl.style.display = on ? 'none' : '';
                if (offerenteEl && on) {
                    offerenteEl.innerText = 'In attesa del BUZZ...';
                    offerenteEl.style.color = '';
                }
            }

            function setOverlayBg(url){
                const box = document.querySelector('#asta-overlay .asta-box');
                if (box) box.style.setProperty('--bg-url', url ? `url('${url}')` : 'none');
            }
            function escapeHtml(s){ return (s||'').replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m])); }
            const LOG_FONT_STACK = `"JetBrains Mono",ui-monospace,SFMono-Regular,Menlo,Consolas,"Liberation Mono",monospace`;
            const LOG_ICONS  = { start:'🚀', bid:'💰', paused:'⏸️', resumed:'▶️', win:'🏆', cancel:'🛑', info:'ℹ️' };
            const LOG_COLORS = { start:'#94a3b8', bid:'#0ea5e9', paused:'#f59e0b', resumed:'#14b8a6', win:'#22c55e', cancel:'#ef4444', info:'#94a3b8' };

            function appendLog(type, text){
                const el = document.getElementById('overlay-log'); if (!el) return;
                const t  = new Date().toLocaleTimeString();
                const ic = LOG_ICONS[type]  || LOG_ICONS.info;
                const col= LOG_COLORS[type] || LOG_COLORS.info;

                const html = `
                    <div class="log-item log-${type}"
                         style="--accent:${col}; font-family:${LOG_FONT_STACK}; font-variant-numeric:tabular-nums; letter-spacing:.2px;">
                      <span class="log-ic"    style="font-family:${LOG_FONT_STACK}">${ic}</span>
                      <span class="log-text" style="font-family:${LOG_FONT_STACK}">${escapeHtml(text)}</span>
                      <span class="log-time" style="font-family:${LOG_FONT_STACK}">${t}</span>
                    </div>`;

                el.insertAdjacentHTML('afterbegin', html);

                const items = el.querySelectorAll('.log-item');
                if (items.length > 100) for (let i=100; i<items.length; i++) items[i].remove();
            }

            function closeAdminOverlayImmediate() {
                        astaAperta = false;
                try { clearTimeout(countdownTimerAdmin); } catch {}
                try { clearTimeout(closeTimeoutAdmin); } catch {}
                countdownTimerAdmin = null;
                closeTimeoutAdmin   = null;

                const overlay = document.getElementById('asta-overlay');
                if (overlay) overlay.classList.remove('visible');

                const t = document.getElementById('overlay-timer');
                if (t) { t.textContent = '--'; t.classList.remove('timer-green','timer-yellow','timer-red'); }
                const offEl = document.getElementById('overlay-offerente');
                if (offEl) { offEl.textContent = '—'; offEl.style.color = ''; }
                const offVal = document.getElementById('overlay-offerta');
                if (offVal) offVal.textContent = '0';
            }

            const legaAliasAdmin = "@ViewBag.LegaAlias";
            const adminNick = "@(ViewBag.AdminNick ?? "ADMIN")";
            const appLogoUrl = '@appLogoUrl';
        let buzzerModeOn = false;
        function updateBuzzerUI(isOn){
          buzzerModeOn = !!isOn;

          const offertaEl   = document.getElementById('overlay-offerta');
          const offerenteEl = document.getElementById('overlay-offerente');

          if (offertaEl) offertaEl.style.display = buzzerModeOn ? 'none' : '';

          if (offerenteEl) {
            const txt = (offerenteEl.textContent || '').trim();
            if (buzzerModeOn && (txt === '' || /attesa/i.test(txt))) {
              offerenteEl.textContent = 'In attesa di BUZZ...';
              offerenteEl.style.color = '';
            }
          }
        }


            const LS_START      = `asta:start:${legaAliasAdmin}`;
            const LS_PAUSE_ACC    = `asta:pauseAcc:${legaAliasAdmin}`;
            const LS_PAUSE_AT     = `asta:pauseAt:${legaAliasAdmin}`;
            const LS_PAUSE_ACTIVE = `asta:pauseActive:${legaAliasAdmin}`;
            const LS_STOP_ACTIVE  = `asta:stopActive:${legaAliasAdmin}`;
            const LS_STOP_SEC     = `asta:stopSec:${legaAliasAdmin}`;
                    const LS_STOP_AT      = `asta:stopAt:${legaAliasAdmin}`;
        const LS_STOP_ACC     = `asta:stopAcc:${legaAliasAdmin}`;

            const ALPH = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');
            const LS_LETTERS = `asta:lettersArchived:${legaAliasAdmin}`;
            const LS_DEFAULT_TIMER = `asta:defaultTimer:${legaAliasAdmin}`;



            function getArchivedLetters(){ try{ return JSON.parse(localStorage.getItem(LS_LETTERS)||'[]'); }catch{ return []; } }
            function setArchivedLetters(arr){ localStorage.setItem(LS_LETTERS, JSON.stringify(arr)); renderLettersChips(); }
            function fmt(s){ s=Math.max(0,Math.floor(s||0)); const h=Math.floor(s/3600), m=Math.floor((s%3600)/60), ss=s%60; return h>0?`${h}:${String(m).padStart(2,'0')}:${String(ss).padStart(2,'0')}`:`${String(m).padStart(2,'0')}:${String(ss).padStart(2,'0')}`; }
            function submitFormDebounced(){
                clearTimeout(debounceTimer);
                const pageInput = document.getElementById('pageInput');
                if (pageInput) pageInput.value = '1';
                debounceTimer = setTimeout(() => document.getElementById("filtroForm").submit(), 500);
            }

            function toggleLista(id){ const el=document.getElementById(id); if(el) el.classList.toggle('d-none'); }
            window.toggleLista=toggleLista;

            window.mostraMessaggio = function (titolo, corpo, conferma = false) {
                const mEl = document.getElementById('messaggioModale');
                if (!mEl) { alert(corpo || titolo || ''); return Promise.resolve(true); }
                const titleEl = document.getElementById('messaggioModaleTitolo');
                const bodyEl  = document.getElementById('messaggioModaleCorpo');
                let   btnOk   = document.getElementById('messaggioModaleBtnOk');
                let   btnAnn  = document.getElementById('messaggioModaleBtnAnnulla');

                titleEl.textContent = titolo || 'Info';
                bodyEl.textContent  = corpo  || '';
                btnAnn.style.display = conferma ? '' : 'none';

                const bs = bootstrap.Modal.getOrCreateInstance(mEl);
                btnOk.replaceWith(btnOk.cloneNode(true));
                btnAnn.replaceWith(btnAnn.cloneNode(true));
                btnOk  = document.getElementById('messaggioModaleBtnOk');
                btnAnn = document.getElementById('messaggioModaleBtnAnnulla');

                const bgMsg = document.getElementById('bg-msg');
                if (bgMsg) bgMsg.style.backgroundImage = `url('${appLogoUrl}')`;

                return new Promise((resolve) => {
                    let decided = false;
                    const cleanup = () => { mEl.removeEventListener('hidden.bs.modal', onHidden); };
                    const onHidden = () => { if (!decided) { decided = true; resolve(false); } cleanup(); };
                    const onOk  = () => { if (decided) return; decided = true; mEl.addEventListener('hidden.bs.modal', () => { resolve(true); cleanup(); }, { once: true }); bs.hide(); };
                    const onAnn = () => { if (decided) return; decided = true; mEl.addEventListener('hidden.bs.modal', () => { resolve(false); cleanup(); }, { once: true }); bs.hide(); };
                    btnOk.addEventListener('click', onOk, { once:true });
                    if (conferma) btnAnn.addEventListener('click', onAnn, { once:true });
                    mEl.addEventListener('hidden.bs.modal', onHidden);
                    bs.show();
                });
            };

            let audioUnlocked=false;
            document.addEventListener('click',()=>{ if(audioUnlocked) return; audioUnlocked=true; ['suono-offerta','suono-countdown','suono-vittoria'].forEach(id=>{ const a=document.getElementById(id); if(!a) return; a.muted=true; a.play().catch(()=>{}).finally(()=>{ try{a.pause();a.currentTime=0;}catch{} a.muted=false; }); }); }, { once:true });

        function computeElapsedSec(){
          const startIso = localStorage.getItem(LS_START);
          if (!startIso) return 0;
          const startMs = new Date(startIso).getTime();

          // PAUSE (cronologica)
          const pauseAcc   = parseInt(localStorage.getItem(LS_PAUSE_ACC) || "0");
          const pauseAct   = (localStorage.getItem(LS_PAUSE_ACTIVE) === "true");
          const pauseAtIso = localStorage.getItem(LS_PAUSE_AT);
          const pauseExtra = (pauseAct && pauseAtIso)
            ? Math.max(0, Math.floor((Date.now() - new Date(pauseAtIso).getTime()) / 1000))
            : 0;

          // STOP (solo locale/visivo)
          const stopAcc   = parseInt(localStorage.getItem(LS_STOP_ACC) || "0");
          const stopAct   = (localStorage.getItem(LS_STOP_ACTIVE) === "true");
          const stopAtIso = localStorage.getItem(LS_STOP_AT);
          const stopExtra = (stopAct && stopAtIso)
            ? Math.max(0, Math.floor((Date.now() - new Date(stopAtIso).getTime()) / 1000))
            : 0;

          const elapsed = Math.floor((Date.now() - startMs) / 1000);
          return Math.max(0, elapsed - (pauseAcc + pauseExtra + stopAcc + stopExtra));
        }


            function paintDurata(){
                const out=document.getElementById('durata-asta');
                const badge=document.getElementById('stato-pausa');
                const startIso=localStorage.getItem(LS_START);
                if(!startIso){ out.textContent='00:00'; badge?.classList.add('d-none'); return; }

                if(localStorage.getItem(LS_STOP_ACTIVE)==="true"){
                    const frozen = parseInt(localStorage.getItem(LS_STOP_SEC)||"0");
                    out.textContent = fmt(frozen);
                    badge?.classList.toggle('d-none', !(localStorage.getItem(LS_PAUSE_ACTIVE)==="true"));
                    return;
                }

                const sec = computeElapsedSec();
                out.textContent=fmt(sec);
                badge?.classList.toggle('d-none', !(localStorage.getItem(LS_PAUSE_ACTIVE)==="true"));
            }
            let durataInterval=null;
            function startDurataLoop(){ if(durataInterval) clearInterval(durataInterval); paintDurata(); durataInterval=setInterval(paintDurata,1000); }
            function stopDurataLoop(){ if(durataInterval){ clearInterval(durataInterval); durataInterval=null; } }
            function resetDurataLocal(){
                localStorage.removeItem(LS_START);
                localStorage.removeItem(LS_PAUSE_AT);
                localStorage.setItem(LS_PAUSE_ACC,"0");
                localStorage.setItem(LS_PAUSE_ACTIVE,"false");
                localStorage.setItem(LS_STOP_ACTIVE,"false");
                localStorage.removeItem(LS_STOP_SEC);
          localStorage.removeItem(LS_STOP_AT);     // << aggiungi
          localStorage.setItem(LS_STOP_ACC,"0");   // << aggiungi

          stopDurataLoop();
                const out=document.getElementById('durata-asta'); const badge=document.getElementById('stato-pausa');
                if(out) out.textContent='00:00'; if(badge) badge.classList.add('d-none');
                const stopBtn=document.getElementById('btn-stop'); if(stopBtn){ stopBtn.dataset.state='go'; stopBtn.textContent='Stop'; }
            }

function toggleStop(){
  const stopBtn = document.getElementById('btn-stop');
  const active  = (localStorage.getItem(LS_STOP_ACTIVE) === "true");

  if (active) {
    // Uscita dallo STOP: aggiungi il delta allo STOP_ACC e chiudi lo stato
    const atIso = localStorage.getItem(LS_STOP_AT);
    if (atIso) {
      const delta = Math.max(0, Math.floor((Date.now() - new Date(atIso).getTime()) / 1000));
      const acc   = parseInt(localStorage.getItem(LS_STOP_ACC) || "0");
      localStorage.setItem(LS_STOP_ACC, String(acc + delta));
    }
    localStorage.setItem(LS_STOP_ACTIVE, "false");
    localStorage.removeItem(LS_STOP_AT);

    stopBtn.dataset.state = 'go';
    stopBtn.textContent   = 'Stop';
    startDurataLoop();
  } else {
    // Entrata in STOP: “fotografa” il tempo visibile e memorizza il momento
    const sec = computeElapsedSec();
    localStorage.setItem(LS_STOP_ACTIVE, "true");
    localStorage.setItem(LS_STOP_SEC, String(sec));
    localStorage.setItem(LS_STOP_AT, new Date().toISOString());

    stopBtn.dataset.state = 'stop';
    stopBtn.textContent   = 'Riprendi Timer';
    paintDurata();
    stopDurataLoop();
  }
}

        


            function applyInitialFilter(letter){
                const inizialeInput=document.getElementById('inizialeInput');
                const nomeInput=document.getElementById('nomeFilterInput');
                const squadraInput=document.getElementById('squadraFilterInput');
                const sorteggioInput=document.getElementById('sorteggioInput');
                if (sorteggioInput) sorteggioInput.value='true';
                if (inizialeInput) inizialeInput.value=letter||'';
                if (nomeInput) nomeInput.value='';
                if (squadraInput) squadraInput.value='';
                const pageInput = document.getElementById('pageInput');
                if (pageInput) pageInput.value = '1';
                document.getElementById('filtroForm').submit();
            }

            function renderLettersChips(){
                const cont=document.getElementById('lettersChips');
                if(!cont) return;
                const archived=getArchivedLetters();
                const selected=(new URLSearchParams(window.location.search).get('iniziale')||'').toUpperCase();
                cont.innerHTML='';
                ALPH.forEach(l=>{
                    const btn=document.createElement('button');
                    btn.type='button'; btn.className='letter-chip btn btn-sm';
                    if(archived.includes(l)) btn.classList.add('letter-archived');
                    if(selected===l) btn.classList.add('letter-selected');
                    btn.textContent=l;
                    btn.title=archived.includes(l)?'Lettera estratta (clic per renderla disponibile)':'Filtra per '+l;
                    btn.addEventListener('click', ()=>{
                        if(archived.includes(l)) setArchivedLetters(archived.filter(x=>x!==l));
                        applyInitialFilter(l);
                    });
                    cont.appendChild(btn);
                });
            }

            const connection=new signalR.HubConnectionBuilder().withUrl("/bazzerHub").build();
            window.connection=connection;

            connection.on("StatoAsta", (stato) => {
                if (stato?.startUtc) {
                    const curr = localStorage.getItem(LS_START);
                    const incoming = new Date(stato.startUtc).getTime();
                    if (!curr || incoming < new Date(curr).getTime()) {
                        localStorage.setItem(LS_START, stato.startUtc);
                    }
                }

                if (typeof stato?.pausaAccumulataSec === 'number') {
                    localStorage.setItem(LS_PAUSE_ACC, String(stato.pausaAccumulataSec));
                } else if (!localStorage.getItem(LS_PAUSE_ACC)) {
                    localStorage.setItem(LS_PAUSE_ACC, "0");
                }

                const pauseActive = !!stato?.pausaAttiva;
                localStorage.setItem(LS_PAUSE_ACTIVE, pauseActive ? "true" : "false");
                if (pauseActive) {
                    if (!localStorage.getItem(LS_PAUSE_AT)) {
                        localStorage.setItem(LS_PAUSE_AT, new Date().toISOString());
                    }
                    document.getElementById('btn-pausa').disabled = true;
                    document.getElementById('btn-riprendi').disabled = false;
                } else {
                    localStorage.removeItem(LS_PAUSE_AT);
                    document.getElementById('btn-pausa').disabled = false;
                    document.getElementById('btn-riprendi').disabled = true;
                }
                if (typeof stato?.buzzerAttivo === 'boolean') {
                    updateBuzzerUI(stato.buzzerAttivo);
                }
                updateBuzzerUI(!!stato?.buzzerAttivo);

                startDurataLoop();
            });

            connection.on("RiepilogoAggiornato",(data)=>{
                const squads=(data&&(data.squads||data.squadre))?(data.squads||data.squadre):[];
                squads.forEach(s=>{
                    const cred=document.getElementById(`cred-${s.squadraId}`);
                    const pmax=document.getElementById(`pmax-${s.squadraId}`);
                    if(cred) cred.textContent=s.creditiDisponibili;
                    if(pmax) pmax.textContent=s.puntataMassima;
                    const btn=document.querySelector(`.btn-bonus[data-squadraid="${s.squadraId}"]`);
                    if(btn){ btn.dataset.crediti=s.creditiDisponibili; btn.dataset.pmax=s.puntataMassima; }
                });
            });

            connection.on("MostraGiocatoreInAsta",(giocatore)=>{
                        astaAperta = true;
                document.getElementById('overlay-nome-giocatore').innerText=giocatore.nome;
                document.getElementById('overlay-dettagli-giocatore').innerText=`${giocatore.ruolo} - ${giocatore.squadraReale}`;
                document.getElementById('overlay-logo-squadra').src=giocatore.logoUrl;
                document.getElementById('overlay-offerta').innerText='0';
                const offEl=document.getElementById('overlay-offerente'); offEl.innerText='In attesa di offerte...'; offEl.style.color='';
                const logEl = document.getElementById('overlay-log'); if (logEl) logEl.innerHTML='';
                setOverlayBg(giocatore.logoUrl || appLogoUrl);
                appendLog('start', `Asta avviata per ${giocatore.nome} (${giocatore.ruolo} - ${giocatore.squadraReale})`);
                if (buzzerModeOn) {
                    const offertaEl = document.getElementById('overlay-offerta');
                    if (offertaEl) offertaEl.style.display = 'none';
                    if (offEl) { offEl.innerText = 'In attesa del BUZZ...'; offEl.style.color = ''; }
                } else {
                    const offertaEl = document.getElementById('overlay-offerta');
                    if (offertaEl) offertaEl.style.display = '';
                }

                const timerEl=document.getElementById('overlay-timer');
                timerEl.innerText='--'; timerEl.classList.remove('timer-green','timer-yellow','timer-red');
                document.querySelector('.asta-box-footer').style.display='block';
                document.getElementById('asta-overlay').classList.add('visible');

                lastOffertaAdmin=0;
                clearTimeout(countdownTimerAdmin); countdownTimerAdmin=null;
                clearTimeout(closeTimeoutAdmin);  closeTimeoutAdmin=null;
            });

            connection.on("AggiornaDurataTimer",(nuoviSecondi)=>{
                const s=parseInt(nuoviSecondi)||0;
                if(s>0){ durataTimer=s; localStorage.setItem(LS_DEFAULT_TIMER,String(s)); const secInput=document.getElementById('secondiTimer'); if(secInput) secInput.value=s; }
            });

                  connection.on("AggiornaOfferta",(offerente, offerta, fineUtc)=>{
                              if (!astaAperta) return;
        document.getElementById('overlay-offerente').innerText=offerente||'-';
        document.getElementById('overlay-offerta').innerText=offerta||0;
        clearTimeout(countdownTimerAdmin); countdownTimerAdmin=null;
        clearTimeout(closeTimeoutAdmin);  closeTimeoutAdmin=null;

        const timerEl=document.getElementById('overlay-timer');

        if (!fineUtc) {
          timerEl.innerText = '--';
          timerEl.classList.remove('timer-green','timer-yellow','timer-red');
          lastOffertaAdmin = offerta || 0;
          return;
        }
        if (buzzerModeOn) {
          const valEl = document.getElementById('overlay-offerta');
          if (valEl) valEl.textContent = '—';
        }
        const isRealBid=(offerta > (lastOffertaAdmin||0));
        if(isRealBid){
          // Rimuovi la riproduzione del suono da qui.
          // try{ const s=document.getElementById('suono-offerta'); s.currentTime=0; s.play().catch(()=>{}); }catch{}
          appendLog('bid', `${offerente} offre ${offerta}`);
        }
        lastOffertaAdmin=offerta;

                const end=new Date(fineUtc);

                const paint=(sec)=>{
                    timerEl.innerText=sec;
                    timerEl.classList.remove('timer-green','timer-yellow','timer-red');
                    if(sec>5) timerEl.classList.add('timer-green');
                    else if(sec>=4) timerEl.classList.add('timer-yellow');
                    else timerEl.classList.add('timer-red');
                };

                let prevSec=-1;
                const tick=()=>{
                    const msLeft=end.getTime()-Date.now();
                    const sec=Math.max(0, Math.ceil(msLeft/1000));

                    if(sec!==prevSec){
                        paint(sec);
                        if(sec>0 && sec <= 10 && prevSec!==-1){
                            try{ const beep=document.getElementById('suono-countdown'); beep.currentTime=0; beep.play().catch(()=>{}); }catch{}
                        }
                        prevSec=sec;
                        if(sec===0){ clearTimeout(countdownTimerAdmin); countdownTimerAdmin=null; return; }
                    }

                    const nextDelay=Math.max(20, msLeft - (sec-1)*1000 + 2);
                    countdownTimerAdmin=setTimeout(tick,nextDelay);
                };
                tick();

                const msRemaining=end.getTime()-Date.now();
                if(msRemaining>0){
                    closeTimeoutAdmin=setTimeout(()=>{ connection.invoke("TerminaAsta", legaAliasAdmin).catch(err=>console.error(err.toString())); }, msRemaining+2);
                }else{
                    connection.invoke("TerminaAsta", legaAliasAdmin).catch(err=>console.error(err.toString()));
                }
            });

                    connection.on("Buzz", (offerente, fineUtc) => {
          // Guardie immediate: modalità corretta + asta davvero aperta
          if (!buzzerModeOn || !astaAperta) return;

          // L’overlay dev’essere visibile (altrimenti ignora qualsiasi BUZZ “residuo”)
          const overlay = document.getElementById('asta-overlay');
          const visibile = overlay && overlay.classList.contains('visible');
          if (!visibile) return;

          // Serve un fineUtc valido e futuro
          if (!fineUtc) return;
          const end = new Date(fineUtc);
          if (isNaN(end.getTime())) return;
          const msRemaining0 = end.getTime() - Date.now();
          if (msRemaining0 <= 0) return;

          // UI base
          const offEl = document.getElementById('overlay-offerente');
          if (offEl) offEl.innerText = offerente || '-';

          const valEl = document.getElementById('overlay-offerta');
          if (valEl) valEl.innerText = '—';

          // Stoppa timer preesistenti prima di ripartire
          try { clearTimeout(countdownTimerAdmin); } catch {}
          try { clearTimeout(closeTimeoutAdmin); } catch {}
          countdownTimerAdmin = null;
          closeTimeoutAdmin   = null;

          // Play “moneta” SOLO dopo tutti i controlli
          try {
            const s = document.getElementById('suono-offerta');
            s.currentTime = 0;
            s.play().catch(()=>{});
          } catch {}

          appendLog('bid', `BUZZ da ${offerente}`);

          const timerEl = document.getElementById('overlay-timer');
          const paint = (sec) => {
            if (!timerEl) return;
            timerEl.innerText = sec;
            timerEl.classList.remove('timer-green','timer-yellow','timer-red');
            if (sec > 5) timerEl.classList.add('timer-green');
            else if (sec >= 4) timerEl.classList.add('timer-yellow');
            else timerEl.classList.add('timer-red');
          };

          let prevSec = -1;
          const tick = () => {
            const msLeft = end.getTime() - Date.now();
            const sec = Math.max(0, Math.ceil(msLeft / 1000));

            if (sec !== prevSec) {
              paint(sec);
              if (sec > 0 && sec <= 10 && prevSec !== -1) {
                try {
                  const beep = document.getElementById('suono-countdown');
                  beep.currentTime = 0;
                  beep.play().catch(()=>{});
                } catch {}
              }
              prevSec = sec;
              if (sec === 0) { try { clearTimeout(countdownTimerAdmin); } catch {} countdownTimerAdmin = null; return; }
            }

            // correzione drift
            const nextDelay = Math.max(20, msLeft - (sec - 1) * 1000 + 2);
            countdownTimerAdmin = setTimeout(tick, nextDelay);
          };
          tick();

          const msRemaining = end.getTime() - Date.now();
          if (msRemaining > 0) {
            closeTimeoutAdmin = setTimeout(() => {
              connection.invoke("TerminaAsta", legaAliasAdmin).catch(err => console.error(err.toString()));
            }, msRemaining + 2);
          } else {
            connection.invoke("TerminaAsta", legaAliasAdmin).catch(err => console.error(err.toString()));
          }
        });


            connection.on("BuzzerRichiediImporto", (p) => {
                const id       = p?.giocatoreId || 0;
                const nome     = p?.nomeGiocatore || '—';
                const offer    = p?.offerente || '-';
                const squadraIdPreferita = p?.squadraId || null;

                document.getElementById('buzzerGiocatoreId').value = String(id);
                document.getElementById('buzzerNomeGiocatore').textContent = nome;
                document.getElementById('buzzerOfferente').textContent = offer;
                document.getElementById('buzzerCostoInput').value = '1';

                const bg = document.getElementById('bg-buzzer');
                if (bg) bg.style.backgroundImage = `url('${appLogoUrl}')`;
                const logo = document.getElementById('buzzerLogo');
                if (logo) logo.src = appLogoUrl;

                const sel = document.getElementById('buzzerSquadraSelect');
                sel.innerHTML = '';
                (window.squadreArr || []).forEach(s => {
                    const o = document.createElement('option');
                    o.value = s.SquadraId;
                    o.textContent = s.Nickname;
                    sel.appendChild(o);
                });

                if (squadraIdPreferita) {
                    sel.value = String(squadraIdPreferita);
                } else if (offer) {
                    const match = (window.squadreArr || []).find(x => (x.Nickname || '').toLowerCase() === String(offer).toLowerCase());
                    if (match) sel.value = String(match.SquadraId);
                }

                bootstrap.Modal.getOrCreateInstance(document.getElementById('buzzerModal')).show();
            });

            connection.on("AstaTerminata",(giocatoreId, nomeGiocatore, vincitore, prezzo)=>{
                        astaAperta = false;
                clearTimeout(countdownTimerAdmin); countdownTimerAdmin = null;
                clearTimeout(closeTimeoutAdmin);   closeTimeoutAdmin   = null;

                try { const v = document.getElementById('suono-vittoria'); v.currentTime = 0; v.play().catch(()=>{}); } catch {}

                const offEl = document.getElementById('overlay-offerente');
                const offVal = document.getElementById('overlay-offerta');

                if (buzzerModeOn) {
                    if (offEl) { offEl.innerText = `${vincitore} ha buzzato per primo. Inserire importo nella modale.`; offEl.style.color = '#2ecc71'; }
                    if (offVal) offVal.innerText = '—';
                    appendLog('win', `${nomeGiocatore} → ${vincitore} (Buzzer: in attesa importo)`);

                    const footer = document.querySelector('.asta-box-footer');
                    if (footer) footer.style.display = 'none';
                    setTimeout(() => { document.getElementById('asta-overlay')?.classList.remove('visible'); }, 800);
                    return;
                }

                if (offEl) { offEl.innerText = `AGGIUDICATO a ${vincitore} per ${prezzo} crediti!`; offEl.style.color = '#2ecc71'; }
                if (offVal) offVal.innerText = prezzo || 0;
                appendLog('win', `${nomeGiocatore} → ${vincitore} (${prezzo} crediti)`);
                document.querySelector('.asta-box-footer').style.display='none';
                setTimeout(() => {
                    document.getElementById('asta-overlay')?.classList.remove('visible');
                    setTimeout(() => location.reload(), 600);
                }, 1600);

            });

            connection.on("AstaAnnullata",()=>{
                        astaAperta = false;
                clearTimeout(countdownTimerAdmin); countdownTimerAdmin=null;
                clearTimeout(closeTimeoutAdmin);  closeTimeoutAdmin=null;
                        try{ ['suono-offerta','suono-countdown'].forEach(id => { const a=document.getElementById(id); a.pause?.(); a.currentTime=0; }); }catch{}
                document.getElementById('asta-overlay').classList.remove('visible');
                appendLog('cancel', 'Asta annullata dall’amministratore.');
            });
                    connection.on("BuzzerHardReset", () => {
          astaAttiva = false;
          // chiudi overlay/timer, azzera eventuali timeout (safe)
          try { clearTimeout(countdownTimerAdmin); countdownTimerAdmin = null; } catch {}
          try { clearTimeout(closeTimeoutAdmin);   closeTimeoutAdmin   = null; } catch {}
          document.getElementById('asta-overlay')?.classList.remove('visible');
          const t = document.getElementById('overlay-timer');
          if (t) { t.textContent = '--'; t.classList.remove('timer-green','timer-yellow','timer-red'); }
          const offEl = document.getElementById('overlay-offerente');
          if (offEl) { offEl.textContent = '—'; offEl.style.color = ''; }
          const offVal = document.getElementById('overlay-offerta');
          if (offVal) offVal.textContent = '0';
        });

            connection.on("StatoPartecipanti",(p)=>{ if(p?.partecipanti) window.paintPartecipanti(p.partecipanti); });

        connection.on("AstaPausa", () => {
          // 1) Se ero in STOP, finalizza lo STOP e chiudilo
          if (localStorage.getItem(LS_STOP_ACTIVE) === "true") {
            const atIso = localStorage.getItem(LS_STOP_AT);
            if (atIso) {
              const delta = Math.max(0, Math.floor((Date.now() - new Date(atIso).getTime()) / 1000));
              const acc   = parseInt(localStorage.getItem(LS_STOP_ACC) || "0");
              localStorage.setItem(LS_STOP_ACC, String(acc + delta));
            }
            localStorage.setItem(LS_STOP_ACTIVE, "false");
            localStorage.removeItem(LS_STOP_AT);
          }

          // 2) Attiva PAUSA (non sovrascrivere l'istante se già presente)
          localStorage.setItem(LS_PAUSE_ACTIVE, "true");
          if (!localStorage.getItem(LS_PAUSE_AT)) {
            localStorage.setItem(LS_PAUSE_AT, new Date().toISOString());
          }

          // 3) UI
          document.getElementById('btn-pausa').disabled = true;
          document.getElementById('btn-riprendi').disabled = false;

          clearTimeout(countdownTimerAdmin); countdownTimerAdmin = null;
          clearTimeout(closeTimeoutAdmin);  closeTimeoutAdmin  = null;

          const t = document.getElementById('overlay-timer');
          if (t) {
            t.textContent = 'PAUSA';
            t.classList.remove('timer-green','timer-yellow','timer-red');
          }
          const offEl = document.getElementById('overlay-offerente');
          if (offEl) { offEl.innerText = 'Asta in pausa…'; offEl.style.color = '#f1c40f'; }

          paintDurata();
          appendLog('paused', 'Asta in pausa');
        });


            connection.on("AstaRipresa",()=>{
                const pauseAtIso=localStorage.getItem(LS_PAUSE_AT);
                const acc=parseInt(localStorage.getItem(LS_PAUSE_ACC)||"0");
                if(pauseAtIso){
                    const delta=Math.max(0, Math.floor((Date.now()-new Date(pauseAtIso).getTime())/1000));
                    localStorage.setItem(LS_PAUSE_ACC, String(acc+delta));
                }
                localStorage.setItem(LS_PAUSE_ACTIVE,"false");
                localStorage.removeItem(LS_PAUSE_AT);
                document.getElementById('btn-pausa').disabled=false;
                document.getElementById('btn-riprendi').disabled=true;

                const offEl=document.getElementById('overlay-offerente'); if(offEl){ offEl.innerText='Asta ripresa'; offEl.style.color=''; }
                paintDurata();
                appendLog('resumed', 'Asta ripresa');

                try{ connection.invoke("RichiediStatoAttuale"); }catch{}
            });

            connection.on("DurataResettata", resetDurataLocal);

            connection.on("GiocatoreSuggerito",(giocatore, suggeritore)=>{
                mostraMessaggio("Suggerimento Ricevuto", `${suggeritore} ha suggerito: ${giocatore.nome}`);
                const inputNome=document.querySelector('#filtroForm input[name="nome"]');
                if(inputNome){ inputNome.value=giocatore.nome; document.getElementById('filtroForm').submit(); }
            });

            connection.on("BuzzerModeChanged",  (p) => updateBuzzerUI(!!p?.attivo));
            connection.on("BuzzerModeAggiornato",(p) => updateBuzzerUI(!!p?.buzzerAttivo));

            document.addEventListener('DOMContentLoaded', function(){
                const _log = document.getElementById('overlay-log');
                if (_log) {
                    _log.style.fontFamily = '"JetBrains Mono",ui-monospace,SFMono-Regular,Menlo,Consolas,"Liberation Mono",monospace';
                    _log.style.fontVariantNumeric = 'tabular-nums';
                    _log.style.letterSpacing = '.2px';
                }

                document.getElementById('asta-overlay')?.classList.remove('visible');
                updateBuzzerUI(document.getElementById('buzzerSwitch')?.checked);

                try{ const url=new URL(window.location.href); if (url.searchParams.has('bp')){ url.searchParams.delete('bp'); history.replaceState(null,'',url); } }catch{}

                let squadreArr = [];
                try { squadreArr = @Html.Raw(squadreJson) || []; } catch (e) { squadreArr = []; }
                window.squadreArr = squadreArr;

                const antiToken = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

                (function initTimerInput(){
                    const secInput=document.getElementById('secondiTimer');
                    if (!secInput) return;
                    const s=(Number.isFinite(durataTimer) && durataTimer>0) ? durataTimer : parseInt(localStorage.getItem(LS_DEFAULT_TIMER)||'0');
                    if(s>0) secInput.value=s;
                })();
                const elBonus = document.getElementById('bonusModal');
                if (elBonus) {
                    elBonus.addEventListener('hidden.bs.modal', () => {
                        const bg = document.getElementById('bg-bonus');
                        if (bg) bg.style.backgroundImage = 'none';
                    });
                }

                const elMsg = document.getElementById('messaggioModale');
                if (elMsg) {
                    elMsg.addEventListener('hidden.bs.modal', () => {
                        const bg = document.getElementById('bg-msg');
                        if (bg) bg.style.backgroundImage = 'none';
                    });
                }

                const urlParams=new URLSearchParams(window.location.search);
                const nomeFilter=document.getElementById('nomeFilterInput');
                if (urlParams.has('nome') && urlParams.get('nome')!=='' && nomeFilter){
                    nomeFilter.focus(); const v=nomeFilter.value; nomeFilter.value=''; nomeFilter.value=v;
                }
                const squadraFilter=document.getElementById('squadraFilterInput');
                nomeFilter?.addEventListener('input', ()=>{ const i=document.getElementById('inizialeInput'); if(i) i.value=''; submitFormDebounced(); });
                squadraFilter?.addEventListener('input', ()=>{ const i=document.getElementById('inizialeInput'); if(i) i.value=''; submitFormDebounced(); });

                document.querySelectorAll('table.table-bordered.table-sm button.btn-toggle-rosa').forEach(btn=>{
                    if (btn.getAttribute('onclick')?.includes('toggleLista(')) btn.removeAttribute('onclick');
                    btn.addEventListener('click',(ev)=>{ ev.preventDefault(); ev.stopPropagation(); const td=btn.closest('td'); const ul=td?.querySelector('ul'); if(ul) ul.classList.toggle('d-none'); });
                });
                const elAssegna = document.getElementById('assegnaModal');
                if (elAssegna) {
                    elAssegna.addEventListener('hidden.bs.modal', () => {
                        const bg = document.getElementById('bg-assegna');
                        if (bg) bg.style.backgroundImage = 'none';
                    });
                }

                const elSvincola = document.getElementById('svincolaModal');
                if (elSvincola) {
                    elSvincola.addEventListener('hidden.bs.modal', () => {
                        const bg = document.getElementById('bg-svincola');
                        if (bg) bg.style.backgroundImage = 'none';
                    });
                }

                document.addEventListener('click', async (ev) => {
                    const btnAsta = ev.target.closest('.btn-avvia-asta');
                    const btnAssegna = ev.target.closest('.btn-assegna');

                    if (btnAsta) {
                        ev.preventDefault();
                        try {
                            const id = btnAsta.dataset.id;
                            const mantra = btnAsta.dataset.mantra === 'true';

                            const r = await fetch('/Admin/AvviaAsta', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                                    'RequestVerificationToken': antiToken
                                },
                                body: `id=${encodeURIComponent(id)}&mantra=${mantra}&lega=${encodeURIComponent(legaAliasAdmin)}`
                            });

                            if (!r.ok) { await mostraMessaggio('Errore', 'Errore avvio asta.'); return; }

                            const overlay = document.getElementById('asta-overlay');
                            if (overlay) {
                                document.getElementById('overlay-nome-giocatore').innerText = '…';
                                document.getElementById('overlay-dettagli-giocatore').innerText = 'In attesa…';
                                document.getElementById('overlay-offerta').innerText = '0';
                                document.getElementById('overlay-offerente').innerText = 'In attesa di offerte...';
                                document.getElementById('overlay-timer').innerText = '--';
                                overlay.classList.add('visible');
                            }
                            try { if (window.connection) await window.connection.invoke("RichiediStatoAttuale"); } catch {}
                        } catch {
                            await mostraMessaggio('Errore', 'Impossibile avviare l’asta.');
                        }
                        return;
                    }

                    if (btnAssegna) {
                        ev.preventDefault();
                        try{
                            const id=btnAssegna.dataset.id, nome=btnAssegna.dataset.nome||'', ruolo=btnAssegna.dataset.ruolo||'', squadra=btnAssegna.dataset.squadra||'', logo=btnAssegna.dataset.logo||'';
                            document.getElementById('idGiocatoreModale').value=id;
                            document.getElementById('nomeGiocatoreModale').innerText=nome;
                            document.getElementById('dettagliGiocatoreAssegna').innerText=`Ruolo: ${ruolo} - Squadra: ${squadra}`;
                            document.getElementById('logoGiocatoreAssegna').src=logo;
                            const bgA = document.getElementById('bg-assegna');
                            if (bgA) bgA.style.backgroundImage = logo ? `url('${logo}')` : 'none';

                            const sel = document.getElementById('squadraSelectAssegna');
                            sel.innerHTML = '';
                            (squadreArr || []).forEach(s => {
                                const o = document.createElement('option');
                                o.value = s.SquadraId;
                                o.innerText = s.Nickname;
                                sel.appendChild(o);
                            });

                            bootstrap?.Modal?.getOrCreateInstance?.(document.getElementById('assegnaModal'))?.show();
                        }catch{ await mostraMessaggio('Errore','Impossibile aprire la modale di assegnazione.'); }
                        return;
                    }
                });

                window.apriModaleSvincolo=function(btn){
                    const id=btn.dataset.id, nome=btn.dataset.nome||'', costo=parseInt(btn.dataset.costo)||0, squadra=btn.dataset.squadra||'', logo=btn.dataset.logo||'', ruolo=btn.dataset.ruolo||'';
                    const bgS = document.getElementById('bg-svincola');
                    if (bgS) bgS.style.backgroundImage = (logo ? `url('${logo}')` : 'none');
                    document.getElementById('idGiocatoreSvincola').value=id;
                    document.getElementById('costoOriginaleSvincolo').innerText=costo;
                    const input=document.getElementById('creditiSvincoloInput'); if(input){ input.min=0; input.removeAttribute('max'); input.value=String(costo); }
                    document.getElementById('logoGiocatoreSvincola').src=logo;
                    document.getElementById('nomeGiocatoreSvincolo').innerText=nome;
                    document.getElementById('dettagliGiocatoreSvincola').innerText = `Ruolo: ${ruolo} - Squadra: ${squadra}`;
                    bootstrap.Modal.getOrCreateInstance(document.getElementById('svincolaModal')).show();
                };

                document.getElementById('btnConfermaSvincolo')?.addEventListener('click',()=>{
                    const id=parseInt(document.getElementById('idGiocatoreSvincola').value);
                    let crediti=parseInt(document.getElementById('creditiSvincoloInput').value); if(isNaN(crediti)||crediti<0) crediti=0;
                    fetch('/Admin/SvincolaGiocatore',{ method:'POST', headers:{'Content-Type':'application/json','RequestVerificationToken':antiToken}, body:JSON.stringify({ id, creditiRestituiti:crediti }) })
                        .then(r=>{ if(r.ok) location.reload(); else mostraMessaggio('Errore','Errore durante lo svincolo.'); });
                });
                let modCostoBtnRef = null;

                window.apriModaleModificaCosto = function(btn) {
                    modCostoBtnRef = btn;
                    const id = parseInt(btn.dataset.id);
                    const nome = btn.dataset.nome || '';
                    const ruolo = btn.dataset.ruolo || '';
                    const squadra = btn.dataset.squadra || '';
                    const logo = btn.dataset.logo || '';
                    const costo = parseInt(btn.dataset.costo) || 0;
                    const squadraId = parseInt(btn.dataset.squadraid) || 0;

                    document.getElementById('modCostoGiocatoreId').value = id;
                    document.getElementById('modCostoSquadraId').value = squadraId;
                    document.getElementById('modCostoNome').innerText = nome;
                    document.getElementById('modCostoDettagli').innerText = `Ruolo: ${ruolo} - Squadra: ${squadra}`;
                    document.getElementById('modCostoLogo').src = logo;
                    document.getElementById('modCostoCorrente').innerText = String(costo);
                    document.getElementById('modCostoInput').value = String(costo);

                    const bg = document.getElementById('bg-modcosto');
                    if (bg) bg.style.backgroundImage = logo ? `url('${logo}')` : 'none';

                    bootstrap.Modal.getOrCreateInstance(document.getElementById('modificaCostoModal')).show();
                };

                document.getElementById('modificaCostoModal')?.addEventListener('hidden.bs.modal', () => {
                    const bg = document.getElementById('bg-modcosto');
                    if (bg) bg.style.backgroundImage = 'none';
                });

                document.getElementById('btnConfermaModificaCosto')?.addEventListener('click', async () => {
                    const idGioc = parseInt(document.getElementById('modCostoGiocatoreId').value);
                    const nuovoCosto = parseInt(document.getElementById('modCostoInput').value);
                    if (!Number.isFinite(nuovoCosto) || nuovoCosto < 0) {
                        await mostraMessaggio('Valore non valido', 'Inserisci un numero >= 0');
                        return;
                    }

                    try {
                        const r = await fetch('/Admin/ModificaCostoGiocatore', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                            },
                            body: JSON.stringify({ giocatoreId: idGioc, nuovoCosto })
                        });

                        if (!r.ok) {
                            let msg = 'Errore durante l’aggiornamento del costo.';
                            try {
                                const data = await r.json();
                                if (data && (data.message || data.error)) msg = data.message || data.error;
                            } catch {}
                            await mostraMessaggio('Operazione bloccata', msg);
                            return;
                        }

                        const data = await r.json();

                        if (modCostoBtnRef) {
                            const li = modCostoBtnRef.closest('li');
                            if (li) {
                                const spanCosto = li.querySelector('span.text-nowrap.small');
                                if (spanCosto) spanCosto.textContent = `(${nuovoCosto})`;

                                modCostoBtnRef.dataset.costo = String(nuovoCosto);

                                const btnSvincola = li.querySelector('button[data-role="btn-svincola"]');
                                if (btnSvincola) btnSvincola.dataset.costo = String(nuovoCosto);

                            }
                        }

                        bootstrap.Modal.getOrCreateInstance(document.getElementById('modificaCostoModal')).hide();

                        await mostraMessaggio('OK', 'Costo aggiornato correttamente.');

                    } catch {
                        await mostraMessaggio('Errore', 'Errore di rete durante l’aggiornamento.');
                    }
                });
                document.getElementById('buzzerModal')?.addEventListener('hidden.bs.modal', () => {
                    const bg = document.getElementById('bg-buzzer');
                    if (bg) bg.style.backgroundImage = 'none';
                });

                document.getElementById('btnConfermaBuzzer')?.addEventListener('click', async () => {
                    const giocId   = parseInt(document.getElementById('buzzerGiocatoreId').value);
                    const squadraId= parseInt(document.getElementById('buzzerSquadraSelect').value);
                    const costo    = parseInt(document.getElementById('buzzerCostoInput').value);

                    if (!giocId || !squadraId || !Number.isFinite(costo) || costo < 0) {
                        await mostraMessaggio('Dati mancanti', 'Seleziona la squadra e inserisci un costo valido.');
                        return;
                    }

                    try {
                        const r = await fetch('/Admin/ConcludiAstaBuzzer', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                            },
                            body: JSON.stringify({ giocatoreListoneId: giocId, squadraId, costo, lega: legaAliasAdmin })
                        });

                        if (!r.ok) {
                            let msg = 'Errore durante il salvataggio.';
                            try { const data = await r.json(); if (data?.message) msg = data.message; } catch {}
                            await mostraMessaggio('Operazione bloccata', msg);
                            return;
                        }

                        bootstrap.Modal.getOrCreateInstance(document.getElementById('buzzerModal')).hide();
                        await mostraMessaggio('OK', 'Assegnazione registrata.');
                        location.reload();
                    } catch {
                        await mostraMessaggio('Errore', 'Errore di rete durante il salvataggio.');
                    }
                });

                let bonusModal, bonusDeltaInput;
                function calcolaPuntataMax(creditiDisponibili){
                    const slotsRimasti = parseInt(document.getElementById('bonusSlotsRimasti').value) || 0;
                    const minimoPerSlot = 1;
                    const riserva = Math.max(0, (slotsRimasti - 1) * minimoPerSlot);
                    return Math.max(0, creditiDisponibili - riserva);
                }

                function aggiornaPreviewBonus(){
                    const currCred = parseInt(document.getElementById('bonusCreditiAttuali').textContent) || 0;
                    const delta    = parseInt(bonusDeltaInput.value) || 0;
                    const afterCred = currCred + delta;
                    const afterPMax = calcolaPuntataMax(afterCred);
                    document.getElementById('bonusCreditiDopo').textContent = afterCred;
                    document.getElementById('bonusPMaxDopo').textContent    = afterPMax;
                }

                document.querySelectorAll('.btn-bonus').forEach(btn=>{
                    btn.addEventListener('click',()=>{
                        const sId=parseInt(btn.dataset.squadraid),
                              nick=btn.dataset.nickname||'',
                              cred=parseInt(btn.dataset.crediti)||0,
                              pmax=parseInt(btn.dataset.pmax)||0,
                              giocatoriCount=parseInt(btn.dataset.giocatori)||0;

                        document.getElementById('bonusSquadraId').value = sId;
                        document.getElementById('bonusGiocatoriCount').value = giocatoriCount;
                        document.getElementById('bonusNick').textContent = nick;
                        document.getElementById('bonusCreditiAttuali').textContent = cred;
                        document.getElementById('bonusPMaxAttuale').textContent = pmax;

                        const slotsRimasti = Math.max(0, (cred - pmax) + 1);
                        document.getElementById('bonusSlotsRimasti').value = String(slotsRimasti);

                        bonusDeltaInput = document.getElementById('bonusDeltaInput');
                        bonusDeltaInput.value = "0";
                        aggiornaPreviewBonus();

                        if(!bonusModal) bonusModal=bootstrap.Modal.getOrCreateInstance(document.getElementById('bonusModal'));

                        const bgB = document.getElementById('bg-bonus');
                        if (bgB) bgB.style.backgroundImage = `url('${appLogoUrl}')`;

                        bonusModal.show();
                    });
                });

                document.getElementById('bonusDeltaInput')?.addEventListener('input', aggiornaPreviewBonus);
                document.getElementById('btnConfermaBonus')?.addEventListener('click', async ()=>{
                    const sId=parseInt(document.getElementById('bonusSquadraId').value);
                    const delta=parseInt(document.getElementById('bonusDeltaInput').value)||0;
                    try{
                        const r=await fetch('/Admin/AggiornaCreditiBonus',{ method:'POST', headers:{'Content-Type':'application/json','RequestVerificationToken':antiToken}, body:JSON.stringify({ squadraId:sId, delta }) });
                        if(!r.ok) throw new Error('HTTP '+r.status);
                        bonusModal?.hide();
                    }catch{ await mostraMessaggio('Errore','Impossibile applicare il bonus.'); }
                });

                document.getElementById('formTimer')?.addEventListener('submit', async (e)=>{
                    e.preventDefault();
                    const s=parseInt(document.getElementById('secondiTimer').value||"0");
                    if(!Number.isFinite(s)||s<2){ await mostraMessaggio('Valore non valido','Inserisci un numero >= 2'); return; }
                    const r=await fetch('/Admin/ImpostaTimer',{
                        method:'POST',
                        headers:{'Content-Type':'application/json','RequestVerificationToken':antiToken},
                        body: JSON.stringify({ secondi: s, lega: legaAliasAdmin })
                    });

                    if(r.ok){ durataTimer=s; localStorage.setItem(LS_DEFAULT_TIMER,String(s)); document.getElementById('secondiTimer').value=s; await mostraMessaggio('Timer Aggiornato','Timer aggiornato a '+s+' secondi!'); }
                    else { await mostraMessaggio('Errore','Errore aggiornamento timer.'); }
                });

                document.getElementById('bloccoPortieriSwitch')?.addEventListener('change', async function(){
                    try{ const url=new URL(window.location.href); if(url.searchParams.has('bp')){ url.searchParams.delete('bp'); history.replaceState(null,'',url); } }catch{}
                    const isAttivo=this.checked;
                    const r=await fetch('/Admin/ImpostaBloccoPortieri',{
                        method:'POST',
                        headers:{'Content-Type':'application/json','RequestVerificationToken':antiToken},
                        body:JSON.stringify({ attivo:isAttivo, lega: legaAliasAdmin })
                    });
                    if(r.ok) await mostraMessaggio('Regola Aggiornata','Blocco Portieri '+(isAttivo?'ATTIVATO':'DISATTIVATO'));
                    else await mostraMessaggio('Errore','Errore aggiornamento regola.');
                });

                document.getElementById('buzzerSwitch')?.addEventListener('change', async function(){
                    const isAttivo = this.checked;
                    try {
                        const r = await fetch('/Admin/ImpostaBuzzerMode', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json', 'RequestVerificationToken': antiToken },
                            body: JSON.stringify({ attivo: isAttivo, lega: legaAliasAdmin })
                        });
                        if (!r.ok) throw new Error('HTTP ' + r.status);
                        updateBuzzerUI(isAttivo);
                        await mostraMessaggio('Modalità Buzzer', isAttivo ? 'Modalità Buzzer ATTIVATA' : 'Modalità Buzzer DISATTIVATA');
                    } catch {
                        await mostraMessaggio('Errore', 'Impossibile aggiornare la modalità Buzzer.');
                        this.checked = !isAttivo;
                    }
                });

        document.getElementById('mantraSwitch')?.addEventListener('change', async function () {
          const isOn = this.checked;

          // 1) aggiorna l’hidden field del form
          const hidden = document.getElementById('mantraInput');
          if (hidden) hidden.value = isOn ? 'true' : 'false';

          // 2) **reset coerente del filtro ruolo** (UI + querystring)
          const selectRuolo = document.querySelector('#filtroForm select[name="ruolo"]');
          if (selectRuolo) selectRuolo.value = '';          // UI → “Tutti i ruoli”

          const url = new URL(window.location.href);
          url.searchParams.set('mantra', String(isOn));     // true/false
          url.searchParams.set('page', '1');                // riparti dalla prima pagina
          url.searchParams.delete('ruolo');                 // <-- QUI il fix: rimuove il filtro ruolo

          // (opzionale) se vuoi azzerare anche l’eventuale lettera sorteggiata:
          // url.searchParams.delete('iniziale');

          const titolo = 'Modalità Mantra';
          const msg = isOn ? 'Modalità Mantra ATTIVATA' : 'Modalità Mantra DISATTIVATA';
          if (typeof mostraMessaggio === 'function') {
            await mostraMessaggio(titolo, msg);
          } else {
            alert(msg);
          }

          window.location.href = url.toString();
        });



                document.getElementById('sorteggioSwitch')?.addEventListener('change', async function () {
                    const isOn = this.checked;

                    const sorteggioInput = document.getElementById('sorteggioInput');
                    if (sorteggioInput) sorteggioInput.value = isOn ? 'true' : 'false';

                    const url = new URL(window.location.href);
                    url.searchParams.set('sorteggio', isOn);
                    url.searchParams.set('page', '1');
                    if (!isOn) url.searchParams.delete('iniziale');

                    const titolo = 'Sorteggio lettere';
                    const msg = isOn ? 'Sorteggio lettere ATTIVATO' : 'Sorteggio lettere DISATTIVATO';
                    if (typeof mostraMessaggio === 'function') {
                        await mostraMessaggio(titolo, msg);
                    } else {
                        alert(msg);
                    }

                    window.location.href = url.toString();
                });

                document.getElementById('btnAnnullaAsta')?.addEventListener('click', async () => {
                    const ok = await mostraMessaggio('Annulla Asta', 'Sei sicuro?', true);
                    if (!ok) return;

                    let done = false;

                    try { await connection.invoke("AnnullaAsta", legaAliasAdmin); done = true; } catch {}

                    if (!done) { try { await connection.invoke("AnnullaAsta"); done = true; } catch {} }

                    if (!done) {
                        try {
                            const r = await fetch(`/Admin/AnnullaAsta?lega=${encodeURIComponent(legaAliasAdmin)}`, {
                                method: 'POST',
                                headers: { 'RequestVerificationToken': antiToken }
                            });
                            if (r.ok) done = true;
                        } catch {}
                    }

                    if (done) {
                        const overlay = document.getElementById('asta-overlay');
                        if (overlay) overlay.classList.remove('visible');
                    } else {
                        await mostraMessaggio('Errore', 'Errore durante l’annullamento dell’asta.');
                    }
                });

                document.getElementById('btnSalvaAssegnazione')?.addEventListener('click', async () => {
                    const idGioc    = parseInt(document.getElementById('idGiocatoreModale').value);
                    const squadraId = parseInt(document.getElementById('squadraSelectAssegna').value);
                    const costo     = parseInt(document.getElementById('costoAssegnaInput').value);


                    if (!idGioc || !squadraId || isNaN(costo) || costo < 0) {
                        await mostraMessaggio('Dati mancanti', 'Controlla squadra e costo.');
                        return;
                    }

                    const modalEl = document.getElementById('assegnaModal');
                    bootstrap.Modal.getOrCreateInstance(modalEl).hide();

                    try {
                        const r = await fetch('/Admin/AssegnaManualmente', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': antiToken
                            },
                            body: JSON.stringify({ giocatoreId: idGioc, squadraId, costo })
                        });

                        if (!r.ok) {
                            let msg = 'Errore durante l’assegnazione.';
                            try {
                                const data = await r.json();
                                if (data && (data.message || data.error)) {
                                    msg = data.message || data.error;
                                }
                            } catch (_) {
                            }

                            await mostraMessaggio('Operazione bloccata', msg);

                            bootstrap.Modal.getOrCreateInstance(modalEl).show();
                            return;
                        }

                        location.reload();
                    } catch {
                        await mostraMessaggio('Errore', 'Errore di rete durante l’assegnazione.');
                        bootstrap.Modal.getOrCreateInstance(modalEl).show();
                    }
                });

                renderLettersChips();
                document.getElementById('btnSorteggiaLettera')?.addEventListener('click', ()=>{
                    const archived=getArchivedLetters(); const pool=ALPH.filter(l=>!archived.includes(l));
                    if(pool.length===0){ mostraMessaggio('Sorteggio lettera','Tutte le lettere sono già state estratte. Premi "Reset lettere" o riabilita un singolo chip.'); return; }
                    const letter=pool[Math.floor(Math.random()*pool.length)];
                    setArchivedLetters([...archived, letter]); applyInitialFilter(letter);
                });
                document.getElementById('btnResetLettere')?.addEventListener('click', ()=>{
                    setArchivedLetters([]); const i=document.getElementById('inizialeInput'); if(i) i.value=''; document.getElementById('filtroForm').submit();
                });

                connection.start().then(()=>{
                    connection.invoke("RegistratiAllaLega", legaAliasAdmin, adminNick, true).catch(()=>{});
                    setInterval(()=>{ connection.invoke("Ping", legaAliasAdmin, adminNick).catch(()=>{}); }, 20000);
                    connection.invoke("AggiungiAdminAlGruppo", legaAliasAdmin).catch(()=>{});
                    connection.invoke("RichiediStatoAttuale").catch(()=>{});
                }).catch(err=>console.error(err));

                document.getElementById('btn-pausa')?.addEventListener('click', async () => {
                    let ok=false;
                    try { await connection.invoke("PausaAsta", legaAliasAdmin); ok=true; } catch {}
                    if(!ok){ try { await connection.invoke("PausaAsta"); ok=true; } catch {} }
                    if(!ok){
                        try {
                            await fetch(`/Admin/PausaAsta?lega=${encodeURIComponent(legaAliasAdmin)}`, {
                                method: 'POST',
                                headers: { 'RequestVerificationToken': antiToken }
                            });
                        } catch {}
                    }
                    try { await connection.invoke("RichiediStatoAttuale"); } catch {}
                });

                document.getElementById('btn-riprendi')?.addEventListener('click', async () => {
                    let ok=false;
                    try { await connection.invoke("RiprendiAsta", legaAliasAdmin); ok=true; } catch {}
                    if(!ok){ try { await connection.invoke("RiprendiAsta"); ok=true; } catch {} }
                    if(!ok){
                        try {
                            await fetch(`/Admin/RiprendiAsta?lega=${encodeURIComponent(legaAliasAdmin)}`, {
                                method: 'POST',
                                headers: { 'RequestVerificationToken': antiToken }
                            });
                        } catch {}
                    }
                    try { await connection.invoke("RichiediStatoAttuale"); } catch {}
                });

                document.getElementById('btn-reset')?.addEventListener('click', async ()=>{
                    resetDurataLocal();
                    try{ await connection.invoke("ResetDurataAsta", legaAliasAdmin); }catch{}
                });

                document.getElementById('btn-stop')?.addEventListener('click', toggleStop);

                (function initStopUI(){
                    const stopBtn=document.getElementById('btn-stop'); if(!stopBtn) return;
                    if(localStorage.getItem(LS_STOP_ACTIVE)==="true"){ stopBtn.dataset.state='stop'; stopBtn.textContent='Riprendi Timer'; stopDurataLoop(); paintDurata(); }
                    else { stopBtn.dataset.state='go'; stopBtn.textContent='Stop'; startDurataLoop(); }
                })();

                window.paintPartecipanti=function(list){
                    list.forEach(p=>{
                        const nick=(p.nick||p.Nick||'').toString();
                        const el=document.querySelector(`.status-dot[data-nick="${CSS.escape(nick)}"]`) || document.querySelector(`.status-dot[title="${CSS.escape(nick)}"]`);
                        if(!el) return;
                        el.classList.remove('dot-online','dot-offline','dot-waiting');
                        const stato=(p.stato||p.Stato||'offline').toLowerCase();
                        if(stato==='waiting') el.classList.add('dot-waiting');
                        else if(stato==='online') el.classList.add('dot-online');
                        else el.classList.add('dot-offline');
                    });
                };
            });
        })();
    </script>
}